/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScmPluginInputField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScmPluginInputField{}

// ScmPluginInputField struct for ScmPluginInputField
type ScmPluginInputField struct {
	// display title for the field
	Title *string `json:"title,omitempty"`
	// identifier for the field, used when submitting the input values
	Name *string `json:"name,omitempty"`
	// textual description
	Description *string `json:"description,omitempty"`
	// data type of the field: `String`, `Integer`, `Select` (multi-value), `FreeSelect` (open-ended multi-value), `Boolean` (true/false)
	Type *string `json:"type,omitempty"`
	// whether the input is required
	Required *bool `json:"required,omitempty"`
	// a default value if the input does not specify one
	DefaultValue *string `json:"defaultValue,omitempty"`
	// if the type is `Select` or `FreeSelect`, a list of string values to choose from
	Values []string `json:"values,omitempty"`
	Scope *string `json:"scope,omitempty"`
	// a key/value map of options, such as declaring that GUI display the input as a password field.
	RenderingOptions *map[string]string `json:"renderingOptions,omitempty"`
}

// NewScmPluginInputField instantiates a new ScmPluginInputField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScmPluginInputField() *ScmPluginInputField {
	this := ScmPluginInputField{}
	return &this
}

// NewScmPluginInputFieldWithDefaults instantiates a new ScmPluginInputField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScmPluginInputFieldWithDefaults() *ScmPluginInputField {
	this := ScmPluginInputField{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ScmPluginInputField) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmPluginInputField) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ScmPluginInputField) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ScmPluginInputField) SetTitle(v string) {
	o.Title = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ScmPluginInputField) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmPluginInputField) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ScmPluginInputField) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ScmPluginInputField) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ScmPluginInputField) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmPluginInputField) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ScmPluginInputField) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ScmPluginInputField) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ScmPluginInputField) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmPluginInputField) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ScmPluginInputField) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ScmPluginInputField) SetType(v string) {
	o.Type = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *ScmPluginInputField) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmPluginInputField) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *ScmPluginInputField) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *ScmPluginInputField) SetRequired(v bool) {
	o.Required = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *ScmPluginInputField) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue) {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmPluginInputField) GetDefaultValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *ScmPluginInputField) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *ScmPluginInputField) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ScmPluginInputField) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmPluginInputField) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ScmPluginInputField) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *ScmPluginInputField) SetValues(v []string) {
	o.Values = v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *ScmPluginInputField) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmPluginInputField) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *ScmPluginInputField) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *ScmPluginInputField) SetScope(v string) {
	o.Scope = &v
}

// GetRenderingOptions returns the RenderingOptions field value if set, zero value otherwise.
func (o *ScmPluginInputField) GetRenderingOptions() map[string]string {
	if o == nil || IsNil(o.RenderingOptions) {
		var ret map[string]string
		return ret
	}
	return *o.RenderingOptions
}

// GetRenderingOptionsOk returns a tuple with the RenderingOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmPluginInputField) GetRenderingOptionsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.RenderingOptions) {
		return nil, false
	}
	return o.RenderingOptions, true
}

// HasRenderingOptions returns a boolean if a field has been set.
func (o *ScmPluginInputField) HasRenderingOptions() bool {
	if o != nil && !IsNil(o.RenderingOptions) {
		return true
	}

	return false
}

// SetRenderingOptions gets a reference to the given map[string]string and assigns it to the RenderingOptions field.
func (o *ScmPluginInputField) SetRenderingOptions(v map[string]string) {
	o.RenderingOptions = &v
}

func (o ScmPluginInputField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScmPluginInputField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.RenderingOptions) {
		toSerialize["renderingOptions"] = o.RenderingOptions
	}
	return toSerialize, nil
}

type NullableScmPluginInputField struct {
	value *ScmPluginInputField
	isSet bool
}

func (v NullableScmPluginInputField) Get() *ScmPluginInputField {
	return v.value
}

func (v *NullableScmPluginInputField) Set(val *ScmPluginInputField) {
	v.value = val
	v.isSet = true
}

func (v NullableScmPluginInputField) IsSet() bool {
	return v.isSet
}

func (v *NullableScmPluginInputField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScmPluginInputField(val *ScmPluginInputField) *NullableScmPluginInputField {
	return &NullableScmPluginInputField{value: val, isSet: true}
}

func (v NullableScmPluginInputField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScmPluginInputField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


