/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProjectArchiveParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectArchiveParams{}

// ProjectArchiveParams struct for ProjectArchiveParams
type ProjectArchiveParams struct {
	Project *string `json:"project,omitempty"`
	JobUuidOption *string `json:"jobUuidOption,omitempty"`
	ImportExecutions *bool `json:"importExecutions,omitempty"`
	ImportConfig *bool `json:"importConfig,omitempty"`
	ImportNodesSources *bool `json:"importNodesSources,omitempty"`
	ImportACL *bool `json:"importACL,omitempty"`
	ImportScm *bool `json:"importScm,omitempty"`
	ValidateJobref *bool `json:"validateJobref,omitempty"`
	ExportAll *bool `json:"exportAll,omitempty"`
	ExportJobs *bool `json:"exportJobs,omitempty"`
	ExportExecutions *bool `json:"exportExecutions,omitempty"`
	ExportConfigs *bool `json:"exportConfigs,omitempty"`
	ExportReadmes *bool `json:"exportReadmes,omitempty"`
	ExportAcls *bool `json:"exportAcls,omitempty"`
	ExportScm *bool `json:"exportScm,omitempty"`
	ImportComponents *map[string]bool `json:"importComponents,omitempty"`
	ImportOpts *map[string]map[string]string `json:"importOpts,omitempty"`
	ExportComponents *map[string]bool `json:"exportComponents,omitempty"`
	ExportOpts *map[string]map[string]string `json:"exportOpts,omitempty"`
	StripJobRef *string `json:"stripJobRef,omitempty"`
	Targetproject *string `json:"targetproject,omitempty"`
	Apitoken *string `json:"apitoken,omitempty"`
	Url *string `json:"url,omitempty"`
	Preserveuuid *bool `json:"preserveuuid,omitempty"`
	AsyncImport *bool `json:"asyncImport,omitempty"`
}

// NewProjectArchiveParams instantiates a new ProjectArchiveParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectArchiveParams() *ProjectArchiveParams {
	this := ProjectArchiveParams{}
	return &this
}

// NewProjectArchiveParamsWithDefaults instantiates a new ProjectArchiveParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectArchiveParamsWithDefaults() *ProjectArchiveParams {
	this := ProjectArchiveParams{}
	return &this
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetProject() string {
	if o == nil || IsNil(o.Project) {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetProjectOk() (*string, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *ProjectArchiveParams) SetProject(v string) {
	o.Project = &v
}

// GetJobUuidOption returns the JobUuidOption field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetJobUuidOption() string {
	if o == nil || IsNil(o.JobUuidOption) {
		var ret string
		return ret
	}
	return *o.JobUuidOption
}

// GetJobUuidOptionOk returns a tuple with the JobUuidOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetJobUuidOptionOk() (*string, bool) {
	if o == nil || IsNil(o.JobUuidOption) {
		return nil, false
	}
	return o.JobUuidOption, true
}

// HasJobUuidOption returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasJobUuidOption() bool {
	if o != nil && !IsNil(o.JobUuidOption) {
		return true
	}

	return false
}

// SetJobUuidOption gets a reference to the given string and assigns it to the JobUuidOption field.
func (o *ProjectArchiveParams) SetJobUuidOption(v string) {
	o.JobUuidOption = &v
}

// GetImportExecutions returns the ImportExecutions field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetImportExecutions() bool {
	if o == nil || IsNil(o.ImportExecutions) {
		var ret bool
		return ret
	}
	return *o.ImportExecutions
}

// GetImportExecutionsOk returns a tuple with the ImportExecutions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetImportExecutionsOk() (*bool, bool) {
	if o == nil || IsNil(o.ImportExecutions) {
		return nil, false
	}
	return o.ImportExecutions, true
}

// HasImportExecutions returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasImportExecutions() bool {
	if o != nil && !IsNil(o.ImportExecutions) {
		return true
	}

	return false
}

// SetImportExecutions gets a reference to the given bool and assigns it to the ImportExecutions field.
func (o *ProjectArchiveParams) SetImportExecutions(v bool) {
	o.ImportExecutions = &v
}

// GetImportConfig returns the ImportConfig field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetImportConfig() bool {
	if o == nil || IsNil(o.ImportConfig) {
		var ret bool
		return ret
	}
	return *o.ImportConfig
}

// GetImportConfigOk returns a tuple with the ImportConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetImportConfigOk() (*bool, bool) {
	if o == nil || IsNil(o.ImportConfig) {
		return nil, false
	}
	return o.ImportConfig, true
}

// HasImportConfig returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasImportConfig() bool {
	if o != nil && !IsNil(o.ImportConfig) {
		return true
	}

	return false
}

// SetImportConfig gets a reference to the given bool and assigns it to the ImportConfig field.
func (o *ProjectArchiveParams) SetImportConfig(v bool) {
	o.ImportConfig = &v
}

// GetImportNodesSources returns the ImportNodesSources field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetImportNodesSources() bool {
	if o == nil || IsNil(o.ImportNodesSources) {
		var ret bool
		return ret
	}
	return *o.ImportNodesSources
}

// GetImportNodesSourcesOk returns a tuple with the ImportNodesSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetImportNodesSourcesOk() (*bool, bool) {
	if o == nil || IsNil(o.ImportNodesSources) {
		return nil, false
	}
	return o.ImportNodesSources, true
}

// HasImportNodesSources returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasImportNodesSources() bool {
	if o != nil && !IsNil(o.ImportNodesSources) {
		return true
	}

	return false
}

// SetImportNodesSources gets a reference to the given bool and assigns it to the ImportNodesSources field.
func (o *ProjectArchiveParams) SetImportNodesSources(v bool) {
	o.ImportNodesSources = &v
}

// GetImportACL returns the ImportACL field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetImportACL() bool {
	if o == nil || IsNil(o.ImportACL) {
		var ret bool
		return ret
	}
	return *o.ImportACL
}

// GetImportACLOk returns a tuple with the ImportACL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetImportACLOk() (*bool, bool) {
	if o == nil || IsNil(o.ImportACL) {
		return nil, false
	}
	return o.ImportACL, true
}

// HasImportACL returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasImportACL() bool {
	if o != nil && !IsNil(o.ImportACL) {
		return true
	}

	return false
}

// SetImportACL gets a reference to the given bool and assigns it to the ImportACL field.
func (o *ProjectArchiveParams) SetImportACL(v bool) {
	o.ImportACL = &v
}

// GetImportScm returns the ImportScm field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetImportScm() bool {
	if o == nil || IsNil(o.ImportScm) {
		var ret bool
		return ret
	}
	return *o.ImportScm
}

// GetImportScmOk returns a tuple with the ImportScm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetImportScmOk() (*bool, bool) {
	if o == nil || IsNil(o.ImportScm) {
		return nil, false
	}
	return o.ImportScm, true
}

// HasImportScm returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasImportScm() bool {
	if o != nil && !IsNil(o.ImportScm) {
		return true
	}

	return false
}

// SetImportScm gets a reference to the given bool and assigns it to the ImportScm field.
func (o *ProjectArchiveParams) SetImportScm(v bool) {
	o.ImportScm = &v
}

// GetValidateJobref returns the ValidateJobref field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetValidateJobref() bool {
	if o == nil || IsNil(o.ValidateJobref) {
		var ret bool
		return ret
	}
	return *o.ValidateJobref
}

// GetValidateJobrefOk returns a tuple with the ValidateJobref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetValidateJobrefOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidateJobref) {
		return nil, false
	}
	return o.ValidateJobref, true
}

// HasValidateJobref returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasValidateJobref() bool {
	if o != nil && !IsNil(o.ValidateJobref) {
		return true
	}

	return false
}

// SetValidateJobref gets a reference to the given bool and assigns it to the ValidateJobref field.
func (o *ProjectArchiveParams) SetValidateJobref(v bool) {
	o.ValidateJobref = &v
}

// GetExportAll returns the ExportAll field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetExportAll() bool {
	if o == nil || IsNil(o.ExportAll) {
		var ret bool
		return ret
	}
	return *o.ExportAll
}

// GetExportAllOk returns a tuple with the ExportAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetExportAllOk() (*bool, bool) {
	if o == nil || IsNil(o.ExportAll) {
		return nil, false
	}
	return o.ExportAll, true
}

// HasExportAll returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasExportAll() bool {
	if o != nil && !IsNil(o.ExportAll) {
		return true
	}

	return false
}

// SetExportAll gets a reference to the given bool and assigns it to the ExportAll field.
func (o *ProjectArchiveParams) SetExportAll(v bool) {
	o.ExportAll = &v
}

// GetExportJobs returns the ExportJobs field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetExportJobs() bool {
	if o == nil || IsNil(o.ExportJobs) {
		var ret bool
		return ret
	}
	return *o.ExportJobs
}

// GetExportJobsOk returns a tuple with the ExportJobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetExportJobsOk() (*bool, bool) {
	if o == nil || IsNil(o.ExportJobs) {
		return nil, false
	}
	return o.ExportJobs, true
}

// HasExportJobs returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasExportJobs() bool {
	if o != nil && !IsNil(o.ExportJobs) {
		return true
	}

	return false
}

// SetExportJobs gets a reference to the given bool and assigns it to the ExportJobs field.
func (o *ProjectArchiveParams) SetExportJobs(v bool) {
	o.ExportJobs = &v
}

// GetExportExecutions returns the ExportExecutions field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetExportExecutions() bool {
	if o == nil || IsNil(o.ExportExecutions) {
		var ret bool
		return ret
	}
	return *o.ExportExecutions
}

// GetExportExecutionsOk returns a tuple with the ExportExecutions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetExportExecutionsOk() (*bool, bool) {
	if o == nil || IsNil(o.ExportExecutions) {
		return nil, false
	}
	return o.ExportExecutions, true
}

// HasExportExecutions returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasExportExecutions() bool {
	if o != nil && !IsNil(o.ExportExecutions) {
		return true
	}

	return false
}

// SetExportExecutions gets a reference to the given bool and assigns it to the ExportExecutions field.
func (o *ProjectArchiveParams) SetExportExecutions(v bool) {
	o.ExportExecutions = &v
}

// GetExportConfigs returns the ExportConfigs field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetExportConfigs() bool {
	if o == nil || IsNil(o.ExportConfigs) {
		var ret bool
		return ret
	}
	return *o.ExportConfigs
}

// GetExportConfigsOk returns a tuple with the ExportConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetExportConfigsOk() (*bool, bool) {
	if o == nil || IsNil(o.ExportConfigs) {
		return nil, false
	}
	return o.ExportConfigs, true
}

// HasExportConfigs returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasExportConfigs() bool {
	if o != nil && !IsNil(o.ExportConfigs) {
		return true
	}

	return false
}

// SetExportConfigs gets a reference to the given bool and assigns it to the ExportConfigs field.
func (o *ProjectArchiveParams) SetExportConfigs(v bool) {
	o.ExportConfigs = &v
}

// GetExportReadmes returns the ExportReadmes field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetExportReadmes() bool {
	if o == nil || IsNil(o.ExportReadmes) {
		var ret bool
		return ret
	}
	return *o.ExportReadmes
}

// GetExportReadmesOk returns a tuple with the ExportReadmes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetExportReadmesOk() (*bool, bool) {
	if o == nil || IsNil(o.ExportReadmes) {
		return nil, false
	}
	return o.ExportReadmes, true
}

// HasExportReadmes returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasExportReadmes() bool {
	if o != nil && !IsNil(o.ExportReadmes) {
		return true
	}

	return false
}

// SetExportReadmes gets a reference to the given bool and assigns it to the ExportReadmes field.
func (o *ProjectArchiveParams) SetExportReadmes(v bool) {
	o.ExportReadmes = &v
}

// GetExportAcls returns the ExportAcls field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetExportAcls() bool {
	if o == nil || IsNil(o.ExportAcls) {
		var ret bool
		return ret
	}
	return *o.ExportAcls
}

// GetExportAclsOk returns a tuple with the ExportAcls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetExportAclsOk() (*bool, bool) {
	if o == nil || IsNil(o.ExportAcls) {
		return nil, false
	}
	return o.ExportAcls, true
}

// HasExportAcls returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasExportAcls() bool {
	if o != nil && !IsNil(o.ExportAcls) {
		return true
	}

	return false
}

// SetExportAcls gets a reference to the given bool and assigns it to the ExportAcls field.
func (o *ProjectArchiveParams) SetExportAcls(v bool) {
	o.ExportAcls = &v
}

// GetExportScm returns the ExportScm field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetExportScm() bool {
	if o == nil || IsNil(o.ExportScm) {
		var ret bool
		return ret
	}
	return *o.ExportScm
}

// GetExportScmOk returns a tuple with the ExportScm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetExportScmOk() (*bool, bool) {
	if o == nil || IsNil(o.ExportScm) {
		return nil, false
	}
	return o.ExportScm, true
}

// HasExportScm returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasExportScm() bool {
	if o != nil && !IsNil(o.ExportScm) {
		return true
	}

	return false
}

// SetExportScm gets a reference to the given bool and assigns it to the ExportScm field.
func (o *ProjectArchiveParams) SetExportScm(v bool) {
	o.ExportScm = &v
}

// GetImportComponents returns the ImportComponents field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetImportComponents() map[string]bool {
	if o == nil || IsNil(o.ImportComponents) {
		var ret map[string]bool
		return ret
	}
	return *o.ImportComponents
}

// GetImportComponentsOk returns a tuple with the ImportComponents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetImportComponentsOk() (*map[string]bool, bool) {
	if o == nil || IsNil(o.ImportComponents) {
		return nil, false
	}
	return o.ImportComponents, true
}

// HasImportComponents returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasImportComponents() bool {
	if o != nil && !IsNil(o.ImportComponents) {
		return true
	}

	return false
}

// SetImportComponents gets a reference to the given map[string]bool and assigns it to the ImportComponents field.
func (o *ProjectArchiveParams) SetImportComponents(v map[string]bool) {
	o.ImportComponents = &v
}

// GetImportOpts returns the ImportOpts field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetImportOpts() map[string]map[string]string {
	if o == nil || IsNil(o.ImportOpts) {
		var ret map[string]map[string]string
		return ret
	}
	return *o.ImportOpts
}

// GetImportOptsOk returns a tuple with the ImportOpts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetImportOptsOk() (*map[string]map[string]string, bool) {
	if o == nil || IsNil(o.ImportOpts) {
		return nil, false
	}
	return o.ImportOpts, true
}

// HasImportOpts returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasImportOpts() bool {
	if o != nil && !IsNil(o.ImportOpts) {
		return true
	}

	return false
}

// SetImportOpts gets a reference to the given map[string]map[string]string and assigns it to the ImportOpts field.
func (o *ProjectArchiveParams) SetImportOpts(v map[string]map[string]string) {
	o.ImportOpts = &v
}

// GetExportComponents returns the ExportComponents field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetExportComponents() map[string]bool {
	if o == nil || IsNil(o.ExportComponents) {
		var ret map[string]bool
		return ret
	}
	return *o.ExportComponents
}

// GetExportComponentsOk returns a tuple with the ExportComponents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetExportComponentsOk() (*map[string]bool, bool) {
	if o == nil || IsNil(o.ExportComponents) {
		return nil, false
	}
	return o.ExportComponents, true
}

// HasExportComponents returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasExportComponents() bool {
	if o != nil && !IsNil(o.ExportComponents) {
		return true
	}

	return false
}

// SetExportComponents gets a reference to the given map[string]bool and assigns it to the ExportComponents field.
func (o *ProjectArchiveParams) SetExportComponents(v map[string]bool) {
	o.ExportComponents = &v
}

// GetExportOpts returns the ExportOpts field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetExportOpts() map[string]map[string]string {
	if o == nil || IsNil(o.ExportOpts) {
		var ret map[string]map[string]string
		return ret
	}
	return *o.ExportOpts
}

// GetExportOptsOk returns a tuple with the ExportOpts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetExportOptsOk() (*map[string]map[string]string, bool) {
	if o == nil || IsNil(o.ExportOpts) {
		return nil, false
	}
	return o.ExportOpts, true
}

// HasExportOpts returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasExportOpts() bool {
	if o != nil && !IsNil(o.ExportOpts) {
		return true
	}

	return false
}

// SetExportOpts gets a reference to the given map[string]map[string]string and assigns it to the ExportOpts field.
func (o *ProjectArchiveParams) SetExportOpts(v map[string]map[string]string) {
	o.ExportOpts = &v
}

// GetStripJobRef returns the StripJobRef field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetStripJobRef() string {
	if o == nil || IsNil(o.StripJobRef) {
		var ret string
		return ret
	}
	return *o.StripJobRef
}

// GetStripJobRefOk returns a tuple with the StripJobRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetStripJobRefOk() (*string, bool) {
	if o == nil || IsNil(o.StripJobRef) {
		return nil, false
	}
	return o.StripJobRef, true
}

// HasStripJobRef returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasStripJobRef() bool {
	if o != nil && !IsNil(o.StripJobRef) {
		return true
	}

	return false
}

// SetStripJobRef gets a reference to the given string and assigns it to the StripJobRef field.
func (o *ProjectArchiveParams) SetStripJobRef(v string) {
	o.StripJobRef = &v
}

// GetTargetproject returns the Targetproject field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetTargetproject() string {
	if o == nil || IsNil(o.Targetproject) {
		var ret string
		return ret
	}
	return *o.Targetproject
}

// GetTargetprojectOk returns a tuple with the Targetproject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetTargetprojectOk() (*string, bool) {
	if o == nil || IsNil(o.Targetproject) {
		return nil, false
	}
	return o.Targetproject, true
}

// HasTargetproject returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasTargetproject() bool {
	if o != nil && !IsNil(o.Targetproject) {
		return true
	}

	return false
}

// SetTargetproject gets a reference to the given string and assigns it to the Targetproject field.
func (o *ProjectArchiveParams) SetTargetproject(v string) {
	o.Targetproject = &v
}

// GetApitoken returns the Apitoken field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetApitoken() string {
	if o == nil || IsNil(o.Apitoken) {
		var ret string
		return ret
	}
	return *o.Apitoken
}

// GetApitokenOk returns a tuple with the Apitoken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetApitokenOk() (*string, bool) {
	if o == nil || IsNil(o.Apitoken) {
		return nil, false
	}
	return o.Apitoken, true
}

// HasApitoken returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasApitoken() bool {
	if o != nil && !IsNil(o.Apitoken) {
		return true
	}

	return false
}

// SetApitoken gets a reference to the given string and assigns it to the Apitoken field.
func (o *ProjectArchiveParams) SetApitoken(v string) {
	o.Apitoken = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ProjectArchiveParams) SetUrl(v string) {
	o.Url = &v
}

// GetPreserveuuid returns the Preserveuuid field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetPreserveuuid() bool {
	if o == nil || IsNil(o.Preserveuuid) {
		var ret bool
		return ret
	}
	return *o.Preserveuuid
}

// GetPreserveuuidOk returns a tuple with the Preserveuuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetPreserveuuidOk() (*bool, bool) {
	if o == nil || IsNil(o.Preserveuuid) {
		return nil, false
	}
	return o.Preserveuuid, true
}

// HasPreserveuuid returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasPreserveuuid() bool {
	if o != nil && !IsNil(o.Preserveuuid) {
		return true
	}

	return false
}

// SetPreserveuuid gets a reference to the given bool and assigns it to the Preserveuuid field.
func (o *ProjectArchiveParams) SetPreserveuuid(v bool) {
	o.Preserveuuid = &v
}

// GetAsyncImport returns the AsyncImport field value if set, zero value otherwise.
func (o *ProjectArchiveParams) GetAsyncImport() bool {
	if o == nil || IsNil(o.AsyncImport) {
		var ret bool
		return ret
	}
	return *o.AsyncImport
}

// GetAsyncImportOk returns a tuple with the AsyncImport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectArchiveParams) GetAsyncImportOk() (*bool, bool) {
	if o == nil || IsNil(o.AsyncImport) {
		return nil, false
	}
	return o.AsyncImport, true
}

// HasAsyncImport returns a boolean if a field has been set.
func (o *ProjectArchiveParams) HasAsyncImport() bool {
	if o != nil && !IsNil(o.AsyncImport) {
		return true
	}

	return false
}

// SetAsyncImport gets a reference to the given bool and assigns it to the AsyncImport field.
func (o *ProjectArchiveParams) SetAsyncImport(v bool) {
	o.AsyncImport = &v
}

func (o ProjectArchiveParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectArchiveParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.JobUuidOption) {
		toSerialize["jobUuidOption"] = o.JobUuidOption
	}
	if !IsNil(o.ImportExecutions) {
		toSerialize["importExecutions"] = o.ImportExecutions
	}
	if !IsNil(o.ImportConfig) {
		toSerialize["importConfig"] = o.ImportConfig
	}
	if !IsNil(o.ImportNodesSources) {
		toSerialize["importNodesSources"] = o.ImportNodesSources
	}
	if !IsNil(o.ImportACL) {
		toSerialize["importACL"] = o.ImportACL
	}
	if !IsNil(o.ImportScm) {
		toSerialize["importScm"] = o.ImportScm
	}
	if !IsNil(o.ValidateJobref) {
		toSerialize["validateJobref"] = o.ValidateJobref
	}
	if !IsNil(o.ExportAll) {
		toSerialize["exportAll"] = o.ExportAll
	}
	if !IsNil(o.ExportJobs) {
		toSerialize["exportJobs"] = o.ExportJobs
	}
	if !IsNil(o.ExportExecutions) {
		toSerialize["exportExecutions"] = o.ExportExecutions
	}
	if !IsNil(o.ExportConfigs) {
		toSerialize["exportConfigs"] = o.ExportConfigs
	}
	if !IsNil(o.ExportReadmes) {
		toSerialize["exportReadmes"] = o.ExportReadmes
	}
	if !IsNil(o.ExportAcls) {
		toSerialize["exportAcls"] = o.ExportAcls
	}
	if !IsNil(o.ExportScm) {
		toSerialize["exportScm"] = o.ExportScm
	}
	if !IsNil(o.ImportComponents) {
		toSerialize["importComponents"] = o.ImportComponents
	}
	if !IsNil(o.ImportOpts) {
		toSerialize["importOpts"] = o.ImportOpts
	}
	if !IsNil(o.ExportComponents) {
		toSerialize["exportComponents"] = o.ExportComponents
	}
	if !IsNil(o.ExportOpts) {
		toSerialize["exportOpts"] = o.ExportOpts
	}
	if !IsNil(o.StripJobRef) {
		toSerialize["stripJobRef"] = o.StripJobRef
	}
	if !IsNil(o.Targetproject) {
		toSerialize["targetproject"] = o.Targetproject
	}
	if !IsNil(o.Apitoken) {
		toSerialize["apitoken"] = o.Apitoken
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Preserveuuid) {
		toSerialize["preserveuuid"] = o.Preserveuuid
	}
	if !IsNil(o.AsyncImport) {
		toSerialize["asyncImport"] = o.AsyncImport
	}
	return toSerialize, nil
}

type NullableProjectArchiveParams struct {
	value *ProjectArchiveParams
	isSet bool
}

func (v NullableProjectArchiveParams) Get() *ProjectArchiveParams {
	return v.value
}

func (v *NullableProjectArchiveParams) Set(val *ProjectArchiveParams) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectArchiveParams) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectArchiveParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectArchiveParams(val *ProjectArchiveParams) *NullableProjectArchiveParams {
	return &NullableProjectArchiveParams{value: val, isSet: true}
}

func (v NullableProjectArchiveParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectArchiveParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


