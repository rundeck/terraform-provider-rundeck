/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ResultDataAvailableResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultDataAvailableResponse{}

// ResultDataAvailableResponse struct for ResultDataAvailableResponse
type ResultDataAvailableResponse struct {
	Loadable *bool `json:"loadable,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NewResultDataAvailableResponse instantiates a new ResultDataAvailableResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultDataAvailableResponse() *ResultDataAvailableResponse {
	this := ResultDataAvailableResponse{}
	return &this
}

// NewResultDataAvailableResponseWithDefaults instantiates a new ResultDataAvailableResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultDataAvailableResponseWithDefaults() *ResultDataAvailableResponse {
	this := ResultDataAvailableResponse{}
	return &this
}

// GetLoadable returns the Loadable field value if set, zero value otherwise.
func (o *ResultDataAvailableResponse) GetLoadable() bool {
	if o == nil || IsNil(o.Loadable) {
		var ret bool
		return ret
	}
	return *o.Loadable
}

// GetLoadableOk returns a tuple with the Loadable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultDataAvailableResponse) GetLoadableOk() (*bool, bool) {
	if o == nil || IsNil(o.Loadable) {
		return nil, false
	}
	return o.Loadable, true
}

// HasLoadable returns a boolean if a field has been set.
func (o *ResultDataAvailableResponse) HasLoadable() bool {
	if o != nil && !IsNil(o.Loadable) {
		return true
	}

	return false
}

// SetLoadable gets a reference to the given bool and assigns it to the Loadable field.
func (o *ResultDataAvailableResponse) SetLoadable(v bool) {
	o.Loadable = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ResultDataAvailableResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultDataAvailableResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ResultDataAvailableResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ResultDataAvailableResponse) SetMessage(v string) {
	o.Message = &v
}

func (o ResultDataAvailableResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultDataAvailableResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Loadable) {
		toSerialize["loadable"] = o.Loadable
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableResultDataAvailableResponse struct {
	value *ResultDataAvailableResponse
	isSet bool
}

func (v NullableResultDataAvailableResponse) Get() *ResultDataAvailableResponse {
	return v.value
}

func (v *NullableResultDataAvailableResponse) Set(val *ResultDataAvailableResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableResultDataAvailableResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableResultDataAvailableResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultDataAvailableResponse(val *ResultDataAvailableResponse) *NullableResultDataAvailableResponse {
	return &NullableResultDataAvailableResponse{value: val, isSet: true}
}

func (v NullableResultDataAvailableResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultDataAvailableResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


