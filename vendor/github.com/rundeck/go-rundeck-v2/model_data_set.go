/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DataSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataSet{}

// DataSet struct for DataSet
type DataSet struct {
	Name *string `json:"name,omitempty"`
	Label *string `json:"label,omitempty"`
	Entries []IDataEntry `json:"entries,omitempty"`
	Big *bool `json:"big,omitempty"`
}

// NewDataSet instantiates a new DataSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSet() *DataSet {
	this := DataSet{}
	return &this
}

// NewDataSetWithDefaults instantiates a new DataSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSetWithDefaults() *DataSet {
	this := DataSet{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DataSet) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataSet) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DataSet) SetName(v string) {
	o.Name = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *DataSet) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *DataSet) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *DataSet) SetLabel(v string) {
	o.Label = &v
}

// GetEntries returns the Entries field value if set, zero value otherwise.
func (o *DataSet) GetEntries() []IDataEntry {
	if o == nil || IsNil(o.Entries) {
		var ret []IDataEntry
		return ret
	}
	return o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetEntriesOk() ([]IDataEntry, bool) {
	if o == nil || IsNil(o.Entries) {
		return nil, false
	}
	return o.Entries, true
}

// HasEntries returns a boolean if a field has been set.
func (o *DataSet) HasEntries() bool {
	if o != nil && !IsNil(o.Entries) {
		return true
	}

	return false
}

// SetEntries gets a reference to the given []IDataEntry and assigns it to the Entries field.
func (o *DataSet) SetEntries(v []IDataEntry) {
	o.Entries = v
}

// GetBig returns the Big field value if set, zero value otherwise.
func (o *DataSet) GetBig() bool {
	if o == nil || IsNil(o.Big) {
		var ret bool
		return ret
	}
	return *o.Big
}

// GetBigOk returns a tuple with the Big field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSet) GetBigOk() (*bool, bool) {
	if o == nil || IsNil(o.Big) {
		return nil, false
	}
	return o.Big, true
}

// HasBig returns a boolean if a field has been set.
func (o *DataSet) HasBig() bool {
	if o != nil && !IsNil(o.Big) {
		return true
	}

	return false
}

// SetBig gets a reference to the given bool and assigns it to the Big field.
func (o *DataSet) SetBig(v bool) {
	o.Big = &v
}

func (o DataSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Entries) {
		toSerialize["entries"] = o.Entries
	}
	if !IsNil(o.Big) {
		toSerialize["big"] = o.Big
	}
	return toSerialize, nil
}

type NullableDataSet struct {
	value *DataSet
	isSet bool
}

func (v NullableDataSet) Get() *DataSet {
	return v.value
}

func (v *NullableDataSet) Set(val *DataSet) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSet) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSet(val *DataSet) *NullableDataSet {
	return &NullableDataSet{value: val, isSet: true}
}

func (v NullableDataSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


