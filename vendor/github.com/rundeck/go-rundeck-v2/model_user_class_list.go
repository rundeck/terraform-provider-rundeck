/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserClassList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserClassList{}

// UserClassList struct for UserClassList
type UserClassList struct {
	Classes []UserClassDefinition `json:"classes,omitempty"`
}

// NewUserClassList instantiates a new UserClassList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserClassList() *UserClassList {
	this := UserClassList{}
	return &this
}

// NewUserClassListWithDefaults instantiates a new UserClassList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserClassListWithDefaults() *UserClassList {
	this := UserClassList{}
	return &this
}

// GetClasses returns the Classes field value if set, zero value otherwise.
func (o *UserClassList) GetClasses() []UserClassDefinition {
	if o == nil || IsNil(o.Classes) {
		var ret []UserClassDefinition
		return ret
	}
	return o.Classes
}

// GetClassesOk returns a tuple with the Classes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserClassList) GetClassesOk() ([]UserClassDefinition, bool) {
	if o == nil || IsNil(o.Classes) {
		return nil, false
	}
	return o.Classes, true
}

// HasClasses returns a boolean if a field has been set.
func (o *UserClassList) HasClasses() bool {
	if o != nil && !IsNil(o.Classes) {
		return true
	}

	return false
}

// SetClasses gets a reference to the given []UserClassDefinition and assigns it to the Classes field.
func (o *UserClassList) SetClasses(v []UserClassDefinition) {
	o.Classes = v
}

func (o UserClassList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserClassList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Classes) {
		toSerialize["classes"] = o.Classes
	}
	return toSerialize, nil
}

type NullableUserClassList struct {
	value *UserClassList
	isSet bool
}

func (v NullableUserClassList) Get() *UserClassList {
	return v.value
}

func (v *NullableUserClassList) Set(val *UserClassList) {
	v.value = val
	v.isSet = true
}

func (v NullableUserClassList) IsSet() bool {
	return v.isSet
}

func (v *NullableUserClassList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserClassList(val *UserClassList) *NullableUserClassList {
	return &NullableUserClassList{value: val, isSet: true}
}

func (v NullableUserClassList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserClassList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


