/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LicenseInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseInfoResponse{}

// LicenseInfoResponse License Information
type LicenseInfoResponse struct {
	Authorized *bool `json:"authorized,omitempty"`
	Company *string `json:"company,omitempty"`
	ContactEmail *string `json:"contactEmail,omitempty"`
	Application *string `json:"application,omitempty"`
	Editions []string `json:"editions,omitempty"`
	ApplicationVersion []string `json:"applicationVersion,omitempty"`
	// Expiry Grace Period in Days
	GracePeriod *int32 `json:"gracePeriod,omitempty"`
	Type *string `json:"type,omitempty"`
	LicenseId *string `json:"licenseId,omitempty"`
	LicenseVersion *string `json:"licenseVersion,omitempty"`
	// Issue Date
	IssueDate *string `json:"issueDate,omitempty"`
	// Valid Since Date
	ValidSince *string `json:"validSince,omitempty"`
	// Valid Until Date
	ValidUntil *string `json:"validUntil,omitempty"`
	// Grace Period until Date
	GraceUntil *string `json:"graceUntil,omitempty"`
	State *string `json:"state,omitempty"`
	Perpetual *bool `json:"perpetual,omitempty"`
	Active *bool `json:"active,omitempty"`
	// License Remaining Period in Days
	Remaining *int32 `json:"remaining,omitempty"`
	ShouldWarn *bool `json:"shouldWarn,omitempty"`
	BaseUrl *string `json:"baseUrl,omitempty"`
	Edition *string `json:"edition,omitempty"`
	ServerUUIDs []string `json:"serverUUIDs,omitempty"`
	Reason *string `json:"reason,omitempty"`
	Warning *string `json:"warning,omitempty"`
	InvalidCode *string `json:"invalidCode,omitempty"`
	Entitlements []LicenseEntitlement `json:"entitlements,omitempty"`
}

// NewLicenseInfoResponse instantiates a new LicenseInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseInfoResponse() *LicenseInfoResponse {
	this := LicenseInfoResponse{}
	return &this
}

// NewLicenseInfoResponseWithDefaults instantiates a new LicenseInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseInfoResponseWithDefaults() *LicenseInfoResponse {
	this := LicenseInfoResponse{}
	return &this
}

// GetAuthorized returns the Authorized field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetAuthorized() bool {
	if o == nil || IsNil(o.Authorized) {
		var ret bool
		return ret
	}
	return *o.Authorized
}

// GetAuthorizedOk returns a tuple with the Authorized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetAuthorizedOk() (*bool, bool) {
	if o == nil || IsNil(o.Authorized) {
		return nil, false
	}
	return o.Authorized, true
}

// HasAuthorized returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasAuthorized() bool {
	if o != nil && !IsNil(o.Authorized) {
		return true
	}

	return false
}

// SetAuthorized gets a reference to the given bool and assigns it to the Authorized field.
func (o *LicenseInfoResponse) SetAuthorized(v bool) {
	o.Authorized = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetCompany() string {
	if o == nil || IsNil(o.Company) {
		var ret string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetCompanyOk() (*string, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given string and assigns it to the Company field.
func (o *LicenseInfoResponse) SetCompany(v string) {
	o.Company = &v
}

// GetContactEmail returns the ContactEmail field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetContactEmail() string {
	if o == nil || IsNil(o.ContactEmail) {
		var ret string
		return ret
	}
	return *o.ContactEmail
}

// GetContactEmailOk returns a tuple with the ContactEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetContactEmailOk() (*string, bool) {
	if o == nil || IsNil(o.ContactEmail) {
		return nil, false
	}
	return o.ContactEmail, true
}

// HasContactEmail returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasContactEmail() bool {
	if o != nil && !IsNil(o.ContactEmail) {
		return true
	}

	return false
}

// SetContactEmail gets a reference to the given string and assigns it to the ContactEmail field.
func (o *LicenseInfoResponse) SetContactEmail(v string) {
	o.ContactEmail = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetApplication() string {
	if o == nil || IsNil(o.Application) {
		var ret string
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetApplicationOk() (*string, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given string and assigns it to the Application field.
func (o *LicenseInfoResponse) SetApplication(v string) {
	o.Application = &v
}

// GetEditions returns the Editions field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetEditions() []string {
	if o == nil || IsNil(o.Editions) {
		var ret []string
		return ret
	}
	return o.Editions
}

// GetEditionsOk returns a tuple with the Editions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetEditionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Editions) {
		return nil, false
	}
	return o.Editions, true
}

// HasEditions returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasEditions() bool {
	if o != nil && !IsNil(o.Editions) {
		return true
	}

	return false
}

// SetEditions gets a reference to the given []string and assigns it to the Editions field.
func (o *LicenseInfoResponse) SetEditions(v []string) {
	o.Editions = v
}

// GetApplicationVersion returns the ApplicationVersion field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetApplicationVersion() []string {
	if o == nil || IsNil(o.ApplicationVersion) {
		var ret []string
		return ret
	}
	return o.ApplicationVersion
}

// GetApplicationVersionOk returns a tuple with the ApplicationVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetApplicationVersionOk() ([]string, bool) {
	if o == nil || IsNil(o.ApplicationVersion) {
		return nil, false
	}
	return o.ApplicationVersion, true
}

// HasApplicationVersion returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasApplicationVersion() bool {
	if o != nil && !IsNil(o.ApplicationVersion) {
		return true
	}

	return false
}

// SetApplicationVersion gets a reference to the given []string and assigns it to the ApplicationVersion field.
func (o *LicenseInfoResponse) SetApplicationVersion(v []string) {
	o.ApplicationVersion = v
}

// GetGracePeriod returns the GracePeriod field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetGracePeriod() int32 {
	if o == nil || IsNil(o.GracePeriod) {
		var ret int32
		return ret
	}
	return *o.GracePeriod
}

// GetGracePeriodOk returns a tuple with the GracePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetGracePeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.GracePeriod) {
		return nil, false
	}
	return o.GracePeriod, true
}

// HasGracePeriod returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasGracePeriod() bool {
	if o != nil && !IsNil(o.GracePeriod) {
		return true
	}

	return false
}

// SetGracePeriod gets a reference to the given int32 and assigns it to the GracePeriod field.
func (o *LicenseInfoResponse) SetGracePeriod(v int32) {
	o.GracePeriod = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LicenseInfoResponse) SetType(v string) {
	o.Type = &v
}

// GetLicenseId returns the LicenseId field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetLicenseId() string {
	if o == nil || IsNil(o.LicenseId) {
		var ret string
		return ret
	}
	return *o.LicenseId
}

// GetLicenseIdOk returns a tuple with the LicenseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetLicenseIdOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseId) {
		return nil, false
	}
	return o.LicenseId, true
}

// HasLicenseId returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasLicenseId() bool {
	if o != nil && !IsNil(o.LicenseId) {
		return true
	}

	return false
}

// SetLicenseId gets a reference to the given string and assigns it to the LicenseId field.
func (o *LicenseInfoResponse) SetLicenseId(v string) {
	o.LicenseId = &v
}

// GetLicenseVersion returns the LicenseVersion field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetLicenseVersion() string {
	if o == nil || IsNil(o.LicenseVersion) {
		var ret string
		return ret
	}
	return *o.LicenseVersion
}

// GetLicenseVersionOk returns a tuple with the LicenseVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetLicenseVersionOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseVersion) {
		return nil, false
	}
	return o.LicenseVersion, true
}

// HasLicenseVersion returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasLicenseVersion() bool {
	if o != nil && !IsNil(o.LicenseVersion) {
		return true
	}

	return false
}

// SetLicenseVersion gets a reference to the given string and assigns it to the LicenseVersion field.
func (o *LicenseInfoResponse) SetLicenseVersion(v string) {
	o.LicenseVersion = &v
}

// GetIssueDate returns the IssueDate field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetIssueDate() string {
	if o == nil || IsNil(o.IssueDate) {
		var ret string
		return ret
	}
	return *o.IssueDate
}

// GetIssueDateOk returns a tuple with the IssueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetIssueDateOk() (*string, bool) {
	if o == nil || IsNil(o.IssueDate) {
		return nil, false
	}
	return o.IssueDate, true
}

// HasIssueDate returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasIssueDate() bool {
	if o != nil && !IsNil(o.IssueDate) {
		return true
	}

	return false
}

// SetIssueDate gets a reference to the given string and assigns it to the IssueDate field.
func (o *LicenseInfoResponse) SetIssueDate(v string) {
	o.IssueDate = &v
}

// GetValidSince returns the ValidSince field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetValidSince() string {
	if o == nil || IsNil(o.ValidSince) {
		var ret string
		return ret
	}
	return *o.ValidSince
}

// GetValidSinceOk returns a tuple with the ValidSince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetValidSinceOk() (*string, bool) {
	if o == nil || IsNil(o.ValidSince) {
		return nil, false
	}
	return o.ValidSince, true
}

// HasValidSince returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasValidSince() bool {
	if o != nil && !IsNil(o.ValidSince) {
		return true
	}

	return false
}

// SetValidSince gets a reference to the given string and assigns it to the ValidSince field.
func (o *LicenseInfoResponse) SetValidSince(v string) {
	o.ValidSince = &v
}

// GetValidUntil returns the ValidUntil field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetValidUntil() string {
	if o == nil || IsNil(o.ValidUntil) {
		var ret string
		return ret
	}
	return *o.ValidUntil
}

// GetValidUntilOk returns a tuple with the ValidUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetValidUntilOk() (*string, bool) {
	if o == nil || IsNil(o.ValidUntil) {
		return nil, false
	}
	return o.ValidUntil, true
}

// HasValidUntil returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasValidUntil() bool {
	if o != nil && !IsNil(o.ValidUntil) {
		return true
	}

	return false
}

// SetValidUntil gets a reference to the given string and assigns it to the ValidUntil field.
func (o *LicenseInfoResponse) SetValidUntil(v string) {
	o.ValidUntil = &v
}

// GetGraceUntil returns the GraceUntil field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetGraceUntil() string {
	if o == nil || IsNil(o.GraceUntil) {
		var ret string
		return ret
	}
	return *o.GraceUntil
}

// GetGraceUntilOk returns a tuple with the GraceUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetGraceUntilOk() (*string, bool) {
	if o == nil || IsNil(o.GraceUntil) {
		return nil, false
	}
	return o.GraceUntil, true
}

// HasGraceUntil returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasGraceUntil() bool {
	if o != nil && !IsNil(o.GraceUntil) {
		return true
	}

	return false
}

// SetGraceUntil gets a reference to the given string and assigns it to the GraceUntil field.
func (o *LicenseInfoResponse) SetGraceUntil(v string) {
	o.GraceUntil = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *LicenseInfoResponse) SetState(v string) {
	o.State = &v
}

// GetPerpetual returns the Perpetual field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetPerpetual() bool {
	if o == nil || IsNil(o.Perpetual) {
		var ret bool
		return ret
	}
	return *o.Perpetual
}

// GetPerpetualOk returns a tuple with the Perpetual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetPerpetualOk() (*bool, bool) {
	if o == nil || IsNil(o.Perpetual) {
		return nil, false
	}
	return o.Perpetual, true
}

// HasPerpetual returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasPerpetual() bool {
	if o != nil && !IsNil(o.Perpetual) {
		return true
	}

	return false
}

// SetPerpetual gets a reference to the given bool and assigns it to the Perpetual field.
func (o *LicenseInfoResponse) SetPerpetual(v bool) {
	o.Perpetual = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *LicenseInfoResponse) SetActive(v bool) {
	o.Active = &v
}

// GetRemaining returns the Remaining field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetRemaining() int32 {
	if o == nil || IsNil(o.Remaining) {
		var ret int32
		return ret
	}
	return *o.Remaining
}

// GetRemainingOk returns a tuple with the Remaining field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetRemainingOk() (*int32, bool) {
	if o == nil || IsNil(o.Remaining) {
		return nil, false
	}
	return o.Remaining, true
}

// HasRemaining returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasRemaining() bool {
	if o != nil && !IsNil(o.Remaining) {
		return true
	}

	return false
}

// SetRemaining gets a reference to the given int32 and assigns it to the Remaining field.
func (o *LicenseInfoResponse) SetRemaining(v int32) {
	o.Remaining = &v
}

// GetShouldWarn returns the ShouldWarn field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetShouldWarn() bool {
	if o == nil || IsNil(o.ShouldWarn) {
		var ret bool
		return ret
	}
	return *o.ShouldWarn
}

// GetShouldWarnOk returns a tuple with the ShouldWarn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetShouldWarnOk() (*bool, bool) {
	if o == nil || IsNil(o.ShouldWarn) {
		return nil, false
	}
	return o.ShouldWarn, true
}

// HasShouldWarn returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasShouldWarn() bool {
	if o != nil && !IsNil(o.ShouldWarn) {
		return true
	}

	return false
}

// SetShouldWarn gets a reference to the given bool and assigns it to the ShouldWarn field.
func (o *LicenseInfoResponse) SetShouldWarn(v bool) {
	o.ShouldWarn = &v
}

// GetBaseUrl returns the BaseUrl field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetBaseUrl() string {
	if o == nil || IsNil(o.BaseUrl) {
		var ret string
		return ret
	}
	return *o.BaseUrl
}

// GetBaseUrlOk returns a tuple with the BaseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetBaseUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BaseUrl) {
		return nil, false
	}
	return o.BaseUrl, true
}

// HasBaseUrl returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasBaseUrl() bool {
	if o != nil && !IsNil(o.BaseUrl) {
		return true
	}

	return false
}

// SetBaseUrl gets a reference to the given string and assigns it to the BaseUrl field.
func (o *LicenseInfoResponse) SetBaseUrl(v string) {
	o.BaseUrl = &v
}

// GetEdition returns the Edition field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetEdition() string {
	if o == nil || IsNil(o.Edition) {
		var ret string
		return ret
	}
	return *o.Edition
}

// GetEditionOk returns a tuple with the Edition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetEditionOk() (*string, bool) {
	if o == nil || IsNil(o.Edition) {
		return nil, false
	}
	return o.Edition, true
}

// HasEdition returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasEdition() bool {
	if o != nil && !IsNil(o.Edition) {
		return true
	}

	return false
}

// SetEdition gets a reference to the given string and assigns it to the Edition field.
func (o *LicenseInfoResponse) SetEdition(v string) {
	o.Edition = &v
}

// GetServerUUIDs returns the ServerUUIDs field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetServerUUIDs() []string {
	if o == nil || IsNil(o.ServerUUIDs) {
		var ret []string
		return ret
	}
	return o.ServerUUIDs
}

// GetServerUUIDsOk returns a tuple with the ServerUUIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetServerUUIDsOk() ([]string, bool) {
	if o == nil || IsNil(o.ServerUUIDs) {
		return nil, false
	}
	return o.ServerUUIDs, true
}

// HasServerUUIDs returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasServerUUIDs() bool {
	if o != nil && !IsNil(o.ServerUUIDs) {
		return true
	}

	return false
}

// SetServerUUIDs gets a reference to the given []string and assigns it to the ServerUUIDs field.
func (o *LicenseInfoResponse) SetServerUUIDs(v []string) {
	o.ServerUUIDs = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *LicenseInfoResponse) SetReason(v string) {
	o.Reason = &v
}

// GetWarning returns the Warning field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetWarning() string {
	if o == nil || IsNil(o.Warning) {
		var ret string
		return ret
	}
	return *o.Warning
}

// GetWarningOk returns a tuple with the Warning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetWarningOk() (*string, bool) {
	if o == nil || IsNil(o.Warning) {
		return nil, false
	}
	return o.Warning, true
}

// HasWarning returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasWarning() bool {
	if o != nil && !IsNil(o.Warning) {
		return true
	}

	return false
}

// SetWarning gets a reference to the given string and assigns it to the Warning field.
func (o *LicenseInfoResponse) SetWarning(v string) {
	o.Warning = &v
}

// GetInvalidCode returns the InvalidCode field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetInvalidCode() string {
	if o == nil || IsNil(o.InvalidCode) {
		var ret string
		return ret
	}
	return *o.InvalidCode
}

// GetInvalidCodeOk returns a tuple with the InvalidCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetInvalidCodeOk() (*string, bool) {
	if o == nil || IsNil(o.InvalidCode) {
		return nil, false
	}
	return o.InvalidCode, true
}

// HasInvalidCode returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasInvalidCode() bool {
	if o != nil && !IsNil(o.InvalidCode) {
		return true
	}

	return false
}

// SetInvalidCode gets a reference to the given string and assigns it to the InvalidCode field.
func (o *LicenseInfoResponse) SetInvalidCode(v string) {
	o.InvalidCode = &v
}

// GetEntitlements returns the Entitlements field value if set, zero value otherwise.
func (o *LicenseInfoResponse) GetEntitlements() []LicenseEntitlement {
	if o == nil || IsNil(o.Entitlements) {
		var ret []LicenseEntitlement
		return ret
	}
	return o.Entitlements
}

// GetEntitlementsOk returns a tuple with the Entitlements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfoResponse) GetEntitlementsOk() ([]LicenseEntitlement, bool) {
	if o == nil || IsNil(o.Entitlements) {
		return nil, false
	}
	return o.Entitlements, true
}

// HasEntitlements returns a boolean if a field has been set.
func (o *LicenseInfoResponse) HasEntitlements() bool {
	if o != nil && !IsNil(o.Entitlements) {
		return true
	}

	return false
}

// SetEntitlements gets a reference to the given []LicenseEntitlement and assigns it to the Entitlements field.
func (o *LicenseInfoResponse) SetEntitlements(v []LicenseEntitlement) {
	o.Entitlements = v
}

func (o LicenseInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Authorized) {
		toSerialize["authorized"] = o.Authorized
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.ContactEmail) {
		toSerialize["contactEmail"] = o.ContactEmail
	}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !IsNil(o.Editions) {
		toSerialize["editions"] = o.Editions
	}
	if !IsNil(o.ApplicationVersion) {
		toSerialize["applicationVersion"] = o.ApplicationVersion
	}
	if !IsNil(o.GracePeriod) {
		toSerialize["gracePeriod"] = o.GracePeriod
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.LicenseId) {
		toSerialize["licenseId"] = o.LicenseId
	}
	if !IsNil(o.LicenseVersion) {
		toSerialize["licenseVersion"] = o.LicenseVersion
	}
	if !IsNil(o.IssueDate) {
		toSerialize["issueDate"] = o.IssueDate
	}
	if !IsNil(o.ValidSince) {
		toSerialize["validSince"] = o.ValidSince
	}
	if !IsNil(o.ValidUntil) {
		toSerialize["validUntil"] = o.ValidUntil
	}
	if !IsNil(o.GraceUntil) {
		toSerialize["graceUntil"] = o.GraceUntil
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Perpetual) {
		toSerialize["perpetual"] = o.Perpetual
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Remaining) {
		toSerialize["remaining"] = o.Remaining
	}
	if !IsNil(o.ShouldWarn) {
		toSerialize["shouldWarn"] = o.ShouldWarn
	}
	if !IsNil(o.BaseUrl) {
		toSerialize["baseUrl"] = o.BaseUrl
	}
	if !IsNil(o.Edition) {
		toSerialize["edition"] = o.Edition
	}
	if !IsNil(o.ServerUUIDs) {
		toSerialize["serverUUIDs"] = o.ServerUUIDs
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Warning) {
		toSerialize["warning"] = o.Warning
	}
	if !IsNil(o.InvalidCode) {
		toSerialize["invalidCode"] = o.InvalidCode
	}
	if !IsNil(o.Entitlements) {
		toSerialize["entitlements"] = o.Entitlements
	}
	return toSerialize, nil
}

type NullableLicenseInfoResponse struct {
	value *LicenseInfoResponse
	isSet bool
}

func (v NullableLicenseInfoResponse) Get() *LicenseInfoResponse {
	return v.value
}

func (v *NullableLicenseInfoResponse) Set(val *LicenseInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseInfoResponse(val *LicenseInfoResponse) *NullableLicenseInfoResponse {
	return &NullableLicenseInfoResponse{value: val, isSet: true}
}

func (v NullableLicenseInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


