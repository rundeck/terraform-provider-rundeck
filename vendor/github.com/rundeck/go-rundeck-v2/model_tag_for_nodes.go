/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TagForNodes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagForNodes{}

// TagForNodes Tag with node count
type TagForNodes struct {
	// Tag name
	Name string `json:"name"`
	// Count of nodes associated with the tag
	NodeCount int32 `json:"nodeCount"`
}

type _TagForNodes TagForNodes

// NewTagForNodes instantiates a new TagForNodes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagForNodes(name string, nodeCount int32) *TagForNodes {
	this := TagForNodes{}
	this.Name = name
	this.NodeCount = nodeCount
	return &this
}

// NewTagForNodesWithDefaults instantiates a new TagForNodes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagForNodesWithDefaults() *TagForNodes {
	this := TagForNodes{}
	return &this
}

// GetName returns the Name field value
func (o *TagForNodes) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TagForNodes) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TagForNodes) SetName(v string) {
	o.Name = v
}

// GetNodeCount returns the NodeCount field value
func (o *TagForNodes) GetNodeCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NodeCount
}

// GetNodeCountOk returns a tuple with the NodeCount field value
// and a boolean to check if the value has been set.
func (o *TagForNodes) GetNodeCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeCount, true
}

// SetNodeCount sets field value
func (o *TagForNodes) SetNodeCount(v int32) {
	o.NodeCount = v
}

func (o TagForNodes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagForNodes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["nodeCount"] = o.NodeCount
	return toSerialize, nil
}

func (o *TagForNodes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"nodeCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTagForNodes := _TagForNodes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTagForNodes)

	if err != nil {
		return err
	}

	*o = TagForNodes(varTagForNodes)

	return err
}

type NullableTagForNodes struct {
	value *TagForNodes
	isSet bool
}

func (v NullableTagForNodes) Get() *TagForNodes {
	return v.value
}

func (v *NullableTagForNodes) Set(val *TagForNodes) {
	v.value = val
	v.isSet = true
}

func (v NullableTagForNodes) IsSet() bool {
	return v.isSet
}

func (v *NullableTagForNodes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagForNodes(val *TagForNodes) *NullableTagForNodes {
	return &NullableTagForNodes{value: val, isSet: true}
}

func (v NullableTagForNodes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagForNodes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


