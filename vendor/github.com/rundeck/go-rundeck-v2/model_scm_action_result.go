/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScmActionResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScmActionResult{}

// ScmActionResult struct for ScmActionResult
type ScmActionResult struct {
	// Status message
	Message *string `json:"message,omitempty"`
	// true if successful, false otherwise
	Success *bool `json:"success,omitempty"`
	// Name of the next `action` that should be invoked.
	NextAction *string `json:"nextAction,omitempty"`
	// Validation errors, keyed by input field name.
	ValidationErrors *map[string]string `json:"validationErrors,omitempty"`
}

// NewScmActionResult instantiates a new ScmActionResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScmActionResult() *ScmActionResult {
	this := ScmActionResult{}
	return &this
}

// NewScmActionResultWithDefaults instantiates a new ScmActionResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScmActionResultWithDefaults() *ScmActionResult {
	this := ScmActionResult{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ScmActionResult) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmActionResult) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ScmActionResult) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ScmActionResult) SetMessage(v string) {
	o.Message = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *ScmActionResult) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmActionResult) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *ScmActionResult) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *ScmActionResult) SetSuccess(v bool) {
	o.Success = &v
}

// GetNextAction returns the NextAction field value if set, zero value otherwise.
func (o *ScmActionResult) GetNextAction() string {
	if o == nil || IsNil(o.NextAction) {
		var ret string
		return ret
	}
	return *o.NextAction
}

// GetNextActionOk returns a tuple with the NextAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmActionResult) GetNextActionOk() (*string, bool) {
	if o == nil || IsNil(o.NextAction) {
		return nil, false
	}
	return o.NextAction, true
}

// HasNextAction returns a boolean if a field has been set.
func (o *ScmActionResult) HasNextAction() bool {
	if o != nil && !IsNil(o.NextAction) {
		return true
	}

	return false
}

// SetNextAction gets a reference to the given string and assigns it to the NextAction field.
func (o *ScmActionResult) SetNextAction(v string) {
	o.NextAction = &v
}

// GetValidationErrors returns the ValidationErrors field value if set, zero value otherwise.
func (o *ScmActionResult) GetValidationErrors() map[string]string {
	if o == nil || IsNil(o.ValidationErrors) {
		var ret map[string]string
		return ret
	}
	return *o.ValidationErrors
}

// GetValidationErrorsOk returns a tuple with the ValidationErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmActionResult) GetValidationErrorsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ValidationErrors) {
		return nil, false
	}
	return o.ValidationErrors, true
}

// HasValidationErrors returns a boolean if a field has been set.
func (o *ScmActionResult) HasValidationErrors() bool {
	if o != nil && !IsNil(o.ValidationErrors) {
		return true
	}

	return false
}

// SetValidationErrors gets a reference to the given map[string]string and assigns it to the ValidationErrors field.
func (o *ScmActionResult) SetValidationErrors(v map[string]string) {
	o.ValidationErrors = &v
}

func (o ScmActionResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScmActionResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.NextAction) {
		toSerialize["nextAction"] = o.NextAction
	}
	if !IsNil(o.ValidationErrors) {
		toSerialize["validationErrors"] = o.ValidationErrors
	}
	return toSerialize, nil
}

type NullableScmActionResult struct {
	value *ScmActionResult
	isSet bool
}

func (v NullableScmActionResult) Get() *ScmActionResult {
	return v.value
}

func (v *NullableScmActionResult) Set(val *ScmActionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableScmActionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableScmActionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScmActionResult(val *ScmActionResult) *NullableScmActionResult {
	return &NullableScmActionResult{value: val, isSet: true}
}

func (v NullableScmActionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScmActionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


