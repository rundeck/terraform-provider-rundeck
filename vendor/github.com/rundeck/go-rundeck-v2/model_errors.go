/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Errors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Errors{}

// Errors struct for Errors
type Errors struct {
	ObjectName *string `json:"objectName,omitempty"`
	NestedPath *string `json:"nestedPath,omitempty"`
	FieldErrors []FieldError `json:"fieldErrors,omitempty"`
	FieldErrorCount *int32 `json:"fieldErrorCount,omitempty"`
	GlobalError *ObjectError `json:"globalError,omitempty"`
	GlobalErrors []ObjectError `json:"globalErrors,omitempty"`
	GlobalErrorCount *int32 `json:"globalErrorCount,omitempty"`
	FieldError *FieldError `json:"fieldError,omitempty"`
	AllErrors []ObjectError `json:"allErrors,omitempty"`
	ErrorCount *int32 `json:"errorCount,omitempty"`
}

// NewErrors instantiates a new Errors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrors() *Errors {
	this := Errors{}
	return &this
}

// NewErrorsWithDefaults instantiates a new Errors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorsWithDefaults() *Errors {
	this := Errors{}
	return &this
}

// GetObjectName returns the ObjectName field value if set, zero value otherwise.
func (o *Errors) GetObjectName() string {
	if o == nil || IsNil(o.ObjectName) {
		var ret string
		return ret
	}
	return *o.ObjectName
}

// GetObjectNameOk returns a tuple with the ObjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Errors) GetObjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectName) {
		return nil, false
	}
	return o.ObjectName, true
}

// HasObjectName returns a boolean if a field has been set.
func (o *Errors) HasObjectName() bool {
	if o != nil && !IsNil(o.ObjectName) {
		return true
	}

	return false
}

// SetObjectName gets a reference to the given string and assigns it to the ObjectName field.
func (o *Errors) SetObjectName(v string) {
	o.ObjectName = &v
}

// GetNestedPath returns the NestedPath field value if set, zero value otherwise.
func (o *Errors) GetNestedPath() string {
	if o == nil || IsNil(o.NestedPath) {
		var ret string
		return ret
	}
	return *o.NestedPath
}

// GetNestedPathOk returns a tuple with the NestedPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Errors) GetNestedPathOk() (*string, bool) {
	if o == nil || IsNil(o.NestedPath) {
		return nil, false
	}
	return o.NestedPath, true
}

// HasNestedPath returns a boolean if a field has been set.
func (o *Errors) HasNestedPath() bool {
	if o != nil && !IsNil(o.NestedPath) {
		return true
	}

	return false
}

// SetNestedPath gets a reference to the given string and assigns it to the NestedPath field.
func (o *Errors) SetNestedPath(v string) {
	o.NestedPath = &v
}

// GetFieldErrors returns the FieldErrors field value if set, zero value otherwise.
func (o *Errors) GetFieldErrors() []FieldError {
	if o == nil || IsNil(o.FieldErrors) {
		var ret []FieldError
		return ret
	}
	return o.FieldErrors
}

// GetFieldErrorsOk returns a tuple with the FieldErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Errors) GetFieldErrorsOk() ([]FieldError, bool) {
	if o == nil || IsNil(o.FieldErrors) {
		return nil, false
	}
	return o.FieldErrors, true
}

// HasFieldErrors returns a boolean if a field has been set.
func (o *Errors) HasFieldErrors() bool {
	if o != nil && !IsNil(o.FieldErrors) {
		return true
	}

	return false
}

// SetFieldErrors gets a reference to the given []FieldError and assigns it to the FieldErrors field.
func (o *Errors) SetFieldErrors(v []FieldError) {
	o.FieldErrors = v
}

// GetFieldErrorCount returns the FieldErrorCount field value if set, zero value otherwise.
func (o *Errors) GetFieldErrorCount() int32 {
	if o == nil || IsNil(o.FieldErrorCount) {
		var ret int32
		return ret
	}
	return *o.FieldErrorCount
}

// GetFieldErrorCountOk returns a tuple with the FieldErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Errors) GetFieldErrorCountOk() (*int32, bool) {
	if o == nil || IsNil(o.FieldErrorCount) {
		return nil, false
	}
	return o.FieldErrorCount, true
}

// HasFieldErrorCount returns a boolean if a field has been set.
func (o *Errors) HasFieldErrorCount() bool {
	if o != nil && !IsNil(o.FieldErrorCount) {
		return true
	}

	return false
}

// SetFieldErrorCount gets a reference to the given int32 and assigns it to the FieldErrorCount field.
func (o *Errors) SetFieldErrorCount(v int32) {
	o.FieldErrorCount = &v
}

// GetGlobalError returns the GlobalError field value if set, zero value otherwise.
func (o *Errors) GetGlobalError() ObjectError {
	if o == nil || IsNil(o.GlobalError) {
		var ret ObjectError
		return ret
	}
	return *o.GlobalError
}

// GetGlobalErrorOk returns a tuple with the GlobalError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Errors) GetGlobalErrorOk() (*ObjectError, bool) {
	if o == nil || IsNil(o.GlobalError) {
		return nil, false
	}
	return o.GlobalError, true
}

// HasGlobalError returns a boolean if a field has been set.
func (o *Errors) HasGlobalError() bool {
	if o != nil && !IsNil(o.GlobalError) {
		return true
	}

	return false
}

// SetGlobalError gets a reference to the given ObjectError and assigns it to the GlobalError field.
func (o *Errors) SetGlobalError(v ObjectError) {
	o.GlobalError = &v
}

// GetGlobalErrors returns the GlobalErrors field value if set, zero value otherwise.
func (o *Errors) GetGlobalErrors() []ObjectError {
	if o == nil || IsNil(o.GlobalErrors) {
		var ret []ObjectError
		return ret
	}
	return o.GlobalErrors
}

// GetGlobalErrorsOk returns a tuple with the GlobalErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Errors) GetGlobalErrorsOk() ([]ObjectError, bool) {
	if o == nil || IsNil(o.GlobalErrors) {
		return nil, false
	}
	return o.GlobalErrors, true
}

// HasGlobalErrors returns a boolean if a field has been set.
func (o *Errors) HasGlobalErrors() bool {
	if o != nil && !IsNil(o.GlobalErrors) {
		return true
	}

	return false
}

// SetGlobalErrors gets a reference to the given []ObjectError and assigns it to the GlobalErrors field.
func (o *Errors) SetGlobalErrors(v []ObjectError) {
	o.GlobalErrors = v
}

// GetGlobalErrorCount returns the GlobalErrorCount field value if set, zero value otherwise.
func (o *Errors) GetGlobalErrorCount() int32 {
	if o == nil || IsNil(o.GlobalErrorCount) {
		var ret int32
		return ret
	}
	return *o.GlobalErrorCount
}

// GetGlobalErrorCountOk returns a tuple with the GlobalErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Errors) GetGlobalErrorCountOk() (*int32, bool) {
	if o == nil || IsNil(o.GlobalErrorCount) {
		return nil, false
	}
	return o.GlobalErrorCount, true
}

// HasGlobalErrorCount returns a boolean if a field has been set.
func (o *Errors) HasGlobalErrorCount() bool {
	if o != nil && !IsNil(o.GlobalErrorCount) {
		return true
	}

	return false
}

// SetGlobalErrorCount gets a reference to the given int32 and assigns it to the GlobalErrorCount field.
func (o *Errors) SetGlobalErrorCount(v int32) {
	o.GlobalErrorCount = &v
}

// GetFieldError returns the FieldError field value if set, zero value otherwise.
func (o *Errors) GetFieldError() FieldError {
	if o == nil || IsNil(o.FieldError) {
		var ret FieldError
		return ret
	}
	return *o.FieldError
}

// GetFieldErrorOk returns a tuple with the FieldError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Errors) GetFieldErrorOk() (*FieldError, bool) {
	if o == nil || IsNil(o.FieldError) {
		return nil, false
	}
	return o.FieldError, true
}

// HasFieldError returns a boolean if a field has been set.
func (o *Errors) HasFieldError() bool {
	if o != nil && !IsNil(o.FieldError) {
		return true
	}

	return false
}

// SetFieldError gets a reference to the given FieldError and assigns it to the FieldError field.
func (o *Errors) SetFieldError(v FieldError) {
	o.FieldError = &v
}

// GetAllErrors returns the AllErrors field value if set, zero value otherwise.
func (o *Errors) GetAllErrors() []ObjectError {
	if o == nil || IsNil(o.AllErrors) {
		var ret []ObjectError
		return ret
	}
	return o.AllErrors
}

// GetAllErrorsOk returns a tuple with the AllErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Errors) GetAllErrorsOk() ([]ObjectError, bool) {
	if o == nil || IsNil(o.AllErrors) {
		return nil, false
	}
	return o.AllErrors, true
}

// HasAllErrors returns a boolean if a field has been set.
func (o *Errors) HasAllErrors() bool {
	if o != nil && !IsNil(o.AllErrors) {
		return true
	}

	return false
}

// SetAllErrors gets a reference to the given []ObjectError and assigns it to the AllErrors field.
func (o *Errors) SetAllErrors(v []ObjectError) {
	o.AllErrors = v
}

// GetErrorCount returns the ErrorCount field value if set, zero value otherwise.
func (o *Errors) GetErrorCount() int32 {
	if o == nil || IsNil(o.ErrorCount) {
		var ret int32
		return ret
	}
	return *o.ErrorCount
}

// GetErrorCountOk returns a tuple with the ErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Errors) GetErrorCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ErrorCount) {
		return nil, false
	}
	return o.ErrorCount, true
}

// HasErrorCount returns a boolean if a field has been set.
func (o *Errors) HasErrorCount() bool {
	if o != nil && !IsNil(o.ErrorCount) {
		return true
	}

	return false
}

// SetErrorCount gets a reference to the given int32 and assigns it to the ErrorCount field.
func (o *Errors) SetErrorCount(v int32) {
	o.ErrorCount = &v
}

func (o Errors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Errors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObjectName) {
		toSerialize["objectName"] = o.ObjectName
	}
	if !IsNil(o.NestedPath) {
		toSerialize["nestedPath"] = o.NestedPath
	}
	if !IsNil(o.FieldErrors) {
		toSerialize["fieldErrors"] = o.FieldErrors
	}
	if !IsNil(o.FieldErrorCount) {
		toSerialize["fieldErrorCount"] = o.FieldErrorCount
	}
	if !IsNil(o.GlobalError) {
		toSerialize["globalError"] = o.GlobalError
	}
	if !IsNil(o.GlobalErrors) {
		toSerialize["globalErrors"] = o.GlobalErrors
	}
	if !IsNil(o.GlobalErrorCount) {
		toSerialize["globalErrorCount"] = o.GlobalErrorCount
	}
	if !IsNil(o.FieldError) {
		toSerialize["fieldError"] = o.FieldError
	}
	if !IsNil(o.AllErrors) {
		toSerialize["allErrors"] = o.AllErrors
	}
	if !IsNil(o.ErrorCount) {
		toSerialize["errorCount"] = o.ErrorCount
	}
	return toSerialize, nil
}

type NullableErrors struct {
	value *Errors
	isSet bool
}

func (v NullableErrors) Get() *Errors {
	return v.value
}

func (v *NullableErrors) Set(val *Errors) {
	v.value = val
	v.isSet = true
}

func (v NullableErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrors(val *Errors) *NullableErrors {
	return &NullableErrors{value: val, isSet: true}
}

func (v NullableErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


