/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ApiExecutionDeleteBulkRequest - struct for ApiExecutionDeleteBulkRequest
type ApiExecutionDeleteBulkRequest struct {
	DeleteBulkRequest *DeleteBulkRequest
	DeleteBulkRequestLong *DeleteBulkRequestLong
	ArrayOfMapmapOfStringAny *[]map[string]interface{}
}

// DeleteBulkRequestAsApiExecutionDeleteBulkRequest is a convenience function that returns DeleteBulkRequest wrapped in ApiExecutionDeleteBulkRequest
func DeleteBulkRequestAsApiExecutionDeleteBulkRequest(v *DeleteBulkRequest) ApiExecutionDeleteBulkRequest {
	return ApiExecutionDeleteBulkRequest{
		DeleteBulkRequest: v,
	}
}

// DeleteBulkRequestLongAsApiExecutionDeleteBulkRequest is a convenience function that returns DeleteBulkRequestLong wrapped in ApiExecutionDeleteBulkRequest
func DeleteBulkRequestLongAsApiExecutionDeleteBulkRequest(v *DeleteBulkRequestLong) ApiExecutionDeleteBulkRequest {
	return ApiExecutionDeleteBulkRequest{
		DeleteBulkRequestLong: v,
	}
}

// []map[string]interface{}AsApiExecutionDeleteBulkRequest is a convenience function that returns []map[string]interface{} wrapped in ApiExecutionDeleteBulkRequest
func ArrayOfMapmapOfStringAnyAsApiExecutionDeleteBulkRequest(v *[]map[string]interface{}) ApiExecutionDeleteBulkRequest {
	return ApiExecutionDeleteBulkRequest{
		ArrayOfMapmapOfStringAny: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ApiExecutionDeleteBulkRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DeleteBulkRequest
	err = newStrictDecoder(data).Decode(&dst.DeleteBulkRequest)
	if err == nil {
		jsonDeleteBulkRequest, _ := json.Marshal(dst.DeleteBulkRequest)
		if string(jsonDeleteBulkRequest) == "{}" { // empty struct
			dst.DeleteBulkRequest = nil
		} else {
			if err = validator.Validate(dst.DeleteBulkRequest); err != nil {
				dst.DeleteBulkRequest = nil
			} else {
				match++
			}
		}
	} else {
		dst.DeleteBulkRequest = nil
	}

	// try to unmarshal data into DeleteBulkRequestLong
	err = newStrictDecoder(data).Decode(&dst.DeleteBulkRequestLong)
	if err == nil {
		jsonDeleteBulkRequestLong, _ := json.Marshal(dst.DeleteBulkRequestLong)
		if string(jsonDeleteBulkRequestLong) == "{}" { // empty struct
			dst.DeleteBulkRequestLong = nil
		} else {
			if err = validator.Validate(dst.DeleteBulkRequestLong); err != nil {
				dst.DeleteBulkRequestLong = nil
			} else {
				match++
			}
		}
	} else {
		dst.DeleteBulkRequestLong = nil
	}

	// try to unmarshal data into ArrayOfMapmapOfStringAny
	err = newStrictDecoder(data).Decode(&dst.ArrayOfMapmapOfStringAny)
	if err == nil {
		jsonArrayOfMapmapOfStringAny, _ := json.Marshal(dst.ArrayOfMapmapOfStringAny)
		if string(jsonArrayOfMapmapOfStringAny) == "{}" { // empty struct
			dst.ArrayOfMapmapOfStringAny = nil
		} else {
			if err = validator.Validate(dst.ArrayOfMapmapOfStringAny); err != nil {
				dst.ArrayOfMapmapOfStringAny = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfMapmapOfStringAny = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DeleteBulkRequest = nil
		dst.DeleteBulkRequestLong = nil
		dst.ArrayOfMapmapOfStringAny = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ApiExecutionDeleteBulkRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ApiExecutionDeleteBulkRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ApiExecutionDeleteBulkRequest) MarshalJSON() ([]byte, error) {
	if src.DeleteBulkRequest != nil {
		return json.Marshal(&src.DeleteBulkRequest)
	}

	if src.DeleteBulkRequestLong != nil {
		return json.Marshal(&src.DeleteBulkRequestLong)
	}

	if src.ArrayOfMapmapOfStringAny != nil {
		return json.Marshal(&src.ArrayOfMapmapOfStringAny)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ApiExecutionDeleteBulkRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DeleteBulkRequest != nil {
		return obj.DeleteBulkRequest
	}

	if obj.DeleteBulkRequestLong != nil {
		return obj.DeleteBulkRequestLong
	}

	if obj.ArrayOfMapmapOfStringAny != nil {
		return obj.ArrayOfMapmapOfStringAny
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ApiExecutionDeleteBulkRequest) GetActualInstanceValue() (interface{}) {
	if obj.DeleteBulkRequest != nil {
		return *obj.DeleteBulkRequest
	}

	if obj.DeleteBulkRequestLong != nil {
		return *obj.DeleteBulkRequestLong
	}

	if obj.ArrayOfMapmapOfStringAny != nil {
		return *obj.ArrayOfMapmapOfStringAny
	}

	// all schemas are nil
	return nil
}

type NullableApiExecutionDeleteBulkRequest struct {
	value *ApiExecutionDeleteBulkRequest
	isSet bool
}

func (v NullableApiExecutionDeleteBulkRequest) Get() *ApiExecutionDeleteBulkRequest {
	return v.value
}

func (v *NullableApiExecutionDeleteBulkRequest) Set(val *ApiExecutionDeleteBulkRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiExecutionDeleteBulkRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiExecutionDeleteBulkRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiExecutionDeleteBulkRequest(val *ApiExecutionDeleteBulkRequest) *NullableApiExecutionDeleteBulkRequest {
	return &NullableApiExecutionDeleteBulkRequest{value: val, isSet: true}
}

func (v NullableApiExecutionDeleteBulkRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiExecutionDeleteBulkRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


