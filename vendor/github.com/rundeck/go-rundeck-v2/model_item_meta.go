/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ItemMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemMeta{}

// ItemMeta struct for ItemMeta
type ItemMeta struct {
	Name *string `json:"name,omitempty"`
	Data map[string]interface{} `json:"data,omitempty"`
}

// NewItemMeta instantiates a new ItemMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemMeta() *ItemMeta {
	this := ItemMeta{}
	return &this
}

// NewItemMetaWithDefaults instantiates a new ItemMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemMetaWithDefaults() *ItemMeta {
	this := ItemMeta{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ItemMeta) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemMeta) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ItemMeta) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ItemMeta) SetName(v string) {
	o.Name = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ItemMeta) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemMeta) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ItemMeta) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *ItemMeta) SetData(v map[string]interface{}) {
	o.Data = v
}

func (o ItemMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableItemMeta struct {
	value *ItemMeta
	isSet bool
}

func (v NullableItemMeta) Get() *ItemMeta {
	return v.value
}

func (v *NullableItemMeta) Set(val *ItemMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableItemMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableItemMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemMeta(val *ItemMeta) *NullableItemMeta {
	return &NullableItemMeta{value: val, isSet: true}
}

func (v NullableItemMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


