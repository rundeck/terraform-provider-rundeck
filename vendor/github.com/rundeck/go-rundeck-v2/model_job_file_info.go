/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the JobFileInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobFileInfo{}

// JobFileInfo struct for JobFileInfo
type JobFileInfo struct {
	Id *string `json:"id,omitempty"`
	JobId *string `json:"jobId,omitempty"`
	ExecId *int64 `json:"execId,omitempty"`
	OptionName *string `json:"optionName,omitempty"`
	FileName *string `json:"fileName,omitempty"`
	Sha *string `json:"sha,omitempty"`
	Size *int64 `json:"size,omitempty"`
	DateCreated *string `json:"dateCreated,omitempty"`
	ExpirationDate *string `json:"expirationDate,omitempty"`
	User *string `json:"user,omitempty"`
	FileState *string `json:"fileState,omitempty"`
	ServerNodeUUID *string `json:"serverNodeUUID,omitempty"`
}

// NewJobFileInfo instantiates a new JobFileInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobFileInfo() *JobFileInfo {
	this := JobFileInfo{}
	return &this
}

// NewJobFileInfoWithDefaults instantiates a new JobFileInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobFileInfoWithDefaults() *JobFileInfo {
	this := JobFileInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *JobFileInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobFileInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *JobFileInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *JobFileInfo) SetId(v string) {
	o.Id = &v
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *JobFileInfo) GetJobId() string {
	if o == nil || IsNil(o.JobId) {
		var ret string
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobFileInfo) GetJobIdOk() (*string, bool) {
	if o == nil || IsNil(o.JobId) {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *JobFileInfo) HasJobId() bool {
	if o != nil && !IsNil(o.JobId) {
		return true
	}

	return false
}

// SetJobId gets a reference to the given string and assigns it to the JobId field.
func (o *JobFileInfo) SetJobId(v string) {
	o.JobId = &v
}

// GetExecId returns the ExecId field value if set, zero value otherwise.
func (o *JobFileInfo) GetExecId() int64 {
	if o == nil || IsNil(o.ExecId) {
		var ret int64
		return ret
	}
	return *o.ExecId
}

// GetExecIdOk returns a tuple with the ExecId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobFileInfo) GetExecIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ExecId) {
		return nil, false
	}
	return o.ExecId, true
}

// HasExecId returns a boolean if a field has been set.
func (o *JobFileInfo) HasExecId() bool {
	if o != nil && !IsNil(o.ExecId) {
		return true
	}

	return false
}

// SetExecId gets a reference to the given int64 and assigns it to the ExecId field.
func (o *JobFileInfo) SetExecId(v int64) {
	o.ExecId = &v
}

// GetOptionName returns the OptionName field value if set, zero value otherwise.
func (o *JobFileInfo) GetOptionName() string {
	if o == nil || IsNil(o.OptionName) {
		var ret string
		return ret
	}
	return *o.OptionName
}

// GetOptionNameOk returns a tuple with the OptionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobFileInfo) GetOptionNameOk() (*string, bool) {
	if o == nil || IsNil(o.OptionName) {
		return nil, false
	}
	return o.OptionName, true
}

// HasOptionName returns a boolean if a field has been set.
func (o *JobFileInfo) HasOptionName() bool {
	if o != nil && !IsNil(o.OptionName) {
		return true
	}

	return false
}

// SetOptionName gets a reference to the given string and assigns it to the OptionName field.
func (o *JobFileInfo) SetOptionName(v string) {
	o.OptionName = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *JobFileInfo) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobFileInfo) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *JobFileInfo) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *JobFileInfo) SetFileName(v string) {
	o.FileName = &v
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *JobFileInfo) GetSha() string {
	if o == nil || IsNil(o.Sha) {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobFileInfo) GetShaOk() (*string, bool) {
	if o == nil || IsNil(o.Sha) {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *JobFileInfo) HasSha() bool {
	if o != nil && !IsNil(o.Sha) {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *JobFileInfo) SetSha(v string) {
	o.Sha = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *JobFileInfo) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobFileInfo) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *JobFileInfo) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *JobFileInfo) SetSize(v int64) {
	o.Size = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *JobFileInfo) GetDateCreated() string {
	if o == nil || IsNil(o.DateCreated) {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobFileInfo) GetDateCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *JobFileInfo) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *JobFileInfo) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *JobFileInfo) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobFileInfo) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *JobFileInfo) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *JobFileInfo) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *JobFileInfo) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobFileInfo) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *JobFileInfo) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *JobFileInfo) SetUser(v string) {
	o.User = &v
}

// GetFileState returns the FileState field value if set, zero value otherwise.
func (o *JobFileInfo) GetFileState() string {
	if o == nil || IsNil(o.FileState) {
		var ret string
		return ret
	}
	return *o.FileState
}

// GetFileStateOk returns a tuple with the FileState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobFileInfo) GetFileStateOk() (*string, bool) {
	if o == nil || IsNil(o.FileState) {
		return nil, false
	}
	return o.FileState, true
}

// HasFileState returns a boolean if a field has been set.
func (o *JobFileInfo) HasFileState() bool {
	if o != nil && !IsNil(o.FileState) {
		return true
	}

	return false
}

// SetFileState gets a reference to the given string and assigns it to the FileState field.
func (o *JobFileInfo) SetFileState(v string) {
	o.FileState = &v
}

// GetServerNodeUUID returns the ServerNodeUUID field value if set, zero value otherwise.
func (o *JobFileInfo) GetServerNodeUUID() string {
	if o == nil || IsNil(o.ServerNodeUUID) {
		var ret string
		return ret
	}
	return *o.ServerNodeUUID
}

// GetServerNodeUUIDOk returns a tuple with the ServerNodeUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobFileInfo) GetServerNodeUUIDOk() (*string, bool) {
	if o == nil || IsNil(o.ServerNodeUUID) {
		return nil, false
	}
	return o.ServerNodeUUID, true
}

// HasServerNodeUUID returns a boolean if a field has been set.
func (o *JobFileInfo) HasServerNodeUUID() bool {
	if o != nil && !IsNil(o.ServerNodeUUID) {
		return true
	}

	return false
}

// SetServerNodeUUID gets a reference to the given string and assigns it to the ServerNodeUUID field.
func (o *JobFileInfo) SetServerNodeUUID(v string) {
	o.ServerNodeUUID = &v
}

func (o JobFileInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobFileInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.JobId) {
		toSerialize["jobId"] = o.JobId
	}
	if !IsNil(o.ExecId) {
		toSerialize["execId"] = o.ExecId
	}
	if !IsNil(o.OptionName) {
		toSerialize["optionName"] = o.OptionName
	}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.Sha) {
		toSerialize["sha"] = o.Sha
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.FileState) {
		toSerialize["fileState"] = o.FileState
	}
	if !IsNil(o.ServerNodeUUID) {
		toSerialize["serverNodeUUID"] = o.ServerNodeUUID
	}
	return toSerialize, nil
}

type NullableJobFileInfo struct {
	value *JobFileInfo
	isSet bool
}

func (v NullableJobFileInfo) Get() *JobFileInfo {
	return v.value
}

func (v *NullableJobFileInfo) Set(val *JobFileInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableJobFileInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableJobFileInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobFileInfo(val *JobFileInfo) *NullableJobFileInfo {
	return &NullableJobFileInfo{value: val, isSet: true}
}

func (v NullableJobFileInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobFileInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


