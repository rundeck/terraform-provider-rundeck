/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScmProjectStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScmProjectStatus{}

// ScmProjectStatus struct for ScmProjectStatus
type ScmProjectStatus struct {
	Project *string `json:"project,omitempty"`
	Integration *string `json:"integration,omitempty"`
	// Indicates the state.  Import plugin values for `synchState`:  * `CLEAN` - no changes * `UNKNOWN` - status unknown * `REFRESH_NEEDED` - plugin needs to refresh * `IMPORT_NEEDED` - some changes need to be imported * `DELETE_NEEDED` - some jobs need to be deleted  Export plugin values for `synchState`:  * `CLEAN` - no changes * `REFRESH_NEEDED` - plugin needs to refresh * `EXPORT_NEEDED` - some changes need to be exported * `CREATE_NEEDED` - some jobs need to be added to the repo 
	SynchState *string `json:"synchState,omitempty"`
	Message *string `json:"message,omitempty"`
	// empty, or a list of action ID strings.
	Actions []string `json:"actions,omitempty"`
}

// NewScmProjectStatus instantiates a new ScmProjectStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScmProjectStatus() *ScmProjectStatus {
	this := ScmProjectStatus{}
	return &this
}

// NewScmProjectStatusWithDefaults instantiates a new ScmProjectStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScmProjectStatusWithDefaults() *ScmProjectStatus {
	this := ScmProjectStatus{}
	return &this
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ScmProjectStatus) GetProject() string {
	if o == nil || IsNil(o.Project) {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmProjectStatus) GetProjectOk() (*string, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ScmProjectStatus) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *ScmProjectStatus) SetProject(v string) {
	o.Project = &v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *ScmProjectStatus) GetIntegration() string {
	if o == nil || IsNil(o.Integration) {
		var ret string
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmProjectStatus) GetIntegrationOk() (*string, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *ScmProjectStatus) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given string and assigns it to the Integration field.
func (o *ScmProjectStatus) SetIntegration(v string) {
	o.Integration = &v
}

// GetSynchState returns the SynchState field value if set, zero value otherwise.
func (o *ScmProjectStatus) GetSynchState() string {
	if o == nil || IsNil(o.SynchState) {
		var ret string
		return ret
	}
	return *o.SynchState
}

// GetSynchStateOk returns a tuple with the SynchState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmProjectStatus) GetSynchStateOk() (*string, bool) {
	if o == nil || IsNil(o.SynchState) {
		return nil, false
	}
	return o.SynchState, true
}

// HasSynchState returns a boolean if a field has been set.
func (o *ScmProjectStatus) HasSynchState() bool {
	if o != nil && !IsNil(o.SynchState) {
		return true
	}

	return false
}

// SetSynchState gets a reference to the given string and assigns it to the SynchState field.
func (o *ScmProjectStatus) SetSynchState(v string) {
	o.SynchState = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ScmProjectStatus) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmProjectStatus) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ScmProjectStatus) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ScmProjectStatus) SetMessage(v string) {
	o.Message = &v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *ScmProjectStatus) GetActions() []string {
	if o == nil || IsNil(o.Actions) {
		var ret []string
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmProjectStatus) GetActionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *ScmProjectStatus) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []string and assigns it to the Actions field.
func (o *ScmProjectStatus) SetActions(v []string) {
	o.Actions = v
}

func (o ScmProjectStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScmProjectStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	if !IsNil(o.SynchState) {
		toSerialize["synchState"] = o.SynchState
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	return toSerialize, nil
}

type NullableScmProjectStatus struct {
	value *ScmProjectStatus
	isSet bool
}

func (v NullableScmProjectStatus) Get() *ScmProjectStatus {
	return v.value
}

func (v *NullableScmProjectStatus) Set(val *ScmProjectStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableScmProjectStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableScmProjectStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScmProjectStatus(val *ScmProjectStatus) *NullableScmProjectStatus {
	return &NullableScmProjectStatus{value: val, isSet: true}
}

func (v NullableScmProjectStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScmProjectStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


