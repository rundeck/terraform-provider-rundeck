/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OptionValidateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OptionValidateResponse{}

// OptionValidateResponse struct for OptionValidateResponse
type OptionValidateResponse struct {
	Valid *bool `json:"valid,omitempty"`
	// Mapping of input key to list of validation error messages
	Messages *map[string][]string `json:"messages,omitempty"`
}

// NewOptionValidateResponse instantiates a new OptionValidateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionValidateResponse() *OptionValidateResponse {
	this := OptionValidateResponse{}
	return &this
}

// NewOptionValidateResponseWithDefaults instantiates a new OptionValidateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionValidateResponseWithDefaults() *OptionValidateResponse {
	this := OptionValidateResponse{}
	return &this
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *OptionValidateResponse) GetValid() bool {
	if o == nil || IsNil(o.Valid) {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionValidateResponse) GetValidOk() (*bool, bool) {
	if o == nil || IsNil(o.Valid) {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *OptionValidateResponse) HasValid() bool {
	if o != nil && !IsNil(o.Valid) {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *OptionValidateResponse) SetValid(v bool) {
	o.Valid = &v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *OptionValidateResponse) GetMessages() map[string][]string {
	if o == nil || IsNil(o.Messages) {
		var ret map[string][]string
		return ret
	}
	return *o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionValidateResponse) GetMessagesOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *OptionValidateResponse) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given map[string][]string and assigns it to the Messages field.
func (o *OptionValidateResponse) SetMessages(v map[string][]string) {
	o.Messages = &v
}

func (o OptionValidateResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OptionValidateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Valid) {
		toSerialize["valid"] = o.Valid
	}
	if !IsNil(o.Messages) {
		toSerialize["messages"] = o.Messages
	}
	return toSerialize, nil
}

type NullableOptionValidateResponse struct {
	value *OptionValidateResponse
	isSet bool
}

func (v NullableOptionValidateResponse) Get() *OptionValidateResponse {
	return v.value
}

func (v *NullableOptionValidateResponse) Set(val *OptionValidateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionValidateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionValidateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionValidateResponse(val *OptionValidateResponse) *NullableOptionValidateResponse {
	return &NullableOptionValidateResponse{value: val, isSet: true}
}

func (v NullableOptionValidateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionValidateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


