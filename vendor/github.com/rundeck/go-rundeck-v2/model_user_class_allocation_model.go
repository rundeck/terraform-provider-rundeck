/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserClassAllocationModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserClassAllocationModel{}

// UserClassAllocationModel struct for UserClassAllocationModel
type UserClassAllocationModel struct {
	// The current User Class allocation set, as a map of user name to user class name.
	Allocations *map[string]string `json:"allocations,omitempty"`
}

// NewUserClassAllocationModel instantiates a new UserClassAllocationModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserClassAllocationModel() *UserClassAllocationModel {
	this := UserClassAllocationModel{}
	return &this
}

// NewUserClassAllocationModelWithDefaults instantiates a new UserClassAllocationModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserClassAllocationModelWithDefaults() *UserClassAllocationModel {
	this := UserClassAllocationModel{}
	return &this
}

// GetAllocations returns the Allocations field value if set, zero value otherwise.
func (o *UserClassAllocationModel) GetAllocations() map[string]string {
	if o == nil || IsNil(o.Allocations) {
		var ret map[string]string
		return ret
	}
	return *o.Allocations
}

// GetAllocationsOk returns a tuple with the Allocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserClassAllocationModel) GetAllocationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Allocations) {
		return nil, false
	}
	return o.Allocations, true
}

// HasAllocations returns a boolean if a field has been set.
func (o *UserClassAllocationModel) HasAllocations() bool {
	if o != nil && !IsNil(o.Allocations) {
		return true
	}

	return false
}

// SetAllocations gets a reference to the given map[string]string and assigns it to the Allocations field.
func (o *UserClassAllocationModel) SetAllocations(v map[string]string) {
	o.Allocations = &v
}

func (o UserClassAllocationModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserClassAllocationModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Allocations) {
		toSerialize["allocations"] = o.Allocations
	}
	return toSerialize, nil
}

type NullableUserClassAllocationModel struct {
	value *UserClassAllocationModel
	isSet bool
}

func (v NullableUserClassAllocationModel) Get() *UserClassAllocationModel {
	return v.value
}

func (v *NullableUserClassAllocationModel) Set(val *UserClassAllocationModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUserClassAllocationModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUserClassAllocationModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserClassAllocationModel(val *UserClassAllocationModel) *NullableUserClassAllocationModel {
	return &NullableUserClassAllocationModel{value: val, isSet: true}
}

func (v NullableUserClassAllocationModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserClassAllocationModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


