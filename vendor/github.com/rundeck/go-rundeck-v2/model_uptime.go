/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Uptime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Uptime{}

// Uptime Uptime Information
type Uptime struct {
	Duration *int32 `json:"duration,omitempty"`
	Unit *string `json:"unit,omitempty"`
	Since *Since `json:"since,omitempty"`
}

// NewUptime instantiates a new Uptime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUptime() *Uptime {
	this := Uptime{}
	return &this
}

// NewUptimeWithDefaults instantiates a new Uptime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUptimeWithDefaults() *Uptime {
	this := Uptime{}
	return &this
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *Uptime) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Uptime) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *Uptime) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *Uptime) SetDuration(v int32) {
	o.Duration = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *Uptime) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Uptime) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *Uptime) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *Uptime) SetUnit(v string) {
	o.Unit = &v
}

// GetSince returns the Since field value if set, zero value otherwise.
func (o *Uptime) GetSince() Since {
	if o == nil || IsNil(o.Since) {
		var ret Since
		return ret
	}
	return *o.Since
}

// GetSinceOk returns a tuple with the Since field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Uptime) GetSinceOk() (*Since, bool) {
	if o == nil || IsNil(o.Since) {
		return nil, false
	}
	return o.Since, true
}

// HasSince returns a boolean if a field has been set.
func (o *Uptime) HasSince() bool {
	if o != nil && !IsNil(o.Since) {
		return true
	}

	return false
}

// SetSince gets a reference to the given Since and assigns it to the Since field.
func (o *Uptime) SetSince(v Since) {
	o.Since = &v
}

func (o Uptime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Uptime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.Since) {
		toSerialize["since"] = o.Since
	}
	return toSerialize, nil
}

type NullableUptime struct {
	value *Uptime
	isSet bool
}

func (v NullableUptime) Get() *Uptime {
	return v.value
}

func (v *NullableUptime) Set(val *Uptime) {
	v.value = val
	v.isSet = true
}

func (v NullableUptime) IsSet() bool {
	return v.isSet
}

func (v *NullableUptime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUptime(val *Uptime) *NullableUptime {
	return &NullableUptime{value: val, isSet: true}
}

func (v NullableUptime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUptime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


