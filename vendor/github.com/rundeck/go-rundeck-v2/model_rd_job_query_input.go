/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RdJobQueryInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RdJobQueryInput{}

// RdJobQueryInput struct for RdJobQueryInput
type RdJobQueryInput struct {
	Offset *int32 `json:"offset,omitempty"`
	Max *int32 `json:"max,omitempty"`
	Errors *Errors `json:"errors,omitempty"`
	SortOrders []SortOrder `json:"sortOrders,omitempty"`
	SortBy *string `json:"sortBy,omitempty"`
	Idlist *string `json:"idlist,omitempty"`
	DescFilter *string `json:"descFilter,omitempty"`
	JobFilter *string `json:"jobFilter,omitempty"`
	GroupPathExact *string `json:"groupPathExact,omitempty"`
	ProjFilter *string `json:"projFilter,omitempty"`
	JobExactFilter *string `json:"jobExactFilter,omitempty"`
	LoglevelFilter *string `json:"loglevelFilter,omitempty"`
	GroupPath *string `json:"groupPath,omitempty"`
	SortOrder *string `json:"sortOrder,omitempty"`
	InputParamMap map[string]interface{} `json:"inputParamMap,omitempty"`
	ScheduledFilter *bool `json:"scheduledFilter,omitempty"`
	ScheduleEnabledFilter *bool `json:"scheduleEnabledFilter,omitempty"`
	ExecutionEnabledFilter *bool `json:"executionEnabledFilter,omitempty"`
	ServerNodeUUIDFilter *string `json:"serverNodeUUIDFilter,omitempty"`
	DaysAhead *int32 `json:"daysAhead,omitempty"`
	RunJobLaterFilter *bool `json:"runJobLaterFilter,omitempty"`
	PaginatedRequired *bool `json:"paginatedRequired,omitempty"`
}

// NewRdJobQueryInput instantiates a new RdJobQueryInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRdJobQueryInput() *RdJobQueryInput {
	this := RdJobQueryInput{}
	return &this
}

// NewRdJobQueryInputWithDefaults instantiates a new RdJobQueryInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRdJobQueryInputWithDefaults() *RdJobQueryInput {
	this := RdJobQueryInput{}
	return &this
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *RdJobQueryInput) SetOffset(v int32) {
	o.Offset = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetMax() int32 {
	if o == nil || IsNil(o.Max) {
		var ret int32
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetMaxOk() (*int32, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given int32 and assigns it to the Max field.
func (o *RdJobQueryInput) SetMax(v int32) {
	o.Max = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetErrors() Errors {
	if o == nil || IsNil(o.Errors) {
		var ret Errors
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetErrorsOk() (*Errors, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given Errors and assigns it to the Errors field.
func (o *RdJobQueryInput) SetErrors(v Errors) {
	o.Errors = &v
}

// GetSortOrders returns the SortOrders field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetSortOrders() []SortOrder {
	if o == nil || IsNil(o.SortOrders) {
		var ret []SortOrder
		return ret
	}
	return o.SortOrders
}

// GetSortOrdersOk returns a tuple with the SortOrders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetSortOrdersOk() ([]SortOrder, bool) {
	if o == nil || IsNil(o.SortOrders) {
		return nil, false
	}
	return o.SortOrders, true
}

// HasSortOrders returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasSortOrders() bool {
	if o != nil && !IsNil(o.SortOrders) {
		return true
	}

	return false
}

// SetSortOrders gets a reference to the given []SortOrder and assigns it to the SortOrders field.
func (o *RdJobQueryInput) SetSortOrders(v []SortOrder) {
	o.SortOrders = v
}

// GetSortBy returns the SortBy field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetSortBy() string {
	if o == nil || IsNil(o.SortBy) {
		var ret string
		return ret
	}
	return *o.SortBy
}

// GetSortByOk returns a tuple with the SortBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetSortByOk() (*string, bool) {
	if o == nil || IsNil(o.SortBy) {
		return nil, false
	}
	return o.SortBy, true
}

// HasSortBy returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasSortBy() bool {
	if o != nil && !IsNil(o.SortBy) {
		return true
	}

	return false
}

// SetSortBy gets a reference to the given string and assigns it to the SortBy field.
func (o *RdJobQueryInput) SetSortBy(v string) {
	o.SortBy = &v
}

// GetIdlist returns the Idlist field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetIdlist() string {
	if o == nil || IsNil(o.Idlist) {
		var ret string
		return ret
	}
	return *o.Idlist
}

// GetIdlistOk returns a tuple with the Idlist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetIdlistOk() (*string, bool) {
	if o == nil || IsNil(o.Idlist) {
		return nil, false
	}
	return o.Idlist, true
}

// HasIdlist returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasIdlist() bool {
	if o != nil && !IsNil(o.Idlist) {
		return true
	}

	return false
}

// SetIdlist gets a reference to the given string and assigns it to the Idlist field.
func (o *RdJobQueryInput) SetIdlist(v string) {
	o.Idlist = &v
}

// GetDescFilter returns the DescFilter field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetDescFilter() string {
	if o == nil || IsNil(o.DescFilter) {
		var ret string
		return ret
	}
	return *o.DescFilter
}

// GetDescFilterOk returns a tuple with the DescFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetDescFilterOk() (*string, bool) {
	if o == nil || IsNil(o.DescFilter) {
		return nil, false
	}
	return o.DescFilter, true
}

// HasDescFilter returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasDescFilter() bool {
	if o != nil && !IsNil(o.DescFilter) {
		return true
	}

	return false
}

// SetDescFilter gets a reference to the given string and assigns it to the DescFilter field.
func (o *RdJobQueryInput) SetDescFilter(v string) {
	o.DescFilter = &v
}

// GetJobFilter returns the JobFilter field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetJobFilter() string {
	if o == nil || IsNil(o.JobFilter) {
		var ret string
		return ret
	}
	return *o.JobFilter
}

// GetJobFilterOk returns a tuple with the JobFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetJobFilterOk() (*string, bool) {
	if o == nil || IsNil(o.JobFilter) {
		return nil, false
	}
	return o.JobFilter, true
}

// HasJobFilter returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasJobFilter() bool {
	if o != nil && !IsNil(o.JobFilter) {
		return true
	}

	return false
}

// SetJobFilter gets a reference to the given string and assigns it to the JobFilter field.
func (o *RdJobQueryInput) SetJobFilter(v string) {
	o.JobFilter = &v
}

// GetGroupPathExact returns the GroupPathExact field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetGroupPathExact() string {
	if o == nil || IsNil(o.GroupPathExact) {
		var ret string
		return ret
	}
	return *o.GroupPathExact
}

// GetGroupPathExactOk returns a tuple with the GroupPathExact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetGroupPathExactOk() (*string, bool) {
	if o == nil || IsNil(o.GroupPathExact) {
		return nil, false
	}
	return o.GroupPathExact, true
}

// HasGroupPathExact returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasGroupPathExact() bool {
	if o != nil && !IsNil(o.GroupPathExact) {
		return true
	}

	return false
}

// SetGroupPathExact gets a reference to the given string and assigns it to the GroupPathExact field.
func (o *RdJobQueryInput) SetGroupPathExact(v string) {
	o.GroupPathExact = &v
}

// GetProjFilter returns the ProjFilter field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetProjFilter() string {
	if o == nil || IsNil(o.ProjFilter) {
		var ret string
		return ret
	}
	return *o.ProjFilter
}

// GetProjFilterOk returns a tuple with the ProjFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetProjFilterOk() (*string, bool) {
	if o == nil || IsNil(o.ProjFilter) {
		return nil, false
	}
	return o.ProjFilter, true
}

// HasProjFilter returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasProjFilter() bool {
	if o != nil && !IsNil(o.ProjFilter) {
		return true
	}

	return false
}

// SetProjFilter gets a reference to the given string and assigns it to the ProjFilter field.
func (o *RdJobQueryInput) SetProjFilter(v string) {
	o.ProjFilter = &v
}

// GetJobExactFilter returns the JobExactFilter field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetJobExactFilter() string {
	if o == nil || IsNil(o.JobExactFilter) {
		var ret string
		return ret
	}
	return *o.JobExactFilter
}

// GetJobExactFilterOk returns a tuple with the JobExactFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetJobExactFilterOk() (*string, bool) {
	if o == nil || IsNil(o.JobExactFilter) {
		return nil, false
	}
	return o.JobExactFilter, true
}

// HasJobExactFilter returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasJobExactFilter() bool {
	if o != nil && !IsNil(o.JobExactFilter) {
		return true
	}

	return false
}

// SetJobExactFilter gets a reference to the given string and assigns it to the JobExactFilter field.
func (o *RdJobQueryInput) SetJobExactFilter(v string) {
	o.JobExactFilter = &v
}

// GetLoglevelFilter returns the LoglevelFilter field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetLoglevelFilter() string {
	if o == nil || IsNil(o.LoglevelFilter) {
		var ret string
		return ret
	}
	return *o.LoglevelFilter
}

// GetLoglevelFilterOk returns a tuple with the LoglevelFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetLoglevelFilterOk() (*string, bool) {
	if o == nil || IsNil(o.LoglevelFilter) {
		return nil, false
	}
	return o.LoglevelFilter, true
}

// HasLoglevelFilter returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasLoglevelFilter() bool {
	if o != nil && !IsNil(o.LoglevelFilter) {
		return true
	}

	return false
}

// SetLoglevelFilter gets a reference to the given string and assigns it to the LoglevelFilter field.
func (o *RdJobQueryInput) SetLoglevelFilter(v string) {
	o.LoglevelFilter = &v
}

// GetGroupPath returns the GroupPath field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetGroupPath() string {
	if o == nil || IsNil(o.GroupPath) {
		var ret string
		return ret
	}
	return *o.GroupPath
}

// GetGroupPathOk returns a tuple with the GroupPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetGroupPathOk() (*string, bool) {
	if o == nil || IsNil(o.GroupPath) {
		return nil, false
	}
	return o.GroupPath, true
}

// HasGroupPath returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasGroupPath() bool {
	if o != nil && !IsNil(o.GroupPath) {
		return true
	}

	return false
}

// SetGroupPath gets a reference to the given string and assigns it to the GroupPath field.
func (o *RdJobQueryInput) SetGroupPath(v string) {
	o.GroupPath = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetSortOrder() string {
	if o == nil || IsNil(o.SortOrder) {
		var ret string
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetSortOrderOk() (*string, bool) {
	if o == nil || IsNil(o.SortOrder) {
		return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasSortOrder() bool {
	if o != nil && !IsNil(o.SortOrder) {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given string and assigns it to the SortOrder field.
func (o *RdJobQueryInput) SetSortOrder(v string) {
	o.SortOrder = &v
}

// GetInputParamMap returns the InputParamMap field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetInputParamMap() map[string]interface{} {
	if o == nil || IsNil(o.InputParamMap) {
		var ret map[string]interface{}
		return ret
	}
	return o.InputParamMap
}

// GetInputParamMapOk returns a tuple with the InputParamMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetInputParamMapOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.InputParamMap) {
		return map[string]interface{}{}, false
	}
	return o.InputParamMap, true
}

// HasInputParamMap returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasInputParamMap() bool {
	if o != nil && !IsNil(o.InputParamMap) {
		return true
	}

	return false
}

// SetInputParamMap gets a reference to the given map[string]interface{} and assigns it to the InputParamMap field.
func (o *RdJobQueryInput) SetInputParamMap(v map[string]interface{}) {
	o.InputParamMap = v
}

// GetScheduledFilter returns the ScheduledFilter field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetScheduledFilter() bool {
	if o == nil || IsNil(o.ScheduledFilter) {
		var ret bool
		return ret
	}
	return *o.ScheduledFilter
}

// GetScheduledFilterOk returns a tuple with the ScheduledFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetScheduledFilterOk() (*bool, bool) {
	if o == nil || IsNil(o.ScheduledFilter) {
		return nil, false
	}
	return o.ScheduledFilter, true
}

// HasScheduledFilter returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasScheduledFilter() bool {
	if o != nil && !IsNil(o.ScheduledFilter) {
		return true
	}

	return false
}

// SetScheduledFilter gets a reference to the given bool and assigns it to the ScheduledFilter field.
func (o *RdJobQueryInput) SetScheduledFilter(v bool) {
	o.ScheduledFilter = &v
}

// GetScheduleEnabledFilter returns the ScheduleEnabledFilter field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetScheduleEnabledFilter() bool {
	if o == nil || IsNil(o.ScheduleEnabledFilter) {
		var ret bool
		return ret
	}
	return *o.ScheduleEnabledFilter
}

// GetScheduleEnabledFilterOk returns a tuple with the ScheduleEnabledFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetScheduleEnabledFilterOk() (*bool, bool) {
	if o == nil || IsNil(o.ScheduleEnabledFilter) {
		return nil, false
	}
	return o.ScheduleEnabledFilter, true
}

// HasScheduleEnabledFilter returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasScheduleEnabledFilter() bool {
	if o != nil && !IsNil(o.ScheduleEnabledFilter) {
		return true
	}

	return false
}

// SetScheduleEnabledFilter gets a reference to the given bool and assigns it to the ScheduleEnabledFilter field.
func (o *RdJobQueryInput) SetScheduleEnabledFilter(v bool) {
	o.ScheduleEnabledFilter = &v
}

// GetExecutionEnabledFilter returns the ExecutionEnabledFilter field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetExecutionEnabledFilter() bool {
	if o == nil || IsNil(o.ExecutionEnabledFilter) {
		var ret bool
		return ret
	}
	return *o.ExecutionEnabledFilter
}

// GetExecutionEnabledFilterOk returns a tuple with the ExecutionEnabledFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetExecutionEnabledFilterOk() (*bool, bool) {
	if o == nil || IsNil(o.ExecutionEnabledFilter) {
		return nil, false
	}
	return o.ExecutionEnabledFilter, true
}

// HasExecutionEnabledFilter returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasExecutionEnabledFilter() bool {
	if o != nil && !IsNil(o.ExecutionEnabledFilter) {
		return true
	}

	return false
}

// SetExecutionEnabledFilter gets a reference to the given bool and assigns it to the ExecutionEnabledFilter field.
func (o *RdJobQueryInput) SetExecutionEnabledFilter(v bool) {
	o.ExecutionEnabledFilter = &v
}

// GetServerNodeUUIDFilter returns the ServerNodeUUIDFilter field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetServerNodeUUIDFilter() string {
	if o == nil || IsNil(o.ServerNodeUUIDFilter) {
		var ret string
		return ret
	}
	return *o.ServerNodeUUIDFilter
}

// GetServerNodeUUIDFilterOk returns a tuple with the ServerNodeUUIDFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetServerNodeUUIDFilterOk() (*string, bool) {
	if o == nil || IsNil(o.ServerNodeUUIDFilter) {
		return nil, false
	}
	return o.ServerNodeUUIDFilter, true
}

// HasServerNodeUUIDFilter returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasServerNodeUUIDFilter() bool {
	if o != nil && !IsNil(o.ServerNodeUUIDFilter) {
		return true
	}

	return false
}

// SetServerNodeUUIDFilter gets a reference to the given string and assigns it to the ServerNodeUUIDFilter field.
func (o *RdJobQueryInput) SetServerNodeUUIDFilter(v string) {
	o.ServerNodeUUIDFilter = &v
}

// GetDaysAhead returns the DaysAhead field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetDaysAhead() int32 {
	if o == nil || IsNil(o.DaysAhead) {
		var ret int32
		return ret
	}
	return *o.DaysAhead
}

// GetDaysAheadOk returns a tuple with the DaysAhead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetDaysAheadOk() (*int32, bool) {
	if o == nil || IsNil(o.DaysAhead) {
		return nil, false
	}
	return o.DaysAhead, true
}

// HasDaysAhead returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasDaysAhead() bool {
	if o != nil && !IsNil(o.DaysAhead) {
		return true
	}

	return false
}

// SetDaysAhead gets a reference to the given int32 and assigns it to the DaysAhead field.
func (o *RdJobQueryInput) SetDaysAhead(v int32) {
	o.DaysAhead = &v
}

// GetRunJobLaterFilter returns the RunJobLaterFilter field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetRunJobLaterFilter() bool {
	if o == nil || IsNil(o.RunJobLaterFilter) {
		var ret bool
		return ret
	}
	return *o.RunJobLaterFilter
}

// GetRunJobLaterFilterOk returns a tuple with the RunJobLaterFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetRunJobLaterFilterOk() (*bool, bool) {
	if o == nil || IsNil(o.RunJobLaterFilter) {
		return nil, false
	}
	return o.RunJobLaterFilter, true
}

// HasRunJobLaterFilter returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasRunJobLaterFilter() bool {
	if o != nil && !IsNil(o.RunJobLaterFilter) {
		return true
	}

	return false
}

// SetRunJobLaterFilter gets a reference to the given bool and assigns it to the RunJobLaterFilter field.
func (o *RdJobQueryInput) SetRunJobLaterFilter(v bool) {
	o.RunJobLaterFilter = &v
}

// GetPaginatedRequired returns the PaginatedRequired field value if set, zero value otherwise.
func (o *RdJobQueryInput) GetPaginatedRequired() bool {
	if o == nil || IsNil(o.PaginatedRequired) {
		var ret bool
		return ret
	}
	return *o.PaginatedRequired
}

// GetPaginatedRequiredOk returns a tuple with the PaginatedRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdJobQueryInput) GetPaginatedRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.PaginatedRequired) {
		return nil, false
	}
	return o.PaginatedRequired, true
}

// HasPaginatedRequired returns a boolean if a field has been set.
func (o *RdJobQueryInput) HasPaginatedRequired() bool {
	if o != nil && !IsNil(o.PaginatedRequired) {
		return true
	}

	return false
}

// SetPaginatedRequired gets a reference to the given bool and assigns it to the PaginatedRequired field.
func (o *RdJobQueryInput) SetPaginatedRequired(v bool) {
	o.PaginatedRequired = &v
}

func (o RdJobQueryInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RdJobQueryInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.SortOrders) {
		toSerialize["sortOrders"] = o.SortOrders
	}
	if !IsNil(o.SortBy) {
		toSerialize["sortBy"] = o.SortBy
	}
	if !IsNil(o.Idlist) {
		toSerialize["idlist"] = o.Idlist
	}
	if !IsNil(o.DescFilter) {
		toSerialize["descFilter"] = o.DescFilter
	}
	if !IsNil(o.JobFilter) {
		toSerialize["jobFilter"] = o.JobFilter
	}
	if !IsNil(o.GroupPathExact) {
		toSerialize["groupPathExact"] = o.GroupPathExact
	}
	if !IsNil(o.ProjFilter) {
		toSerialize["projFilter"] = o.ProjFilter
	}
	if !IsNil(o.JobExactFilter) {
		toSerialize["jobExactFilter"] = o.JobExactFilter
	}
	if !IsNil(o.LoglevelFilter) {
		toSerialize["loglevelFilter"] = o.LoglevelFilter
	}
	if !IsNil(o.GroupPath) {
		toSerialize["groupPath"] = o.GroupPath
	}
	if !IsNil(o.SortOrder) {
		toSerialize["sortOrder"] = o.SortOrder
	}
	if !IsNil(o.InputParamMap) {
		toSerialize["inputParamMap"] = o.InputParamMap
	}
	if !IsNil(o.ScheduledFilter) {
		toSerialize["scheduledFilter"] = o.ScheduledFilter
	}
	if !IsNil(o.ScheduleEnabledFilter) {
		toSerialize["scheduleEnabledFilter"] = o.ScheduleEnabledFilter
	}
	if !IsNil(o.ExecutionEnabledFilter) {
		toSerialize["executionEnabledFilter"] = o.ExecutionEnabledFilter
	}
	if !IsNil(o.ServerNodeUUIDFilter) {
		toSerialize["serverNodeUUIDFilter"] = o.ServerNodeUUIDFilter
	}
	if !IsNil(o.DaysAhead) {
		toSerialize["daysAhead"] = o.DaysAhead
	}
	if !IsNil(o.RunJobLaterFilter) {
		toSerialize["runJobLaterFilter"] = o.RunJobLaterFilter
	}
	if !IsNil(o.PaginatedRequired) {
		toSerialize["paginatedRequired"] = o.PaginatedRequired
	}
	return toSerialize, nil
}

type NullableRdJobQueryInput struct {
	value *RdJobQueryInput
	isSet bool
}

func (v NullableRdJobQueryInput) Get() *RdJobQueryInput {
	return v.value
}

func (v *NullableRdJobQueryInput) Set(val *RdJobQueryInput) {
	v.value = val
	v.isSet = true
}

func (v NullableRdJobQueryInput) IsSet() bool {
	return v.isSet
}

func (v *NullableRdJobQueryInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRdJobQueryInput(val *RdJobQueryInput) *NullableRdJobQueryInput {
	return &NullableRdJobQueryInput{value: val, isSet: true}
}

func (v NullableRdJobQueryInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRdJobQueryInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


