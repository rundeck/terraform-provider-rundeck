/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RunnerProjectAssociations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunnerProjectAssociations{}

// RunnerProjectAssociations struct for RunnerProjectAssociations
type RunnerProjectAssociations struct {
	ProjectNodeFilters *map[string]string `json:"projectNodeFilters,omitempty"`
	ProjectRunnerAsNodeEnabled *map[string]bool `json:"projectRunnerAsNodeEnabled,omitempty"`
	ProjectRemoteNodeDispatch *map[string]bool `json:"projectRemoteNodeDispatch,omitempty"`
	ProjectRunnerNodeFilter *map[string]string `json:"projectRunnerNodeFilter,omitempty"`
}

// NewRunnerProjectAssociations instantiates a new RunnerProjectAssociations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunnerProjectAssociations() *RunnerProjectAssociations {
	this := RunnerProjectAssociations{}
	return &this
}

// NewRunnerProjectAssociationsWithDefaults instantiates a new RunnerProjectAssociations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunnerProjectAssociationsWithDefaults() *RunnerProjectAssociations {
	this := RunnerProjectAssociations{}
	return &this
}

// GetProjectNodeFilters returns the ProjectNodeFilters field value if set, zero value otherwise.
func (o *RunnerProjectAssociations) GetProjectNodeFilters() map[string]string {
	if o == nil || IsNil(o.ProjectNodeFilters) {
		var ret map[string]string
		return ret
	}
	return *o.ProjectNodeFilters
}

// GetProjectNodeFiltersOk returns a tuple with the ProjectNodeFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerProjectAssociations) GetProjectNodeFiltersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ProjectNodeFilters) {
		return nil, false
	}
	return o.ProjectNodeFilters, true
}

// HasProjectNodeFilters returns a boolean if a field has been set.
func (o *RunnerProjectAssociations) HasProjectNodeFilters() bool {
	if o != nil && !IsNil(o.ProjectNodeFilters) {
		return true
	}

	return false
}

// SetProjectNodeFilters gets a reference to the given map[string]string and assigns it to the ProjectNodeFilters field.
func (o *RunnerProjectAssociations) SetProjectNodeFilters(v map[string]string) {
	o.ProjectNodeFilters = &v
}

// GetProjectRunnerAsNodeEnabled returns the ProjectRunnerAsNodeEnabled field value if set, zero value otherwise.
func (o *RunnerProjectAssociations) GetProjectRunnerAsNodeEnabled() map[string]bool {
	if o == nil || IsNil(o.ProjectRunnerAsNodeEnabled) {
		var ret map[string]bool
		return ret
	}
	return *o.ProjectRunnerAsNodeEnabled
}

// GetProjectRunnerAsNodeEnabledOk returns a tuple with the ProjectRunnerAsNodeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerProjectAssociations) GetProjectRunnerAsNodeEnabledOk() (*map[string]bool, bool) {
	if o == nil || IsNil(o.ProjectRunnerAsNodeEnabled) {
		return nil, false
	}
	return o.ProjectRunnerAsNodeEnabled, true
}

// HasProjectRunnerAsNodeEnabled returns a boolean if a field has been set.
func (o *RunnerProjectAssociations) HasProjectRunnerAsNodeEnabled() bool {
	if o != nil && !IsNil(o.ProjectRunnerAsNodeEnabled) {
		return true
	}

	return false
}

// SetProjectRunnerAsNodeEnabled gets a reference to the given map[string]bool and assigns it to the ProjectRunnerAsNodeEnabled field.
func (o *RunnerProjectAssociations) SetProjectRunnerAsNodeEnabled(v map[string]bool) {
	o.ProjectRunnerAsNodeEnabled = &v
}

// GetProjectRemoteNodeDispatch returns the ProjectRemoteNodeDispatch field value if set, zero value otherwise.
func (o *RunnerProjectAssociations) GetProjectRemoteNodeDispatch() map[string]bool {
	if o == nil || IsNil(o.ProjectRemoteNodeDispatch) {
		var ret map[string]bool
		return ret
	}
	return *o.ProjectRemoteNodeDispatch
}

// GetProjectRemoteNodeDispatchOk returns a tuple with the ProjectRemoteNodeDispatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerProjectAssociations) GetProjectRemoteNodeDispatchOk() (*map[string]bool, bool) {
	if o == nil || IsNil(o.ProjectRemoteNodeDispatch) {
		return nil, false
	}
	return o.ProjectRemoteNodeDispatch, true
}

// HasProjectRemoteNodeDispatch returns a boolean if a field has been set.
func (o *RunnerProjectAssociations) HasProjectRemoteNodeDispatch() bool {
	if o != nil && !IsNil(o.ProjectRemoteNodeDispatch) {
		return true
	}

	return false
}

// SetProjectRemoteNodeDispatch gets a reference to the given map[string]bool and assigns it to the ProjectRemoteNodeDispatch field.
func (o *RunnerProjectAssociations) SetProjectRemoteNodeDispatch(v map[string]bool) {
	o.ProjectRemoteNodeDispatch = &v
}

// GetProjectRunnerNodeFilter returns the ProjectRunnerNodeFilter field value if set, zero value otherwise.
func (o *RunnerProjectAssociations) GetProjectRunnerNodeFilter() map[string]string {
	if o == nil || IsNil(o.ProjectRunnerNodeFilter) {
		var ret map[string]string
		return ret
	}
	return *o.ProjectRunnerNodeFilter
}

// GetProjectRunnerNodeFilterOk returns a tuple with the ProjectRunnerNodeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerProjectAssociations) GetProjectRunnerNodeFilterOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ProjectRunnerNodeFilter) {
		return nil, false
	}
	return o.ProjectRunnerNodeFilter, true
}

// HasProjectRunnerNodeFilter returns a boolean if a field has been set.
func (o *RunnerProjectAssociations) HasProjectRunnerNodeFilter() bool {
	if o != nil && !IsNil(o.ProjectRunnerNodeFilter) {
		return true
	}

	return false
}

// SetProjectRunnerNodeFilter gets a reference to the given map[string]string and assigns it to the ProjectRunnerNodeFilter field.
func (o *RunnerProjectAssociations) SetProjectRunnerNodeFilter(v map[string]string) {
	o.ProjectRunnerNodeFilter = &v
}

func (o RunnerProjectAssociations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunnerProjectAssociations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProjectNodeFilters) {
		toSerialize["projectNodeFilters"] = o.ProjectNodeFilters
	}
	if !IsNil(o.ProjectRunnerAsNodeEnabled) {
		toSerialize["projectRunnerAsNodeEnabled"] = o.ProjectRunnerAsNodeEnabled
	}
	if !IsNil(o.ProjectRemoteNodeDispatch) {
		toSerialize["projectRemoteNodeDispatch"] = o.ProjectRemoteNodeDispatch
	}
	if !IsNil(o.ProjectRunnerNodeFilter) {
		toSerialize["projectRunnerNodeFilter"] = o.ProjectRunnerNodeFilter
	}
	return toSerialize, nil
}

type NullableRunnerProjectAssociations struct {
	value *RunnerProjectAssociations
	isSet bool
}

func (v NullableRunnerProjectAssociations) Get() *RunnerProjectAssociations {
	return v.value
}

func (v *NullableRunnerProjectAssociations) Set(val *RunnerProjectAssociations) {
	v.value = val
	v.isSet = true
}

func (v NullableRunnerProjectAssociations) IsSet() bool {
	return v.isSet
}

func (v *NullableRunnerProjectAssociations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunnerProjectAssociations(val *RunnerProjectAssociations) *NullableRunnerProjectAssociations {
	return &NullableRunnerProjectAssociations{value: val, isSet: true}
}

func (v NullableRunnerProjectAssociations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunnerProjectAssociations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


