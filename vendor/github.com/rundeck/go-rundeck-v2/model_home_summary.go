/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HomeSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HomeSummary{}

// HomeSummary struct for HomeSummary
type HomeSummary struct {
	ExecCount int32 `json:"execCount"`
	TotalFailedCount int32 `json:"totalFailedCount"`
	RecentUsers []string `json:"recentUsers"`
	RecentProjects []string `json:"recentProjects"`
	FrameworkNodeName string `json:"frameworkNodeName"`
}

type _HomeSummary HomeSummary

// NewHomeSummary instantiates a new HomeSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHomeSummary(execCount int32, totalFailedCount int32, recentUsers []string, recentProjects []string, frameworkNodeName string) *HomeSummary {
	this := HomeSummary{}
	this.ExecCount = execCount
	this.TotalFailedCount = totalFailedCount
	this.RecentUsers = recentUsers
	this.RecentProjects = recentProjects
	this.FrameworkNodeName = frameworkNodeName
	return &this
}

// NewHomeSummaryWithDefaults instantiates a new HomeSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHomeSummaryWithDefaults() *HomeSummary {
	this := HomeSummary{}
	return &this
}

// GetExecCount returns the ExecCount field value
func (o *HomeSummary) GetExecCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExecCount
}

// GetExecCountOk returns a tuple with the ExecCount field value
// and a boolean to check if the value has been set.
func (o *HomeSummary) GetExecCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecCount, true
}

// SetExecCount sets field value
func (o *HomeSummary) SetExecCount(v int32) {
	o.ExecCount = v
}

// GetTotalFailedCount returns the TotalFailedCount field value
func (o *HomeSummary) GetTotalFailedCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalFailedCount
}

// GetTotalFailedCountOk returns a tuple with the TotalFailedCount field value
// and a boolean to check if the value has been set.
func (o *HomeSummary) GetTotalFailedCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalFailedCount, true
}

// SetTotalFailedCount sets field value
func (o *HomeSummary) SetTotalFailedCount(v int32) {
	o.TotalFailedCount = v
}

// GetRecentUsers returns the RecentUsers field value
func (o *HomeSummary) GetRecentUsers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RecentUsers
}

// GetRecentUsersOk returns a tuple with the RecentUsers field value
// and a boolean to check if the value has been set.
func (o *HomeSummary) GetRecentUsersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecentUsers, true
}

// SetRecentUsers sets field value
func (o *HomeSummary) SetRecentUsers(v []string) {
	o.RecentUsers = v
}

// GetRecentProjects returns the RecentProjects field value
func (o *HomeSummary) GetRecentProjects() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RecentProjects
}

// GetRecentProjectsOk returns a tuple with the RecentProjects field value
// and a boolean to check if the value has been set.
func (o *HomeSummary) GetRecentProjectsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecentProjects, true
}

// SetRecentProjects sets field value
func (o *HomeSummary) SetRecentProjects(v []string) {
	o.RecentProjects = v
}

// GetFrameworkNodeName returns the FrameworkNodeName field value
func (o *HomeSummary) GetFrameworkNodeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FrameworkNodeName
}

// GetFrameworkNodeNameOk returns a tuple with the FrameworkNodeName field value
// and a boolean to check if the value has been set.
func (o *HomeSummary) GetFrameworkNodeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FrameworkNodeName, true
}

// SetFrameworkNodeName sets field value
func (o *HomeSummary) SetFrameworkNodeName(v string) {
	o.FrameworkNodeName = v
}

func (o HomeSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HomeSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["execCount"] = o.ExecCount
	toSerialize["totalFailedCount"] = o.TotalFailedCount
	toSerialize["recentUsers"] = o.RecentUsers
	toSerialize["recentProjects"] = o.RecentProjects
	toSerialize["frameworkNodeName"] = o.FrameworkNodeName
	return toSerialize, nil
}

func (o *HomeSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"execCount",
		"totalFailedCount",
		"recentUsers",
		"recentProjects",
		"frameworkNodeName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHomeSummary := _HomeSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHomeSummary)

	if err != nil {
		return err
	}

	*o = HomeSummary(varHomeSummary)

	return err
}

type NullableHomeSummary struct {
	value *HomeSummary
	isSet bool
}

func (v NullableHomeSummary) Get() *HomeSummary {
	return v.value
}

func (v *NullableHomeSummary) Set(val *HomeSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableHomeSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableHomeSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHomeSummary(val *HomeSummary) *NullableHomeSummary {
	return &NullableHomeSummary{value: val, isSet: true}
}

func (v NullableHomeSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHomeSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


