/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScmJobStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScmJobStatus{}

// ScmJobStatus struct for ScmJobStatus
type ScmJobStatus struct {
	Id *string `json:"id,omitempty"`
	Project *string `json:"project,omitempty"`
	Integration *string `json:"integration,omitempty"`
	SynchState *string `json:"synchState,omitempty"`
	Message *string `json:"message,omitempty"`
	Actions []string `json:"actions,omitempty"`
	Commit *ScmCommit `json:"commit,omitempty"`
}

// NewScmJobStatus instantiates a new ScmJobStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScmJobStatus() *ScmJobStatus {
	this := ScmJobStatus{}
	return &this
}

// NewScmJobStatusWithDefaults instantiates a new ScmJobStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScmJobStatusWithDefaults() *ScmJobStatus {
	this := ScmJobStatus{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ScmJobStatus) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmJobStatus) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ScmJobStatus) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ScmJobStatus) SetId(v string) {
	o.Id = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ScmJobStatus) GetProject() string {
	if o == nil || IsNil(o.Project) {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmJobStatus) GetProjectOk() (*string, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ScmJobStatus) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *ScmJobStatus) SetProject(v string) {
	o.Project = &v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *ScmJobStatus) GetIntegration() string {
	if o == nil || IsNil(o.Integration) {
		var ret string
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmJobStatus) GetIntegrationOk() (*string, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *ScmJobStatus) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given string and assigns it to the Integration field.
func (o *ScmJobStatus) SetIntegration(v string) {
	o.Integration = &v
}

// GetSynchState returns the SynchState field value if set, zero value otherwise.
func (o *ScmJobStatus) GetSynchState() string {
	if o == nil || IsNil(o.SynchState) {
		var ret string
		return ret
	}
	return *o.SynchState
}

// GetSynchStateOk returns a tuple with the SynchState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmJobStatus) GetSynchStateOk() (*string, bool) {
	if o == nil || IsNil(o.SynchState) {
		return nil, false
	}
	return o.SynchState, true
}

// HasSynchState returns a boolean if a field has been set.
func (o *ScmJobStatus) HasSynchState() bool {
	if o != nil && !IsNil(o.SynchState) {
		return true
	}

	return false
}

// SetSynchState gets a reference to the given string and assigns it to the SynchState field.
func (o *ScmJobStatus) SetSynchState(v string) {
	o.SynchState = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ScmJobStatus) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmJobStatus) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ScmJobStatus) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ScmJobStatus) SetMessage(v string) {
	o.Message = &v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *ScmJobStatus) GetActions() []string {
	if o == nil || IsNil(o.Actions) {
		var ret []string
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmJobStatus) GetActionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *ScmJobStatus) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []string and assigns it to the Actions field.
func (o *ScmJobStatus) SetActions(v []string) {
	o.Actions = v
}

// GetCommit returns the Commit field value if set, zero value otherwise.
func (o *ScmJobStatus) GetCommit() ScmCommit {
	if o == nil || IsNil(o.Commit) {
		var ret ScmCommit
		return ret
	}
	return *o.Commit
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmJobStatus) GetCommitOk() (*ScmCommit, bool) {
	if o == nil || IsNil(o.Commit) {
		return nil, false
	}
	return o.Commit, true
}

// HasCommit returns a boolean if a field has been set.
func (o *ScmJobStatus) HasCommit() bool {
	if o != nil && !IsNil(o.Commit) {
		return true
	}

	return false
}

// SetCommit gets a reference to the given ScmCommit and assigns it to the Commit field.
func (o *ScmJobStatus) SetCommit(v ScmCommit) {
	o.Commit = &v
}

func (o ScmJobStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScmJobStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	if !IsNil(o.SynchState) {
		toSerialize["synchState"] = o.SynchState
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	if !IsNil(o.Commit) {
		toSerialize["commit"] = o.Commit
	}
	return toSerialize, nil
}

type NullableScmJobStatus struct {
	value *ScmJobStatus
	isSet bool
}

func (v NullableScmJobStatus) Get() *ScmJobStatus {
	return v.value
}

func (v *NullableScmJobStatus) Set(val *ScmJobStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableScmJobStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableScmJobStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScmJobStatus(val *ScmJobStatus) *NullableScmJobStatus {
	return &NullableScmJobStatus{value: val, isSet: true}
}

func (v NullableScmJobStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScmJobStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


