/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScmJobDiff type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScmJobDiff{}

// ScmJobDiff struct for ScmJobDiff
type ScmJobDiff struct {
	Id *string `json:"id,omitempty"`
	Project *string `json:"project,omitempty"`
	Integration *string `json:"integration,omitempty"`
	Commit *ScmCommit `json:"commit,omitempty"`
	IncomingCommit *ScmCommit `json:"incomingCommit,omitempty"`
	DiffContent *string `json:"diffContent,omitempty"`
}

// NewScmJobDiff instantiates a new ScmJobDiff object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScmJobDiff() *ScmJobDiff {
	this := ScmJobDiff{}
	return &this
}

// NewScmJobDiffWithDefaults instantiates a new ScmJobDiff object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScmJobDiffWithDefaults() *ScmJobDiff {
	this := ScmJobDiff{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ScmJobDiff) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmJobDiff) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ScmJobDiff) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ScmJobDiff) SetId(v string) {
	o.Id = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ScmJobDiff) GetProject() string {
	if o == nil || IsNil(o.Project) {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmJobDiff) GetProjectOk() (*string, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ScmJobDiff) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *ScmJobDiff) SetProject(v string) {
	o.Project = &v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *ScmJobDiff) GetIntegration() string {
	if o == nil || IsNil(o.Integration) {
		var ret string
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmJobDiff) GetIntegrationOk() (*string, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *ScmJobDiff) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given string and assigns it to the Integration field.
func (o *ScmJobDiff) SetIntegration(v string) {
	o.Integration = &v
}

// GetCommit returns the Commit field value if set, zero value otherwise.
func (o *ScmJobDiff) GetCommit() ScmCommit {
	if o == nil || IsNil(o.Commit) {
		var ret ScmCommit
		return ret
	}
	return *o.Commit
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmJobDiff) GetCommitOk() (*ScmCommit, bool) {
	if o == nil || IsNil(o.Commit) {
		return nil, false
	}
	return o.Commit, true
}

// HasCommit returns a boolean if a field has been set.
func (o *ScmJobDiff) HasCommit() bool {
	if o != nil && !IsNil(o.Commit) {
		return true
	}

	return false
}

// SetCommit gets a reference to the given ScmCommit and assigns it to the Commit field.
func (o *ScmJobDiff) SetCommit(v ScmCommit) {
	o.Commit = &v
}

// GetIncomingCommit returns the IncomingCommit field value if set, zero value otherwise.
func (o *ScmJobDiff) GetIncomingCommit() ScmCommit {
	if o == nil || IsNil(o.IncomingCommit) {
		var ret ScmCommit
		return ret
	}
	return *o.IncomingCommit
}

// GetIncomingCommitOk returns a tuple with the IncomingCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmJobDiff) GetIncomingCommitOk() (*ScmCommit, bool) {
	if o == nil || IsNil(o.IncomingCommit) {
		return nil, false
	}
	return o.IncomingCommit, true
}

// HasIncomingCommit returns a boolean if a field has been set.
func (o *ScmJobDiff) HasIncomingCommit() bool {
	if o != nil && !IsNil(o.IncomingCommit) {
		return true
	}

	return false
}

// SetIncomingCommit gets a reference to the given ScmCommit and assigns it to the IncomingCommit field.
func (o *ScmJobDiff) SetIncomingCommit(v ScmCommit) {
	o.IncomingCommit = &v
}

// GetDiffContent returns the DiffContent field value if set, zero value otherwise.
func (o *ScmJobDiff) GetDiffContent() string {
	if o == nil || IsNil(o.DiffContent) {
		var ret string
		return ret
	}
	return *o.DiffContent
}

// GetDiffContentOk returns a tuple with the DiffContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmJobDiff) GetDiffContentOk() (*string, bool) {
	if o == nil || IsNil(o.DiffContent) {
		return nil, false
	}
	return o.DiffContent, true
}

// HasDiffContent returns a boolean if a field has been set.
func (o *ScmJobDiff) HasDiffContent() bool {
	if o != nil && !IsNil(o.DiffContent) {
		return true
	}

	return false
}

// SetDiffContent gets a reference to the given string and assigns it to the DiffContent field.
func (o *ScmJobDiff) SetDiffContent(v string) {
	o.DiffContent = &v
}

func (o ScmJobDiff) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScmJobDiff) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	if !IsNil(o.Commit) {
		toSerialize["commit"] = o.Commit
	}
	if !IsNil(o.IncomingCommit) {
		toSerialize["incomingCommit"] = o.IncomingCommit
	}
	if !IsNil(o.DiffContent) {
		toSerialize["diffContent"] = o.DiffContent
	}
	return toSerialize, nil
}

type NullableScmJobDiff struct {
	value *ScmJobDiff
	isSet bool
}

func (v NullableScmJobDiff) Get() *ScmJobDiff {
	return v.value
}

func (v *NullableScmJobDiff) Set(val *ScmJobDiff) {
	v.value = val
	v.isSet = true
}

func (v NullableScmJobDiff) IsSet() bool {
	return v.isSet
}

func (v *NullableScmJobDiff) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScmJobDiff(val *ScmJobDiff) *NullableScmJobDiff {
	return &NullableScmJobDiff{value: val, isSet: true}
}

func (v NullableScmJobDiff) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScmJobDiff) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


