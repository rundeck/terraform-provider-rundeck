/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DefaultMessageSourceResolvable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefaultMessageSourceResolvable{}

// DefaultMessageSourceResolvable struct for DefaultMessageSourceResolvable
type DefaultMessageSourceResolvable struct {
	DefaultMessage *string `json:"defaultMessage,omitempty"`
	Arguments []map[string]interface{} `json:"arguments,omitempty"`
	Codes []string `json:"codes,omitempty"`
	Code *string `json:"code,omitempty"`
}

// NewDefaultMessageSourceResolvable instantiates a new DefaultMessageSourceResolvable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaultMessageSourceResolvable() *DefaultMessageSourceResolvable {
	this := DefaultMessageSourceResolvable{}
	return &this
}

// NewDefaultMessageSourceResolvableWithDefaults instantiates a new DefaultMessageSourceResolvable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultMessageSourceResolvableWithDefaults() *DefaultMessageSourceResolvable {
	this := DefaultMessageSourceResolvable{}
	return &this
}

// GetDefaultMessage returns the DefaultMessage field value if set, zero value otherwise.
func (o *DefaultMessageSourceResolvable) GetDefaultMessage() string {
	if o == nil || IsNil(o.DefaultMessage) {
		var ret string
		return ret
	}
	return *o.DefaultMessage
}

// GetDefaultMessageOk returns a tuple with the DefaultMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultMessageSourceResolvable) GetDefaultMessageOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultMessage) {
		return nil, false
	}
	return o.DefaultMessage, true
}

// HasDefaultMessage returns a boolean if a field has been set.
func (o *DefaultMessageSourceResolvable) HasDefaultMessage() bool {
	if o != nil && !IsNil(o.DefaultMessage) {
		return true
	}

	return false
}

// SetDefaultMessage gets a reference to the given string and assigns it to the DefaultMessage field.
func (o *DefaultMessageSourceResolvable) SetDefaultMessage(v string) {
	o.DefaultMessage = &v
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *DefaultMessageSourceResolvable) GetArguments() []map[string]interface{} {
	if o == nil || IsNil(o.Arguments) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultMessageSourceResolvable) GetArgumentsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Arguments) {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *DefaultMessageSourceResolvable) HasArguments() bool {
	if o != nil && !IsNil(o.Arguments) {
		return true
	}

	return false
}

// SetArguments gets a reference to the given []map[string]interface{} and assigns it to the Arguments field.
func (o *DefaultMessageSourceResolvable) SetArguments(v []map[string]interface{}) {
	o.Arguments = v
}

// GetCodes returns the Codes field value if set, zero value otherwise.
func (o *DefaultMessageSourceResolvable) GetCodes() []string {
	if o == nil || IsNil(o.Codes) {
		var ret []string
		return ret
	}
	return o.Codes
}

// GetCodesOk returns a tuple with the Codes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultMessageSourceResolvable) GetCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.Codes) {
		return nil, false
	}
	return o.Codes, true
}

// HasCodes returns a boolean if a field has been set.
func (o *DefaultMessageSourceResolvable) HasCodes() bool {
	if o != nil && !IsNil(o.Codes) {
		return true
	}

	return false
}

// SetCodes gets a reference to the given []string and assigns it to the Codes field.
func (o *DefaultMessageSourceResolvable) SetCodes(v []string) {
	o.Codes = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *DefaultMessageSourceResolvable) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultMessageSourceResolvable) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *DefaultMessageSourceResolvable) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *DefaultMessageSourceResolvable) SetCode(v string) {
	o.Code = &v
}

func (o DefaultMessageSourceResolvable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefaultMessageSourceResolvable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultMessage) {
		toSerialize["defaultMessage"] = o.DefaultMessage
	}
	if !IsNil(o.Arguments) {
		toSerialize["arguments"] = o.Arguments
	}
	if !IsNil(o.Codes) {
		toSerialize["codes"] = o.Codes
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

type NullableDefaultMessageSourceResolvable struct {
	value *DefaultMessageSourceResolvable
	isSet bool
}

func (v NullableDefaultMessageSourceResolvable) Get() *DefaultMessageSourceResolvable {
	return v.value
}

func (v *NullableDefaultMessageSourceResolvable) Set(val *DefaultMessageSourceResolvable) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultMessageSourceResolvable) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultMessageSourceResolvable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultMessageSourceResolvable(val *DefaultMessageSourceResolvable) *NullableDefaultMessageSourceResolvable {
	return &NullableDefaultMessageSourceResolvable{value: val, isSet: true}
}

func (v NullableDefaultMessageSourceResolvable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultMessageSourceResolvable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


