/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// HistoryAPIService HistoryAPI service
type HistoryAPIService service

type ApiApiHistoryv14Request struct {
	ctx context.Context
	ApiService *HistoryAPIService
	project string
	jobIdFilter *string
	reportIdFilter *string
	userFilter *string
	statFilter *string
	jobListFilter *[]string
	excludeJobListFilter *[]string
	recentFilter *string
	begin *string
	end *string
	max *int32
	offset *int32
}

// include events for a job ID.
func (r ApiApiHistoryv14Request) JobIdFilter(jobIdFilter string) ApiApiHistoryv14Request {
	r.jobIdFilter = &jobIdFilter
	return r
}

// include events for a event Name.
func (r ApiApiHistoryv14Request) ReportIdFilter(reportIdFilter string) ApiApiHistoryv14Request {
	r.reportIdFilter = &reportIdFilter
	return r
}

// include events created by a user.
func (r ApiApiHistoryv14Request) UserFilter(userFilter string) ApiApiHistoryv14Request {
	r.userFilter = &userFilter
	return r
}

// include events based on result status.  this can be &#39;succeed&#39;,&#39;fail&#39;, or &#39;cancel&#39;.
func (r ApiApiHistoryv14Request) StatFilter(statFilter string) ApiApiHistoryv14Request {
	r.statFilter = &statFilter
	return r
}

// include events for the job by name, format: &#39;group/name&#39;.  To use multiple values, include this parameter multiple times.
func (r ApiApiHistoryv14Request) JobListFilter(jobListFilter []string) ApiApiHistoryv14Request {
	r.jobListFilter = &jobListFilter
	return r
}

// exclude events for the job by name, format: &#39;group/name&#39;. To use multiple values, include this parameter multiple times.
func (r ApiApiHistoryv14Request) ExcludeJobListFilter(excludeJobListFilter []string) ApiApiHistoryv14Request {
	r.excludeJobListFilter = &excludeJobListFilter
	return r
}

// Use a simple text format to filter events that occurred within a period of time. The format is \&quot;XY\&quot; where X is an integer, and \&quot;Y\&quot; is one of:         * &#x60;h&#x60;: hour         * &#x60;d&#x60;: day         * &#x60;w&#x60;: week         * &#x60;m&#x60;: month         * &#x60;y&#x60;: year         So a value of \&quot;2w\&quot; would return events within the last two weeks.
func (r ApiApiHistoryv14Request) RecentFilter(recentFilter string) ApiApiHistoryv14Request {
	r.recentFilter = &recentFilter
	return r
}

// Specify exact date for earliest result. a unix millisecond timestamp, or a W3C dateTime string in the format \&quot;yyyy-MM-ddTHH:mm:ssZ\&quot;
func (r ApiApiHistoryv14Request) Begin(begin string) ApiApiHistoryv14Request {
	r.begin = &begin
	return r
}

// Specify exact date for latest result. a unix millisecond timestamp, or a W3C dateTime string in the format \&quot;yyyy-MM-ddTHH:mm:ssZ\&quot;
func (r ApiApiHistoryv14Request) End(end string) ApiApiHistoryv14Request {
	r.end = &end
	return r
}

// indicate the maximum number of events to return. The default maximum to return is 20
func (r ApiApiHistoryv14Request) Max(max int32) ApiApiHistoryv14Request {
	r.max = &max
	return r
}

// indicate the 0-indexed offset for the first event to return
func (r ApiApiHistoryv14Request) Offset(offset int32) ApiApiHistoryv14Request {
	r.offset = &offset
	return r
}

func (r ApiApiHistoryv14Request) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ApiHistoryv14Execute(r)
}

/*
ApiHistoryv14 Listing History


List the event history for a project.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param project Project Name
 @return ApiApiHistoryv14Request
*/
func (a *HistoryAPIService) ApiHistoryv14(ctx context.Context, project string) ApiApiHistoryv14Request {
	return ApiApiHistoryv14Request{
		ApiService: a,
		ctx: ctx,
		project: project,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *HistoryAPIService) ApiHistoryv14Execute(r ApiApiHistoryv14Request) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoryAPIService.ApiHistoryv14")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project}/history"
	localVarPath = strings.Replace(localVarPath, "{"+"project"+"}", url.PathEscape(parameterValueToString(r.project, "project")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.jobIdFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jobIdFilter", r.jobIdFilter, "form", "")
	}
	if r.reportIdFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reportIdFilter", r.reportIdFilter, "form", "")
	}
	if r.userFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userFilter", r.userFilter, "form", "")
	}
	if r.statFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "statFilter", r.statFilter, "form", "")
	}
	if r.jobListFilter != nil {
		t := *r.jobListFilter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "jobListFilter", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "jobListFilter", t, "form", "multi")
		}
	}
	if r.excludeJobListFilter != nil {
		t := *r.excludeJobListFilter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludeJobListFilter", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludeJobListFilter", t, "form", "multi")
		}
	}
	if r.recentFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recentFilter", r.recentFilter, "form", "")
	}
	if r.begin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "begin", r.begin, "form", "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "form", "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["rundeckApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Rundeck-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
