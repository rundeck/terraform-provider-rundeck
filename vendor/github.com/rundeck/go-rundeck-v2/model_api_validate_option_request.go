/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApiValidateOptionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiValidateOptionRequest{}

// ApiValidateOptionRequest struct for ApiValidateOptionRequest
type ApiValidateOptionRequest struct {
	OptionData *OptionValidateRequest `json:"optionData,omitempty"`
	Type *string `json:"type,omitempty"`
	StoragePath *string `json:"storagePath,omitempty"`
	ValuesUrl *string `json:"valuesUrl,omitempty"`
	Value *string `json:"value,omitempty"`
	Values []string `json:"values,omitempty"`
	Secure *bool `json:"secure,omitempty"`
	ValueExposed *bool `json:"valueExposed,omitempty"`
	ValuesType *string `json:"valuesType,omitempty"`
	RemoteUrlAuthenticationType *string `json:"remoteUrlAuthenticationType,omitempty"`
	ConfigRemoteUrl map[string]interface{} `json:"configRemoteUrl,omitempty"`
	OptionType *string `json:"optionType,omitempty"`
	DefaultStoragePath *string `json:"defaultStoragePath,omitempty"`
	RealValuesUrl *string `json:"realValuesUrl,omitempty"`
	DefaultValue *string `json:"defaultValue,omitempty"`
	ValuesList *string `json:"valuesList,omitempty"`
	OptionValues []string `json:"optionValues,omitempty"`
	SecureInput *bool `json:"secureInput,omitempty"`
	SecureExposed *bool `json:"secureExposed,omitempty"`
}

// NewApiValidateOptionRequest instantiates a new ApiValidateOptionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiValidateOptionRequest() *ApiValidateOptionRequest {
	this := ApiValidateOptionRequest{}
	return &this
}

// NewApiValidateOptionRequestWithDefaults instantiates a new ApiValidateOptionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiValidateOptionRequestWithDefaults() *ApiValidateOptionRequest {
	this := ApiValidateOptionRequest{}
	return &this
}

// GetOptionData returns the OptionData field value if set, zero value otherwise.
func (o *ApiValidateOptionRequest) GetOptionData() OptionValidateRequest {
	if o == nil || IsNil(o.OptionData) {
		var ret OptionValidateRequest
		return ret
	}
	return *o.OptionData
}

// GetOptionDataOk returns a tuple with the OptionData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiValidateOptionRequest) GetOptionDataOk() (*OptionValidateRequest, bool) {
	if o == nil || IsNil(o.OptionData) {
		return nil, false
	}
	return o.OptionData, true
}

// HasOptionData returns a boolean if a field has been set.
func (o *ApiValidateOptionRequest) HasOptionData() bool {
	if o != nil && !IsNil(o.OptionData) {
		return true
	}

	return false
}

// SetOptionData gets a reference to the given OptionValidateRequest and assigns it to the OptionData field.
func (o *ApiValidateOptionRequest) SetOptionData(v OptionValidateRequest) {
	o.OptionData = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApiValidateOptionRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiValidateOptionRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApiValidateOptionRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ApiValidateOptionRequest) SetType(v string) {
	o.Type = &v
}

// GetStoragePath returns the StoragePath field value if set, zero value otherwise.
func (o *ApiValidateOptionRequest) GetStoragePath() string {
	if o == nil || IsNil(o.StoragePath) {
		var ret string
		return ret
	}
	return *o.StoragePath
}

// GetStoragePathOk returns a tuple with the StoragePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiValidateOptionRequest) GetStoragePathOk() (*string, bool) {
	if o == nil || IsNil(o.StoragePath) {
		return nil, false
	}
	return o.StoragePath, true
}

// HasStoragePath returns a boolean if a field has been set.
func (o *ApiValidateOptionRequest) HasStoragePath() bool {
	if o != nil && !IsNil(o.StoragePath) {
		return true
	}

	return false
}

// SetStoragePath gets a reference to the given string and assigns it to the StoragePath field.
func (o *ApiValidateOptionRequest) SetStoragePath(v string) {
	o.StoragePath = &v
}

// GetValuesUrl returns the ValuesUrl field value if set, zero value otherwise.
func (o *ApiValidateOptionRequest) GetValuesUrl() string {
	if o == nil || IsNil(o.ValuesUrl) {
		var ret string
		return ret
	}
	return *o.ValuesUrl
}

// GetValuesUrlOk returns a tuple with the ValuesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiValidateOptionRequest) GetValuesUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ValuesUrl) {
		return nil, false
	}
	return o.ValuesUrl, true
}

// HasValuesUrl returns a boolean if a field has been set.
func (o *ApiValidateOptionRequest) HasValuesUrl() bool {
	if o != nil && !IsNil(o.ValuesUrl) {
		return true
	}

	return false
}

// SetValuesUrl gets a reference to the given string and assigns it to the ValuesUrl field.
func (o *ApiValidateOptionRequest) SetValuesUrl(v string) {
	o.ValuesUrl = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ApiValidateOptionRequest) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiValidateOptionRequest) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ApiValidateOptionRequest) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ApiValidateOptionRequest) SetValue(v string) {
	o.Value = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ApiValidateOptionRequest) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiValidateOptionRequest) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ApiValidateOptionRequest) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *ApiValidateOptionRequest) SetValues(v []string) {
	o.Values = v
}

// GetSecure returns the Secure field value if set, zero value otherwise.
func (o *ApiValidateOptionRequest) GetSecure() bool {
	if o == nil || IsNil(o.Secure) {
		var ret bool
		return ret
	}
	return *o.Secure
}

// GetSecureOk returns a tuple with the Secure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiValidateOptionRequest) GetSecureOk() (*bool, bool) {
	if o == nil || IsNil(o.Secure) {
		return nil, false
	}
	return o.Secure, true
}

// HasSecure returns a boolean if a field has been set.
func (o *ApiValidateOptionRequest) HasSecure() bool {
	if o != nil && !IsNil(o.Secure) {
		return true
	}

	return false
}

// SetSecure gets a reference to the given bool and assigns it to the Secure field.
func (o *ApiValidateOptionRequest) SetSecure(v bool) {
	o.Secure = &v
}

// GetValueExposed returns the ValueExposed field value if set, zero value otherwise.
func (o *ApiValidateOptionRequest) GetValueExposed() bool {
	if o == nil || IsNil(o.ValueExposed) {
		var ret bool
		return ret
	}
	return *o.ValueExposed
}

// GetValueExposedOk returns a tuple with the ValueExposed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiValidateOptionRequest) GetValueExposedOk() (*bool, bool) {
	if o == nil || IsNil(o.ValueExposed) {
		return nil, false
	}
	return o.ValueExposed, true
}

// HasValueExposed returns a boolean if a field has been set.
func (o *ApiValidateOptionRequest) HasValueExposed() bool {
	if o != nil && !IsNil(o.ValueExposed) {
		return true
	}

	return false
}

// SetValueExposed gets a reference to the given bool and assigns it to the ValueExposed field.
func (o *ApiValidateOptionRequest) SetValueExposed(v bool) {
	o.ValueExposed = &v
}

// GetValuesType returns the ValuesType field value if set, zero value otherwise.
func (o *ApiValidateOptionRequest) GetValuesType() string {
	if o == nil || IsNil(o.ValuesType) {
		var ret string
		return ret
	}
	return *o.ValuesType
}

// GetValuesTypeOk returns a tuple with the ValuesType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiValidateOptionRequest) GetValuesTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ValuesType) {
		return nil, false
	}
	return o.ValuesType, true
}

// HasValuesType returns a boolean if a field has been set.
func (o *ApiValidateOptionRequest) HasValuesType() bool {
	if o != nil && !IsNil(o.ValuesType) {
		return true
	}

	return false
}

// SetValuesType gets a reference to the given string and assigns it to the ValuesType field.
func (o *ApiValidateOptionRequest) SetValuesType(v string) {
	o.ValuesType = &v
}

// GetRemoteUrlAuthenticationType returns the RemoteUrlAuthenticationType field value if set, zero value otherwise.
func (o *ApiValidateOptionRequest) GetRemoteUrlAuthenticationType() string {
	if o == nil || IsNil(o.RemoteUrlAuthenticationType) {
		var ret string
		return ret
	}
	return *o.RemoteUrlAuthenticationType
}

// GetRemoteUrlAuthenticationTypeOk returns a tuple with the RemoteUrlAuthenticationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiValidateOptionRequest) GetRemoteUrlAuthenticationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RemoteUrlAuthenticationType) {
		return nil, false
	}
	return o.RemoteUrlAuthenticationType, true
}

// HasRemoteUrlAuthenticationType returns a boolean if a field has been set.
func (o *ApiValidateOptionRequest) HasRemoteUrlAuthenticationType() bool {
	if o != nil && !IsNil(o.RemoteUrlAuthenticationType) {
		return true
	}

	return false
}

// SetRemoteUrlAuthenticationType gets a reference to the given string and assigns it to the RemoteUrlAuthenticationType field.
func (o *ApiValidateOptionRequest) SetRemoteUrlAuthenticationType(v string) {
	o.RemoteUrlAuthenticationType = &v
}

// GetConfigRemoteUrl returns the ConfigRemoteUrl field value if set, zero value otherwise.
func (o *ApiValidateOptionRequest) GetConfigRemoteUrl() map[string]interface{} {
	if o == nil || IsNil(o.ConfigRemoteUrl) {
		var ret map[string]interface{}
		return ret
	}
	return o.ConfigRemoteUrl
}

// GetConfigRemoteUrlOk returns a tuple with the ConfigRemoteUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiValidateOptionRequest) GetConfigRemoteUrlOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ConfigRemoteUrl) {
		return map[string]interface{}{}, false
	}
	return o.ConfigRemoteUrl, true
}

// HasConfigRemoteUrl returns a boolean if a field has been set.
func (o *ApiValidateOptionRequest) HasConfigRemoteUrl() bool {
	if o != nil && !IsNil(o.ConfigRemoteUrl) {
		return true
	}

	return false
}

// SetConfigRemoteUrl gets a reference to the given map[string]interface{} and assigns it to the ConfigRemoteUrl field.
func (o *ApiValidateOptionRequest) SetConfigRemoteUrl(v map[string]interface{}) {
	o.ConfigRemoteUrl = v
}

// GetOptionType returns the OptionType field value if set, zero value otherwise.
func (o *ApiValidateOptionRequest) GetOptionType() string {
	if o == nil || IsNil(o.OptionType) {
		var ret string
		return ret
	}
	return *o.OptionType
}

// GetOptionTypeOk returns a tuple with the OptionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiValidateOptionRequest) GetOptionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OptionType) {
		return nil, false
	}
	return o.OptionType, true
}

// HasOptionType returns a boolean if a field has been set.
func (o *ApiValidateOptionRequest) HasOptionType() bool {
	if o != nil && !IsNil(o.OptionType) {
		return true
	}

	return false
}

// SetOptionType gets a reference to the given string and assigns it to the OptionType field.
func (o *ApiValidateOptionRequest) SetOptionType(v string) {
	o.OptionType = &v
}

// GetDefaultStoragePath returns the DefaultStoragePath field value if set, zero value otherwise.
func (o *ApiValidateOptionRequest) GetDefaultStoragePath() string {
	if o == nil || IsNil(o.DefaultStoragePath) {
		var ret string
		return ret
	}
	return *o.DefaultStoragePath
}

// GetDefaultStoragePathOk returns a tuple with the DefaultStoragePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiValidateOptionRequest) GetDefaultStoragePathOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultStoragePath) {
		return nil, false
	}
	return o.DefaultStoragePath, true
}

// HasDefaultStoragePath returns a boolean if a field has been set.
func (o *ApiValidateOptionRequest) HasDefaultStoragePath() bool {
	if o != nil && !IsNil(o.DefaultStoragePath) {
		return true
	}

	return false
}

// SetDefaultStoragePath gets a reference to the given string and assigns it to the DefaultStoragePath field.
func (o *ApiValidateOptionRequest) SetDefaultStoragePath(v string) {
	o.DefaultStoragePath = &v
}

// GetRealValuesUrl returns the RealValuesUrl field value if set, zero value otherwise.
func (o *ApiValidateOptionRequest) GetRealValuesUrl() string {
	if o == nil || IsNil(o.RealValuesUrl) {
		var ret string
		return ret
	}
	return *o.RealValuesUrl
}

// GetRealValuesUrlOk returns a tuple with the RealValuesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiValidateOptionRequest) GetRealValuesUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RealValuesUrl) {
		return nil, false
	}
	return o.RealValuesUrl, true
}

// HasRealValuesUrl returns a boolean if a field has been set.
func (o *ApiValidateOptionRequest) HasRealValuesUrl() bool {
	if o != nil && !IsNil(o.RealValuesUrl) {
		return true
	}

	return false
}

// SetRealValuesUrl gets a reference to the given string and assigns it to the RealValuesUrl field.
func (o *ApiValidateOptionRequest) SetRealValuesUrl(v string) {
	o.RealValuesUrl = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *ApiValidateOptionRequest) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue) {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiValidateOptionRequest) GetDefaultValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *ApiValidateOptionRequest) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *ApiValidateOptionRequest) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetValuesList returns the ValuesList field value if set, zero value otherwise.
func (o *ApiValidateOptionRequest) GetValuesList() string {
	if o == nil || IsNil(o.ValuesList) {
		var ret string
		return ret
	}
	return *o.ValuesList
}

// GetValuesListOk returns a tuple with the ValuesList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiValidateOptionRequest) GetValuesListOk() (*string, bool) {
	if o == nil || IsNil(o.ValuesList) {
		return nil, false
	}
	return o.ValuesList, true
}

// HasValuesList returns a boolean if a field has been set.
func (o *ApiValidateOptionRequest) HasValuesList() bool {
	if o != nil && !IsNil(o.ValuesList) {
		return true
	}

	return false
}

// SetValuesList gets a reference to the given string and assigns it to the ValuesList field.
func (o *ApiValidateOptionRequest) SetValuesList(v string) {
	o.ValuesList = &v
}

// GetOptionValues returns the OptionValues field value if set, zero value otherwise.
func (o *ApiValidateOptionRequest) GetOptionValues() []string {
	if o == nil || IsNil(o.OptionValues) {
		var ret []string
		return ret
	}
	return o.OptionValues
}

// GetOptionValuesOk returns a tuple with the OptionValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiValidateOptionRequest) GetOptionValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.OptionValues) {
		return nil, false
	}
	return o.OptionValues, true
}

// HasOptionValues returns a boolean if a field has been set.
func (o *ApiValidateOptionRequest) HasOptionValues() bool {
	if o != nil && !IsNil(o.OptionValues) {
		return true
	}

	return false
}

// SetOptionValues gets a reference to the given []string and assigns it to the OptionValues field.
func (o *ApiValidateOptionRequest) SetOptionValues(v []string) {
	o.OptionValues = v
}

// GetSecureInput returns the SecureInput field value if set, zero value otherwise.
func (o *ApiValidateOptionRequest) GetSecureInput() bool {
	if o == nil || IsNil(o.SecureInput) {
		var ret bool
		return ret
	}
	return *o.SecureInput
}

// GetSecureInputOk returns a tuple with the SecureInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiValidateOptionRequest) GetSecureInputOk() (*bool, bool) {
	if o == nil || IsNil(o.SecureInput) {
		return nil, false
	}
	return o.SecureInput, true
}

// HasSecureInput returns a boolean if a field has been set.
func (o *ApiValidateOptionRequest) HasSecureInput() bool {
	if o != nil && !IsNil(o.SecureInput) {
		return true
	}

	return false
}

// SetSecureInput gets a reference to the given bool and assigns it to the SecureInput field.
func (o *ApiValidateOptionRequest) SetSecureInput(v bool) {
	o.SecureInput = &v
}

// GetSecureExposed returns the SecureExposed field value if set, zero value otherwise.
func (o *ApiValidateOptionRequest) GetSecureExposed() bool {
	if o == nil || IsNil(o.SecureExposed) {
		var ret bool
		return ret
	}
	return *o.SecureExposed
}

// GetSecureExposedOk returns a tuple with the SecureExposed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiValidateOptionRequest) GetSecureExposedOk() (*bool, bool) {
	if o == nil || IsNil(o.SecureExposed) {
		return nil, false
	}
	return o.SecureExposed, true
}

// HasSecureExposed returns a boolean if a field has been set.
func (o *ApiValidateOptionRequest) HasSecureExposed() bool {
	if o != nil && !IsNil(o.SecureExposed) {
		return true
	}

	return false
}

// SetSecureExposed gets a reference to the given bool and assigns it to the SecureExposed field.
func (o *ApiValidateOptionRequest) SetSecureExposed(v bool) {
	o.SecureExposed = &v
}

func (o ApiValidateOptionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiValidateOptionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OptionData) {
		toSerialize["optionData"] = o.OptionData
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.StoragePath) {
		toSerialize["storagePath"] = o.StoragePath
	}
	if !IsNil(o.ValuesUrl) {
		toSerialize["valuesUrl"] = o.ValuesUrl
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.Secure) {
		toSerialize["secure"] = o.Secure
	}
	if !IsNil(o.ValueExposed) {
		toSerialize["valueExposed"] = o.ValueExposed
	}
	if !IsNil(o.ValuesType) {
		toSerialize["valuesType"] = o.ValuesType
	}
	if !IsNil(o.RemoteUrlAuthenticationType) {
		toSerialize["remoteUrlAuthenticationType"] = o.RemoteUrlAuthenticationType
	}
	if !IsNil(o.ConfigRemoteUrl) {
		toSerialize["configRemoteUrl"] = o.ConfigRemoteUrl
	}
	if !IsNil(o.OptionType) {
		toSerialize["optionType"] = o.OptionType
	}
	if !IsNil(o.DefaultStoragePath) {
		toSerialize["defaultStoragePath"] = o.DefaultStoragePath
	}
	if !IsNil(o.RealValuesUrl) {
		toSerialize["realValuesUrl"] = o.RealValuesUrl
	}
	if !IsNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if !IsNil(o.ValuesList) {
		toSerialize["valuesList"] = o.ValuesList
	}
	if !IsNil(o.OptionValues) {
		toSerialize["optionValues"] = o.OptionValues
	}
	if !IsNil(o.SecureInput) {
		toSerialize["secureInput"] = o.SecureInput
	}
	if !IsNil(o.SecureExposed) {
		toSerialize["secureExposed"] = o.SecureExposed
	}
	return toSerialize, nil
}

type NullableApiValidateOptionRequest struct {
	value *ApiValidateOptionRequest
	isSet bool
}

func (v NullableApiValidateOptionRequest) Get() *ApiValidateOptionRequest {
	return v.value
}

func (v *NullableApiValidateOptionRequest) Set(val *ApiValidateOptionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiValidateOptionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiValidateOptionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiValidateOptionRequest(val *ApiValidateOptionRequest) *NullableApiValidateOptionRequest {
	return &NullableApiValidateOptionRequest{value: val, isSet: true}
}

func (v NullableApiValidateOptionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiValidateOptionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


