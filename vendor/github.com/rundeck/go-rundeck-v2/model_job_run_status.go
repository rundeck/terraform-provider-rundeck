/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// JobRunStatus the model 'JobRunStatus'
type JobRunStatus string

// List of JobRunStatus
const (
	NOT_STARTED JobRunStatus = "NOT_STARTED"
	STARTED JobRunStatus = "STARTED"
	NOT_FOUND JobRunStatus = "NOT_FOUND"
	UNKNOWN_ERROR JobRunStatus = "UNKNOWN_ERROR"
)

// All allowed values of JobRunStatus enum
var AllowedJobRunStatusEnumValues = []JobRunStatus{
	"NOT_STARTED",
	"STARTED",
	"NOT_FOUND",
	"UNKNOWN_ERROR",
}

func (v *JobRunStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JobRunStatus(value)
	for _, existing := range AllowedJobRunStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JobRunStatus", value)
}

// NewJobRunStatusFromValue returns a pointer to a valid JobRunStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJobRunStatusFromValue(v string) (*JobRunStatus, error) {
	ev := JobRunStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JobRunStatus: valid values are %v", v, AllowedJobRunStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JobRunStatus) IsValid() bool {
	for _, existing := range AllowedJobRunStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JobRunStatus value
func (v JobRunStatus) Ptr() *JobRunStatus {
	return &v
}

type NullableJobRunStatus struct {
	value *JobRunStatus
	isSet bool
}

func (v NullableJobRunStatus) Get() *JobRunStatus {
	return v.value
}

func (v *NullableJobRunStatus) Set(val *JobRunStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableJobRunStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableJobRunStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobRunStatus(val *JobRunStatus) *NullableJobRunStatus {
	return &NullableJobRunStatus{value: val, isSet: true}
}

func (v NullableJobRunStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobRunStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

