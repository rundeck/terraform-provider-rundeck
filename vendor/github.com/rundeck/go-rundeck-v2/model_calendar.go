/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Calendar type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Calendar{}

// Calendar struct for Calendar
type Calendar struct {
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	CalendarType *string `json:"calendarType,omitempty"`
	Scope *string `json:"scope,omitempty"`
	AllReference *bool `json:"allReference,omitempty"`
	Enable *bool `json:"enable,omitempty"`
	DateType *string `json:"dateType,omitempty"`
	DateDefinitionJson *string `json:"dateDefinitionJson,omitempty"`
	Project *string `json:"project,omitempty"`
	JsonData *string `json:"jsonData,omitempty"`
	Recurrent *bool `json:"recurrent,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	DateDefinition []map[string]interface{} `json:"dateDefinition,omitempty"`
	Reference []map[string]interface{} `json:"reference,omitempty"`
}

// NewCalendar instantiates a new Calendar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalendar() *Calendar {
	this := Calendar{}
	return &this
}

// NewCalendarWithDefaults instantiates a new Calendar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalendarWithDefaults() *Calendar {
	this := Calendar{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Calendar) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Calendar) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Calendar) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Calendar) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Calendar) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Calendar) SetDescription(v string) {
	o.Description = &v
}

// GetCalendarType returns the CalendarType field value if set, zero value otherwise.
func (o *Calendar) GetCalendarType() string {
	if o == nil || IsNil(o.CalendarType) {
		var ret string
		return ret
	}
	return *o.CalendarType
}

// GetCalendarTypeOk returns a tuple with the CalendarType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetCalendarTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CalendarType) {
		return nil, false
	}
	return o.CalendarType, true
}

// HasCalendarType returns a boolean if a field has been set.
func (o *Calendar) HasCalendarType() bool {
	if o != nil && !IsNil(o.CalendarType) {
		return true
	}

	return false
}

// SetCalendarType gets a reference to the given string and assigns it to the CalendarType field.
func (o *Calendar) SetCalendarType(v string) {
	o.CalendarType = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *Calendar) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *Calendar) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *Calendar) SetScope(v string) {
	o.Scope = &v
}

// GetAllReference returns the AllReference field value if set, zero value otherwise.
func (o *Calendar) GetAllReference() bool {
	if o == nil || IsNil(o.AllReference) {
		var ret bool
		return ret
	}
	return *o.AllReference
}

// GetAllReferenceOk returns a tuple with the AllReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetAllReferenceOk() (*bool, bool) {
	if o == nil || IsNil(o.AllReference) {
		return nil, false
	}
	return o.AllReference, true
}

// HasAllReference returns a boolean if a field has been set.
func (o *Calendar) HasAllReference() bool {
	if o != nil && !IsNil(o.AllReference) {
		return true
	}

	return false
}

// SetAllReference gets a reference to the given bool and assigns it to the AllReference field.
func (o *Calendar) SetAllReference(v bool) {
	o.AllReference = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *Calendar) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *Calendar) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *Calendar) SetEnable(v bool) {
	o.Enable = &v
}

// GetDateType returns the DateType field value if set, zero value otherwise.
func (o *Calendar) GetDateType() string {
	if o == nil || IsNil(o.DateType) {
		var ret string
		return ret
	}
	return *o.DateType
}

// GetDateTypeOk returns a tuple with the DateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetDateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DateType) {
		return nil, false
	}
	return o.DateType, true
}

// HasDateType returns a boolean if a field has been set.
func (o *Calendar) HasDateType() bool {
	if o != nil && !IsNil(o.DateType) {
		return true
	}

	return false
}

// SetDateType gets a reference to the given string and assigns it to the DateType field.
func (o *Calendar) SetDateType(v string) {
	o.DateType = &v
}

// GetDateDefinitionJson returns the DateDefinitionJson field value if set, zero value otherwise.
func (o *Calendar) GetDateDefinitionJson() string {
	if o == nil || IsNil(o.DateDefinitionJson) {
		var ret string
		return ret
	}
	return *o.DateDefinitionJson
}

// GetDateDefinitionJsonOk returns a tuple with the DateDefinitionJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetDateDefinitionJsonOk() (*string, bool) {
	if o == nil || IsNil(o.DateDefinitionJson) {
		return nil, false
	}
	return o.DateDefinitionJson, true
}

// HasDateDefinitionJson returns a boolean if a field has been set.
func (o *Calendar) HasDateDefinitionJson() bool {
	if o != nil && !IsNil(o.DateDefinitionJson) {
		return true
	}

	return false
}

// SetDateDefinitionJson gets a reference to the given string and assigns it to the DateDefinitionJson field.
func (o *Calendar) SetDateDefinitionJson(v string) {
	o.DateDefinitionJson = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *Calendar) GetProject() string {
	if o == nil || IsNil(o.Project) {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetProjectOk() (*string, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *Calendar) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *Calendar) SetProject(v string) {
	o.Project = &v
}

// GetJsonData returns the JsonData field value if set, zero value otherwise.
func (o *Calendar) GetJsonData() string {
	if o == nil || IsNil(o.JsonData) {
		var ret string
		return ret
	}
	return *o.JsonData
}

// GetJsonDataOk returns a tuple with the JsonData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetJsonDataOk() (*string, bool) {
	if o == nil || IsNil(o.JsonData) {
		return nil, false
	}
	return o.JsonData, true
}

// HasJsonData returns a boolean if a field has been set.
func (o *Calendar) HasJsonData() bool {
	if o != nil && !IsNil(o.JsonData) {
		return true
	}

	return false
}

// SetJsonData gets a reference to the given string and assigns it to the JsonData field.
func (o *Calendar) SetJsonData(v string) {
	o.JsonData = &v
}

// GetRecurrent returns the Recurrent field value if set, zero value otherwise.
func (o *Calendar) GetRecurrent() bool {
	if o == nil || IsNil(o.Recurrent) {
		var ret bool
		return ret
	}
	return *o.Recurrent
}

// GetRecurrentOk returns a tuple with the Recurrent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetRecurrentOk() (*bool, bool) {
	if o == nil || IsNil(o.Recurrent) {
		return nil, false
	}
	return o.Recurrent, true
}

// HasRecurrent returns a boolean if a field has been set.
func (o *Calendar) HasRecurrent() bool {
	if o != nil && !IsNil(o.Recurrent) {
		return true
	}

	return false
}

// SetRecurrent gets a reference to the given bool and assigns it to the Recurrent field.
func (o *Calendar) SetRecurrent(v bool) {
	o.Recurrent = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Calendar) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Calendar) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *Calendar) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Calendar) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Calendar) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *Calendar) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetDateDefinition returns the DateDefinition field value if set, zero value otherwise.
func (o *Calendar) GetDateDefinition() []map[string]interface{} {
	if o == nil || IsNil(o.DateDefinition) {
		var ret []map[string]interface{}
		return ret
	}
	return o.DateDefinition
}

// GetDateDefinitionOk returns a tuple with the DateDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetDateDefinitionOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.DateDefinition) {
		return nil, false
	}
	return o.DateDefinition, true
}

// HasDateDefinition returns a boolean if a field has been set.
func (o *Calendar) HasDateDefinition() bool {
	if o != nil && !IsNil(o.DateDefinition) {
		return true
	}

	return false
}

// SetDateDefinition gets a reference to the given []map[string]interface{} and assigns it to the DateDefinition field.
func (o *Calendar) SetDateDefinition(v []map[string]interface{}) {
	o.DateDefinition = v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *Calendar) GetReference() []map[string]interface{} {
	if o == nil || IsNil(o.Reference) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetReferenceOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *Calendar) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given []map[string]interface{} and assigns it to the Reference field.
func (o *Calendar) SetReference(v []map[string]interface{}) {
	o.Reference = v
}

func (o Calendar) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Calendar) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.CalendarType) {
		toSerialize["calendarType"] = o.CalendarType
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.AllReference) {
		toSerialize["allReference"] = o.AllReference
	}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.DateType) {
		toSerialize["dateType"] = o.DateType
	}
	if !IsNil(o.DateDefinitionJson) {
		toSerialize["dateDefinitionJson"] = o.DateDefinitionJson
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.JsonData) {
		toSerialize["jsonData"] = o.JsonData
	}
	if !IsNil(o.Recurrent) {
		toSerialize["recurrent"] = o.Recurrent
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.DateDefinition) {
		toSerialize["dateDefinition"] = o.DateDefinition
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	return toSerialize, nil
}

type NullableCalendar struct {
	value *Calendar
	isSet bool
}

func (v NullableCalendar) Get() *Calendar {
	return v.value
}

func (v *NullableCalendar) Set(val *Calendar) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendar) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendar(val *Calendar) *NullableCalendar {
	return &NullableCalendar{value: val, isSet: true}
}

func (v NullableCalendar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


