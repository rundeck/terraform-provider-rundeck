/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Resources type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Resources{}

// Resources struct for Resources
type Resources struct {
	Empty *bool `json:"empty,omitempty"`
	Description *string `json:"description,omitempty"`
	Content *string `json:"content,omitempty"`
	Writeable *bool `json:"writeable,omitempty"`
	Href *string `json:"href,omitempty"`
	EditPermalink *string `json:"editPermalink,omitempty"`
	SyntaxMimeType *string `json:"syntaxMimeType,omitempty"`
}

// NewResources instantiates a new Resources object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResources() *Resources {
	this := Resources{}
	return &this
}

// NewResourcesWithDefaults instantiates a new Resources object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourcesWithDefaults() *Resources {
	this := Resources{}
	return &this
}

// GetEmpty returns the Empty field value if set, zero value otherwise.
func (o *Resources) GetEmpty() bool {
	if o == nil || IsNil(o.Empty) {
		var ret bool
		return ret
	}
	return *o.Empty
}

// GetEmptyOk returns a tuple with the Empty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resources) GetEmptyOk() (*bool, bool) {
	if o == nil || IsNil(o.Empty) {
		return nil, false
	}
	return o.Empty, true
}

// HasEmpty returns a boolean if a field has been set.
func (o *Resources) HasEmpty() bool {
	if o != nil && !IsNil(o.Empty) {
		return true
	}

	return false
}

// SetEmpty gets a reference to the given bool and assigns it to the Empty field.
func (o *Resources) SetEmpty(v bool) {
	o.Empty = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Resources) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resources) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Resources) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Resources) SetDescription(v string) {
	o.Description = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *Resources) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resources) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *Resources) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *Resources) SetContent(v string) {
	o.Content = &v
}

// GetWriteable returns the Writeable field value if set, zero value otherwise.
func (o *Resources) GetWriteable() bool {
	if o == nil || IsNil(o.Writeable) {
		var ret bool
		return ret
	}
	return *o.Writeable
}

// GetWriteableOk returns a tuple with the Writeable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resources) GetWriteableOk() (*bool, bool) {
	if o == nil || IsNil(o.Writeable) {
		return nil, false
	}
	return o.Writeable, true
}

// HasWriteable returns a boolean if a field has been set.
func (o *Resources) HasWriteable() bool {
	if o != nil && !IsNil(o.Writeable) {
		return true
	}

	return false
}

// SetWriteable gets a reference to the given bool and assigns it to the Writeable field.
func (o *Resources) SetWriteable(v bool) {
	o.Writeable = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *Resources) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resources) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *Resources) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *Resources) SetHref(v string) {
	o.Href = &v
}

// GetEditPermalink returns the EditPermalink field value if set, zero value otherwise.
func (o *Resources) GetEditPermalink() string {
	if o == nil || IsNil(o.EditPermalink) {
		var ret string
		return ret
	}
	return *o.EditPermalink
}

// GetEditPermalinkOk returns a tuple with the EditPermalink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resources) GetEditPermalinkOk() (*string, bool) {
	if o == nil || IsNil(o.EditPermalink) {
		return nil, false
	}
	return o.EditPermalink, true
}

// HasEditPermalink returns a boolean if a field has been set.
func (o *Resources) HasEditPermalink() bool {
	if o != nil && !IsNil(o.EditPermalink) {
		return true
	}

	return false
}

// SetEditPermalink gets a reference to the given string and assigns it to the EditPermalink field.
func (o *Resources) SetEditPermalink(v string) {
	o.EditPermalink = &v
}

// GetSyntaxMimeType returns the SyntaxMimeType field value if set, zero value otherwise.
func (o *Resources) GetSyntaxMimeType() string {
	if o == nil || IsNil(o.SyntaxMimeType) {
		var ret string
		return ret
	}
	return *o.SyntaxMimeType
}

// GetSyntaxMimeTypeOk returns a tuple with the SyntaxMimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resources) GetSyntaxMimeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SyntaxMimeType) {
		return nil, false
	}
	return o.SyntaxMimeType, true
}

// HasSyntaxMimeType returns a boolean if a field has been set.
func (o *Resources) HasSyntaxMimeType() bool {
	if o != nil && !IsNil(o.SyntaxMimeType) {
		return true
	}

	return false
}

// SetSyntaxMimeType gets a reference to the given string and assigns it to the SyntaxMimeType field.
func (o *Resources) SetSyntaxMimeType(v string) {
	o.SyntaxMimeType = &v
}

func (o Resources) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Resources) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Empty) {
		toSerialize["empty"] = o.Empty
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.Writeable) {
		toSerialize["writeable"] = o.Writeable
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.EditPermalink) {
		toSerialize["editPermalink"] = o.EditPermalink
	}
	if !IsNil(o.SyntaxMimeType) {
		toSerialize["syntaxMimeType"] = o.SyntaxMimeType
	}
	return toSerialize, nil
}

type NullableResources struct {
	value *Resources
	isSet bool
}

func (v NullableResources) Get() *Resources {
	return v.value
}

func (v *NullableResources) Set(val *Resources) {
	v.value = val
	v.isSet = true
}

func (v NullableResources) IsSet() bool {
	return v.isSet
}

func (v *NullableResources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResources(val *Resources) *NullableResources {
	return &NullableResources{value: val, isSet: true}
}

func (v NullableResources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


