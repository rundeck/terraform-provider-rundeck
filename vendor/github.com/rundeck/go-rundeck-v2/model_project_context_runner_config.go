/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProjectContextRunnerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectContextRunnerConfig{}

// ProjectContextRunnerConfig struct for ProjectContextRunnerConfig
type ProjectContextRunnerConfig struct {
	Project *string `json:"project,omitempty"`
	Automatic *bool `json:"automatic,omitempty"`
}

// NewProjectContextRunnerConfig instantiates a new ProjectContextRunnerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectContextRunnerConfig() *ProjectContextRunnerConfig {
	this := ProjectContextRunnerConfig{}
	return &this
}

// NewProjectContextRunnerConfigWithDefaults instantiates a new ProjectContextRunnerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectContextRunnerConfigWithDefaults() *ProjectContextRunnerConfig {
	this := ProjectContextRunnerConfig{}
	return &this
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ProjectContextRunnerConfig) GetProject() string {
	if o == nil || IsNil(o.Project) {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectContextRunnerConfig) GetProjectOk() (*string, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ProjectContextRunnerConfig) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *ProjectContextRunnerConfig) SetProject(v string) {
	o.Project = &v
}

// GetAutomatic returns the Automatic field value if set, zero value otherwise.
func (o *ProjectContextRunnerConfig) GetAutomatic() bool {
	if o == nil || IsNil(o.Automatic) {
		var ret bool
		return ret
	}
	return *o.Automatic
}

// GetAutomaticOk returns a tuple with the Automatic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectContextRunnerConfig) GetAutomaticOk() (*bool, bool) {
	if o == nil || IsNil(o.Automatic) {
		return nil, false
	}
	return o.Automatic, true
}

// HasAutomatic returns a boolean if a field has been set.
func (o *ProjectContextRunnerConfig) HasAutomatic() bool {
	if o != nil && !IsNil(o.Automatic) {
		return true
	}

	return false
}

// SetAutomatic gets a reference to the given bool and assigns it to the Automatic field.
func (o *ProjectContextRunnerConfig) SetAutomatic(v bool) {
	o.Automatic = &v
}

func (o ProjectContextRunnerConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectContextRunnerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Automatic) {
		toSerialize["automatic"] = o.Automatic
	}
	return toSerialize, nil
}

type NullableProjectContextRunnerConfig struct {
	value *ProjectContextRunnerConfig
	isSet bool
}

func (v NullableProjectContextRunnerConfig) Get() *ProjectContextRunnerConfig {
	return v.value
}

func (v *NullableProjectContextRunnerConfig) Set(val *ProjectContextRunnerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectContextRunnerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectContextRunnerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectContextRunnerConfig(val *ProjectContextRunnerConfig) *NullableProjectContextRunnerConfig {
	return &NullableProjectContextRunnerConfig{value: val, isSet: true}
}

func (v NullableProjectContextRunnerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectContextRunnerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


