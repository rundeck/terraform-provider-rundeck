/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UiData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UiData{}

// UiData struct for UiData
type UiData struct {
	ProjectCount *int32 `json:"projectCount,omitempty"`
	AllowedActions []string `json:"allowedActions,omitempty"`
	Features []string `json:"features,omitempty"`
	RunnerInstanceTypes []string `json:"runnerInstanceTypes,omitempty"`
}

// NewUiData instantiates a new UiData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUiData() *UiData {
	this := UiData{}
	return &this
}

// NewUiDataWithDefaults instantiates a new UiData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUiDataWithDefaults() *UiData {
	this := UiData{}
	return &this
}

// GetProjectCount returns the ProjectCount field value if set, zero value otherwise.
func (o *UiData) GetProjectCount() int32 {
	if o == nil || IsNil(o.ProjectCount) {
		var ret int32
		return ret
	}
	return *o.ProjectCount
}

// GetProjectCountOk returns a tuple with the ProjectCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiData) GetProjectCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectCount) {
		return nil, false
	}
	return o.ProjectCount, true
}

// HasProjectCount returns a boolean if a field has been set.
func (o *UiData) HasProjectCount() bool {
	if o != nil && !IsNil(o.ProjectCount) {
		return true
	}

	return false
}

// SetProjectCount gets a reference to the given int32 and assigns it to the ProjectCount field.
func (o *UiData) SetProjectCount(v int32) {
	o.ProjectCount = &v
}

// GetAllowedActions returns the AllowedActions field value if set, zero value otherwise.
func (o *UiData) GetAllowedActions() []string {
	if o == nil || IsNil(o.AllowedActions) {
		var ret []string
		return ret
	}
	return o.AllowedActions
}

// GetAllowedActionsOk returns a tuple with the AllowedActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiData) GetAllowedActionsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedActions) {
		return nil, false
	}
	return o.AllowedActions, true
}

// HasAllowedActions returns a boolean if a field has been set.
func (o *UiData) HasAllowedActions() bool {
	if o != nil && !IsNil(o.AllowedActions) {
		return true
	}

	return false
}

// SetAllowedActions gets a reference to the given []string and assigns it to the AllowedActions field.
func (o *UiData) SetAllowedActions(v []string) {
	o.AllowedActions = v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *UiData) GetFeatures() []string {
	if o == nil || IsNil(o.Features) {
		var ret []string
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiData) GetFeaturesOk() ([]string, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *UiData) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []string and assigns it to the Features field.
func (o *UiData) SetFeatures(v []string) {
	o.Features = v
}

// GetRunnerInstanceTypes returns the RunnerInstanceTypes field value if set, zero value otherwise.
func (o *UiData) GetRunnerInstanceTypes() []string {
	if o == nil || IsNil(o.RunnerInstanceTypes) {
		var ret []string
		return ret
	}
	return o.RunnerInstanceTypes
}

// GetRunnerInstanceTypesOk returns a tuple with the RunnerInstanceTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiData) GetRunnerInstanceTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.RunnerInstanceTypes) {
		return nil, false
	}
	return o.RunnerInstanceTypes, true
}

// HasRunnerInstanceTypes returns a boolean if a field has been set.
func (o *UiData) HasRunnerInstanceTypes() bool {
	if o != nil && !IsNil(o.RunnerInstanceTypes) {
		return true
	}

	return false
}

// SetRunnerInstanceTypes gets a reference to the given []string and assigns it to the RunnerInstanceTypes field.
func (o *UiData) SetRunnerInstanceTypes(v []string) {
	o.RunnerInstanceTypes = v
}

func (o UiData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UiData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProjectCount) {
		toSerialize["projectCount"] = o.ProjectCount
	}
	if !IsNil(o.AllowedActions) {
		toSerialize["allowedActions"] = o.AllowedActions
	}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if !IsNil(o.RunnerInstanceTypes) {
		toSerialize["runnerInstanceTypes"] = o.RunnerInstanceTypes
	}
	return toSerialize, nil
}

type NullableUiData struct {
	value *UiData
	isSet bool
}

func (v NullableUiData) Get() *UiData {
	return v.value
}

func (v *NullableUiData) Set(val *UiData) {
	v.value = val
	v.isSet = true
}

func (v NullableUiData) IsSet() bool {
	return v.isSet
}

func (v *NullableUiData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUiData(val *UiData) *NullableUiData {
	return &NullableUiData{value: val, isSet: true}
}

func (v NullableUiData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUiData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


