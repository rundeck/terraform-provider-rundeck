/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Executions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Executions{}

// Executions Executions Information
type Executions struct {
	Active *string `json:"active,omitempty"`
	ExecutionMode *string `json:"executionMode,omitempty"`
}

// NewExecutions instantiates a new Executions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutions() *Executions {
	this := Executions{}
	return &this
}

// NewExecutionsWithDefaults instantiates a new Executions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionsWithDefaults() *Executions {
	this := Executions{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Executions) GetActive() string {
	if o == nil || IsNil(o.Active) {
		var ret string
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Executions) GetActiveOk() (*string, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Executions) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given string and assigns it to the Active field.
func (o *Executions) SetActive(v string) {
	o.Active = &v
}

// GetExecutionMode returns the ExecutionMode field value if set, zero value otherwise.
func (o *Executions) GetExecutionMode() string {
	if o == nil || IsNil(o.ExecutionMode) {
		var ret string
		return ret
	}
	return *o.ExecutionMode
}

// GetExecutionModeOk returns a tuple with the ExecutionMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Executions) GetExecutionModeOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutionMode) {
		return nil, false
	}
	return o.ExecutionMode, true
}

// HasExecutionMode returns a boolean if a field has been set.
func (o *Executions) HasExecutionMode() bool {
	if o != nil && !IsNil(o.ExecutionMode) {
		return true
	}

	return false
}

// SetExecutionMode gets a reference to the given string and assigns it to the ExecutionMode field.
func (o *Executions) SetExecutionMode(v string) {
	o.ExecutionMode = &v
}

func (o Executions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Executions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.ExecutionMode) {
		toSerialize["executionMode"] = o.ExecutionMode
	}
	return toSerialize, nil
}

type NullableExecutions struct {
	value *Executions
	isSet bool
}

func (v NullableExecutions) Get() *Executions {
	return v.value
}

func (v *NullableExecutions) Set(val *Executions) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutions) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutions(val *Executions) *NullableExecutions {
	return &NullableExecutions{value: val, isSet: true}
}

func (v NullableExecutions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


