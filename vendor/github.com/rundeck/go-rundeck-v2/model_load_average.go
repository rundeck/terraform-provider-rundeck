/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LoadAverage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadAverage{}

// LoadAverage Cpu Load Average Information
type LoadAverage struct {
	Unit *string `json:"unit,omitempty"`
	Average *int32 `json:"average,omitempty"`
}

// NewLoadAverage instantiates a new LoadAverage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadAverage() *LoadAverage {
	this := LoadAverage{}
	return &this
}

// NewLoadAverageWithDefaults instantiates a new LoadAverage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadAverageWithDefaults() *LoadAverage {
	this := LoadAverage{}
	return &this
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *LoadAverage) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadAverage) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *LoadAverage) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *LoadAverage) SetUnit(v string) {
	o.Unit = &v
}

// GetAverage returns the Average field value if set, zero value otherwise.
func (o *LoadAverage) GetAverage() int32 {
	if o == nil || IsNil(o.Average) {
		var ret int32
		return ret
	}
	return *o.Average
}

// GetAverageOk returns a tuple with the Average field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadAverage) GetAverageOk() (*int32, bool) {
	if o == nil || IsNil(o.Average) {
		return nil, false
	}
	return o.Average, true
}

// HasAverage returns a boolean if a field has been set.
func (o *LoadAverage) HasAverage() bool {
	if o != nil && !IsNil(o.Average) {
		return true
	}

	return false
}

// SetAverage gets a reference to the given int32 and assigns it to the Average field.
func (o *LoadAverage) SetAverage(v int32) {
	o.Average = &v
}

func (o LoadAverage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadAverage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.Average) {
		toSerialize["average"] = o.Average
	}
	return toSerialize, nil
}

type NullableLoadAverage struct {
	value *LoadAverage
	isSet bool
}

func (v NullableLoadAverage) Get() *LoadAverage {
	return v.value
}

func (v *NullableLoadAverage) Set(val *LoadAverage) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadAverage) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadAverage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadAverage(val *LoadAverage) *NullableLoadAverage {
	return &NullableLoadAverage{value: val, isSet: true}
}

func (v NullableLoadAverage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadAverage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


