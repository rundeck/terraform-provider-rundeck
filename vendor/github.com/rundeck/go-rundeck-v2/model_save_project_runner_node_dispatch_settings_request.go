/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SaveProjectRunnerNodeDispatchSettingsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SaveProjectRunnerNodeDispatchSettingsRequest{}

// SaveProjectRunnerNodeDispatchSettingsRequest struct for SaveProjectRunnerNodeDispatchSettingsRequest
type SaveProjectRunnerNodeDispatchSettingsRequest struct {
	RunnerId string `json:"runnerId"`
	RunnerAsNodeEnabled *bool `json:"runnerAsNodeEnabled,omitempty"`
	RemoteNodeDispatch *bool `json:"remoteNodeDispatch,omitempty"`
	RunnerNodeFilter *string `json:"runnerNodeFilter,omitempty"`
	Data *UpdateRunnerNodeDispatchRequest `json:"data,omitempty"`
}

type _SaveProjectRunnerNodeDispatchSettingsRequest SaveProjectRunnerNodeDispatchSettingsRequest

// NewSaveProjectRunnerNodeDispatchSettingsRequest instantiates a new SaveProjectRunnerNodeDispatchSettingsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSaveProjectRunnerNodeDispatchSettingsRequest(runnerId string) *SaveProjectRunnerNodeDispatchSettingsRequest {
	this := SaveProjectRunnerNodeDispatchSettingsRequest{}
	this.RunnerId = runnerId
	return &this
}

// NewSaveProjectRunnerNodeDispatchSettingsRequestWithDefaults instantiates a new SaveProjectRunnerNodeDispatchSettingsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSaveProjectRunnerNodeDispatchSettingsRequestWithDefaults() *SaveProjectRunnerNodeDispatchSettingsRequest {
	this := SaveProjectRunnerNodeDispatchSettingsRequest{}
	return &this
}

// GetRunnerId returns the RunnerId field value
func (o *SaveProjectRunnerNodeDispatchSettingsRequest) GetRunnerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RunnerId
}

// GetRunnerIdOk returns a tuple with the RunnerId field value
// and a boolean to check if the value has been set.
func (o *SaveProjectRunnerNodeDispatchSettingsRequest) GetRunnerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RunnerId, true
}

// SetRunnerId sets field value
func (o *SaveProjectRunnerNodeDispatchSettingsRequest) SetRunnerId(v string) {
	o.RunnerId = v
}

// GetRunnerAsNodeEnabled returns the RunnerAsNodeEnabled field value if set, zero value otherwise.
func (o *SaveProjectRunnerNodeDispatchSettingsRequest) GetRunnerAsNodeEnabled() bool {
	if o == nil || IsNil(o.RunnerAsNodeEnabled) {
		var ret bool
		return ret
	}
	return *o.RunnerAsNodeEnabled
}

// GetRunnerAsNodeEnabledOk returns a tuple with the RunnerAsNodeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveProjectRunnerNodeDispatchSettingsRequest) GetRunnerAsNodeEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RunnerAsNodeEnabled) {
		return nil, false
	}
	return o.RunnerAsNodeEnabled, true
}

// HasRunnerAsNodeEnabled returns a boolean if a field has been set.
func (o *SaveProjectRunnerNodeDispatchSettingsRequest) HasRunnerAsNodeEnabled() bool {
	if o != nil && !IsNil(o.RunnerAsNodeEnabled) {
		return true
	}

	return false
}

// SetRunnerAsNodeEnabled gets a reference to the given bool and assigns it to the RunnerAsNodeEnabled field.
func (o *SaveProjectRunnerNodeDispatchSettingsRequest) SetRunnerAsNodeEnabled(v bool) {
	o.RunnerAsNodeEnabled = &v
}

// GetRemoteNodeDispatch returns the RemoteNodeDispatch field value if set, zero value otherwise.
func (o *SaveProjectRunnerNodeDispatchSettingsRequest) GetRemoteNodeDispatch() bool {
	if o == nil || IsNil(o.RemoteNodeDispatch) {
		var ret bool
		return ret
	}
	return *o.RemoteNodeDispatch
}

// GetRemoteNodeDispatchOk returns a tuple with the RemoteNodeDispatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveProjectRunnerNodeDispatchSettingsRequest) GetRemoteNodeDispatchOk() (*bool, bool) {
	if o == nil || IsNil(o.RemoteNodeDispatch) {
		return nil, false
	}
	return o.RemoteNodeDispatch, true
}

// HasRemoteNodeDispatch returns a boolean if a field has been set.
func (o *SaveProjectRunnerNodeDispatchSettingsRequest) HasRemoteNodeDispatch() bool {
	if o != nil && !IsNil(o.RemoteNodeDispatch) {
		return true
	}

	return false
}

// SetRemoteNodeDispatch gets a reference to the given bool and assigns it to the RemoteNodeDispatch field.
func (o *SaveProjectRunnerNodeDispatchSettingsRequest) SetRemoteNodeDispatch(v bool) {
	o.RemoteNodeDispatch = &v
}

// GetRunnerNodeFilter returns the RunnerNodeFilter field value if set, zero value otherwise.
func (o *SaveProjectRunnerNodeDispatchSettingsRequest) GetRunnerNodeFilter() string {
	if o == nil || IsNil(o.RunnerNodeFilter) {
		var ret string
		return ret
	}
	return *o.RunnerNodeFilter
}

// GetRunnerNodeFilterOk returns a tuple with the RunnerNodeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveProjectRunnerNodeDispatchSettingsRequest) GetRunnerNodeFilterOk() (*string, bool) {
	if o == nil || IsNil(o.RunnerNodeFilter) {
		return nil, false
	}
	return o.RunnerNodeFilter, true
}

// HasRunnerNodeFilter returns a boolean if a field has been set.
func (o *SaveProjectRunnerNodeDispatchSettingsRequest) HasRunnerNodeFilter() bool {
	if o != nil && !IsNil(o.RunnerNodeFilter) {
		return true
	}

	return false
}

// SetRunnerNodeFilter gets a reference to the given string and assigns it to the RunnerNodeFilter field.
func (o *SaveProjectRunnerNodeDispatchSettingsRequest) SetRunnerNodeFilter(v string) {
	o.RunnerNodeFilter = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SaveProjectRunnerNodeDispatchSettingsRequest) GetData() UpdateRunnerNodeDispatchRequest {
	if o == nil || IsNil(o.Data) {
		var ret UpdateRunnerNodeDispatchRequest
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveProjectRunnerNodeDispatchSettingsRequest) GetDataOk() (*UpdateRunnerNodeDispatchRequest, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SaveProjectRunnerNodeDispatchSettingsRequest) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given UpdateRunnerNodeDispatchRequest and assigns it to the Data field.
func (o *SaveProjectRunnerNodeDispatchSettingsRequest) SetData(v UpdateRunnerNodeDispatchRequest) {
	o.Data = &v
}

func (o SaveProjectRunnerNodeDispatchSettingsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SaveProjectRunnerNodeDispatchSettingsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["runnerId"] = o.RunnerId
	if !IsNil(o.RunnerAsNodeEnabled) {
		toSerialize["runnerAsNodeEnabled"] = o.RunnerAsNodeEnabled
	}
	if !IsNil(o.RemoteNodeDispatch) {
		toSerialize["remoteNodeDispatch"] = o.RemoteNodeDispatch
	}
	if !IsNil(o.RunnerNodeFilter) {
		toSerialize["runnerNodeFilter"] = o.RunnerNodeFilter
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

func (o *SaveProjectRunnerNodeDispatchSettingsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"runnerId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSaveProjectRunnerNodeDispatchSettingsRequest := _SaveProjectRunnerNodeDispatchSettingsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSaveProjectRunnerNodeDispatchSettingsRequest)

	if err != nil {
		return err
	}

	*o = SaveProjectRunnerNodeDispatchSettingsRequest(varSaveProjectRunnerNodeDispatchSettingsRequest)

	return err
}

type NullableSaveProjectRunnerNodeDispatchSettingsRequest struct {
	value *SaveProjectRunnerNodeDispatchSettingsRequest
	isSet bool
}

func (v NullableSaveProjectRunnerNodeDispatchSettingsRequest) Get() *SaveProjectRunnerNodeDispatchSettingsRequest {
	return v.value
}

func (v *NullableSaveProjectRunnerNodeDispatchSettingsRequest) Set(val *SaveProjectRunnerNodeDispatchSettingsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSaveProjectRunnerNodeDispatchSettingsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSaveProjectRunnerNodeDispatchSettingsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSaveProjectRunnerNodeDispatchSettingsRequest(val *SaveProjectRunnerNodeDispatchSettingsRequest) *NullableSaveProjectRunnerNodeDispatchSettingsRequest {
	return &NullableSaveProjectRunnerNodeDispatchSettingsRequest{value: val, isSet: true}
}

func (v NullableSaveProjectRunnerNodeDispatchSettingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSaveProjectRunnerNodeDispatchSettingsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


