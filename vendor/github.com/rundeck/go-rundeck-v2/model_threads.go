/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Threads type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Threads{}

// Threads Thread Information
type Threads struct {
	Active *int32 `json:"active,omitempty"`
}

// NewThreads instantiates a new Threads object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreads() *Threads {
	this := Threads{}
	return &this
}

// NewThreadsWithDefaults instantiates a new Threads object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreadsWithDefaults() *Threads {
	this := Threads{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Threads) GetActive() int32 {
	if o == nil || IsNil(o.Active) {
		var ret int32
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Threads) GetActiveOk() (*int32, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Threads) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given int32 and assigns it to the Active field.
func (o *Threads) SetActive(v int32) {
	o.Active = &v
}

func (o Threads) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Threads) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

type NullableThreads struct {
	value *Threads
	isSet bool
}

func (v NullableThreads) Get() *Threads {
	return v.value
}

func (v *NullableThreads) Set(val *Threads) {
	v.value = val
	v.isSet = true
}

func (v NullableThreads) IsSet() bool {
	return v.isSet
}

func (v *NullableThreads) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreads(val *Threads) *NullableThreads {
	return &NullableThreads{value: val, isSet: true}
}

func (v NullableThreads) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreads) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


