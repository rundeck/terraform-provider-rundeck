/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserClassAllocationError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserClassAllocationError{}

// UserClassAllocationError struct for UserClassAllocationError
type UserClassAllocationError struct {
	// Exceeded User Class assignments, by user class name
	Excessions *map[string]int64 `json:"excessions,omitempty"`
	// Allowed User Class assignment limits, by user class name
	Limits *map[string]int64 `json:"limits,omitempty"`
	Error *string `json:"error,omitempty"`
	ErrorCode *string `json:"errorCode,omitempty"`
}

// NewUserClassAllocationError instantiates a new UserClassAllocationError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserClassAllocationError() *UserClassAllocationError {
	this := UserClassAllocationError{}
	return &this
}

// NewUserClassAllocationErrorWithDefaults instantiates a new UserClassAllocationError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserClassAllocationErrorWithDefaults() *UserClassAllocationError {
	this := UserClassAllocationError{}
	return &this
}

// GetExcessions returns the Excessions field value if set, zero value otherwise.
func (o *UserClassAllocationError) GetExcessions() map[string]int64 {
	if o == nil || IsNil(o.Excessions) {
		var ret map[string]int64
		return ret
	}
	return *o.Excessions
}

// GetExcessionsOk returns a tuple with the Excessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserClassAllocationError) GetExcessionsOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.Excessions) {
		return nil, false
	}
	return o.Excessions, true
}

// HasExcessions returns a boolean if a field has been set.
func (o *UserClassAllocationError) HasExcessions() bool {
	if o != nil && !IsNil(o.Excessions) {
		return true
	}

	return false
}

// SetExcessions gets a reference to the given map[string]int64 and assigns it to the Excessions field.
func (o *UserClassAllocationError) SetExcessions(v map[string]int64) {
	o.Excessions = &v
}

// GetLimits returns the Limits field value if set, zero value otherwise.
func (o *UserClassAllocationError) GetLimits() map[string]int64 {
	if o == nil || IsNil(o.Limits) {
		var ret map[string]int64
		return ret
	}
	return *o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserClassAllocationError) GetLimitsOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.Limits) {
		return nil, false
	}
	return o.Limits, true
}

// HasLimits returns a boolean if a field has been set.
func (o *UserClassAllocationError) HasLimits() bool {
	if o != nil && !IsNil(o.Limits) {
		return true
	}

	return false
}

// SetLimits gets a reference to the given map[string]int64 and assigns it to the Limits field.
func (o *UserClassAllocationError) SetLimits(v map[string]int64) {
	o.Limits = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *UserClassAllocationError) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserClassAllocationError) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *UserClassAllocationError) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *UserClassAllocationError) SetError(v string) {
	o.Error = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *UserClassAllocationError) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserClassAllocationError) GetErrorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *UserClassAllocationError) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *UserClassAllocationError) SetErrorCode(v string) {
	o.ErrorCode = &v
}

func (o UserClassAllocationError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserClassAllocationError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Excessions) {
		toSerialize["excessions"] = o.Excessions
	}
	if !IsNil(o.Limits) {
		toSerialize["limits"] = o.Limits
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.ErrorCode) {
		toSerialize["errorCode"] = o.ErrorCode
	}
	return toSerialize, nil
}

type NullableUserClassAllocationError struct {
	value *UserClassAllocationError
	isSet bool
}

func (v NullableUserClassAllocationError) Get() *UserClassAllocationError {
	return v.value
}

func (v *NullableUserClassAllocationError) Set(val *UserClassAllocationError) {
	v.value = val
	v.isSet = true
}

func (v NullableUserClassAllocationError) IsSet() bool {
	return v.isSet
}

func (v *NullableUserClassAllocationError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserClassAllocationError(val *UserClassAllocationError) *NullableUserClassAllocationError {
	return &NullableUserClassAllocationError{value: val, isSet: true}
}

func (v NullableUserClassAllocationError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserClassAllocationError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


