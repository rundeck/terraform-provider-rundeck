/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AuthorizationsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizationsResponse{}

// AuthorizationsResponse Authorizations
type AuthorizationsResponse struct {
	AuthorizationContext map[string]interface{} `json:"authorizationContext"`
	Resource map[string]interface{} `json:"resource"`
	// Action authorization
	ActionAuthorizations []ActionAuthorization `json:"actionAuthorizations"`
}

type _AuthorizationsResponse AuthorizationsResponse

// NewAuthorizationsResponse instantiates a new AuthorizationsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizationsResponse(authorizationContext map[string]interface{}, resource map[string]interface{}, actionAuthorizations []ActionAuthorization) *AuthorizationsResponse {
	this := AuthorizationsResponse{}
	this.AuthorizationContext = authorizationContext
	this.Resource = resource
	this.ActionAuthorizations = actionAuthorizations
	return &this
}

// NewAuthorizationsResponseWithDefaults instantiates a new AuthorizationsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationsResponseWithDefaults() *AuthorizationsResponse {
	this := AuthorizationsResponse{}
	return &this
}

// GetAuthorizationContext returns the AuthorizationContext field value
func (o *AuthorizationsResponse) GetAuthorizationContext() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.AuthorizationContext
}

// GetAuthorizationContextOk returns a tuple with the AuthorizationContext field value
// and a boolean to check if the value has been set.
func (o *AuthorizationsResponse) GetAuthorizationContextOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.AuthorizationContext, true
}

// SetAuthorizationContext sets field value
func (o *AuthorizationsResponse) SetAuthorizationContext(v map[string]interface{}) {
	o.AuthorizationContext = v
}

// GetResource returns the Resource field value
func (o *AuthorizationsResponse) GetResource() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *AuthorizationsResponse) GetResourceOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Resource, true
}

// SetResource sets field value
func (o *AuthorizationsResponse) SetResource(v map[string]interface{}) {
	o.Resource = v
}

// GetActionAuthorizations returns the ActionAuthorizations field value
func (o *AuthorizationsResponse) GetActionAuthorizations() []ActionAuthorization {
	if o == nil {
		var ret []ActionAuthorization
		return ret
	}

	return o.ActionAuthorizations
}

// GetActionAuthorizationsOk returns a tuple with the ActionAuthorizations field value
// and a boolean to check if the value has been set.
func (o *AuthorizationsResponse) GetActionAuthorizationsOk() ([]ActionAuthorization, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActionAuthorizations, true
}

// SetActionAuthorizations sets field value
func (o *AuthorizationsResponse) SetActionAuthorizations(v []ActionAuthorization) {
	o.ActionAuthorizations = v
}

func (o AuthorizationsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizationsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authorizationContext"] = o.AuthorizationContext
	toSerialize["resource"] = o.Resource
	toSerialize["actionAuthorizations"] = o.ActionAuthorizations
	return toSerialize, nil
}

func (o *AuthorizationsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authorizationContext",
		"resource",
		"actionAuthorizations",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthorizationsResponse := _AuthorizationsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuthorizationsResponse)

	if err != nil {
		return err
	}

	*o = AuthorizationsResponse(varAuthorizationsResponse)

	return err
}

type NullableAuthorizationsResponse struct {
	value *AuthorizationsResponse
	isSet bool
}

func (v NullableAuthorizationsResponse) Get() *AuthorizationsResponse {
	return v.value
}

func (v *NullableAuthorizationsResponse) Set(val *AuthorizationsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizationsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizationsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizationsResponse(val *AuthorizationsResponse) *NullableAuthorizationsResponse {
	return &NullableAuthorizationsResponse{value: val, isSet: true}
}

func (v NullableAuthorizationsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizationsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


