/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SaveProjectRunnerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SaveProjectRunnerRequest{}

// SaveProjectRunnerRequest struct for SaveProjectRunnerRequest
type SaveProjectRunnerRequest struct {
	RunnerId string `json:"runnerId"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	AssignedProjects *map[string]string `json:"assignedProjects,omitempty"`
	TagNames *string `json:"tagNames,omitempty"`
	InstallationType *string `json:"installationType,omitempty"`
	ReplicaType *string `json:"replicaType,omitempty"`
	Data *UpdateRunnerRequest `json:"data,omitempty"`
}

type _SaveProjectRunnerRequest SaveProjectRunnerRequest

// NewSaveProjectRunnerRequest instantiates a new SaveProjectRunnerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSaveProjectRunnerRequest(runnerId string) *SaveProjectRunnerRequest {
	this := SaveProjectRunnerRequest{}
	this.RunnerId = runnerId
	return &this
}

// NewSaveProjectRunnerRequestWithDefaults instantiates a new SaveProjectRunnerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSaveProjectRunnerRequestWithDefaults() *SaveProjectRunnerRequest {
	this := SaveProjectRunnerRequest{}
	return &this
}

// GetRunnerId returns the RunnerId field value
func (o *SaveProjectRunnerRequest) GetRunnerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RunnerId
}

// GetRunnerIdOk returns a tuple with the RunnerId field value
// and a boolean to check if the value has been set.
func (o *SaveProjectRunnerRequest) GetRunnerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RunnerId, true
}

// SetRunnerId sets field value
func (o *SaveProjectRunnerRequest) SetRunnerId(v string) {
	o.RunnerId = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SaveProjectRunnerRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveProjectRunnerRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SaveProjectRunnerRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SaveProjectRunnerRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SaveProjectRunnerRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveProjectRunnerRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SaveProjectRunnerRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SaveProjectRunnerRequest) SetDescription(v string) {
	o.Description = &v
}

// GetAssignedProjects returns the AssignedProjects field value if set, zero value otherwise.
func (o *SaveProjectRunnerRequest) GetAssignedProjects() map[string]string {
	if o == nil || IsNil(o.AssignedProjects) {
		var ret map[string]string
		return ret
	}
	return *o.AssignedProjects
}

// GetAssignedProjectsOk returns a tuple with the AssignedProjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveProjectRunnerRequest) GetAssignedProjectsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.AssignedProjects) {
		return nil, false
	}
	return o.AssignedProjects, true
}

// HasAssignedProjects returns a boolean if a field has been set.
func (o *SaveProjectRunnerRequest) HasAssignedProjects() bool {
	if o != nil && !IsNil(o.AssignedProjects) {
		return true
	}

	return false
}

// SetAssignedProjects gets a reference to the given map[string]string and assigns it to the AssignedProjects field.
func (o *SaveProjectRunnerRequest) SetAssignedProjects(v map[string]string) {
	o.AssignedProjects = &v
}

// GetTagNames returns the TagNames field value if set, zero value otherwise.
func (o *SaveProjectRunnerRequest) GetTagNames() string {
	if o == nil || IsNil(o.TagNames) {
		var ret string
		return ret
	}
	return *o.TagNames
}

// GetTagNamesOk returns a tuple with the TagNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveProjectRunnerRequest) GetTagNamesOk() (*string, bool) {
	if o == nil || IsNil(o.TagNames) {
		return nil, false
	}
	return o.TagNames, true
}

// HasTagNames returns a boolean if a field has been set.
func (o *SaveProjectRunnerRequest) HasTagNames() bool {
	if o != nil && !IsNil(o.TagNames) {
		return true
	}

	return false
}

// SetTagNames gets a reference to the given string and assigns it to the TagNames field.
func (o *SaveProjectRunnerRequest) SetTagNames(v string) {
	o.TagNames = &v
}

// GetInstallationType returns the InstallationType field value if set, zero value otherwise.
func (o *SaveProjectRunnerRequest) GetInstallationType() string {
	if o == nil || IsNil(o.InstallationType) {
		var ret string
		return ret
	}
	return *o.InstallationType
}

// GetInstallationTypeOk returns a tuple with the InstallationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveProjectRunnerRequest) GetInstallationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InstallationType) {
		return nil, false
	}
	return o.InstallationType, true
}

// HasInstallationType returns a boolean if a field has been set.
func (o *SaveProjectRunnerRequest) HasInstallationType() bool {
	if o != nil && !IsNil(o.InstallationType) {
		return true
	}

	return false
}

// SetInstallationType gets a reference to the given string and assigns it to the InstallationType field.
func (o *SaveProjectRunnerRequest) SetInstallationType(v string) {
	o.InstallationType = &v
}

// GetReplicaType returns the ReplicaType field value if set, zero value otherwise.
func (o *SaveProjectRunnerRequest) GetReplicaType() string {
	if o == nil || IsNil(o.ReplicaType) {
		var ret string
		return ret
	}
	return *o.ReplicaType
}

// GetReplicaTypeOk returns a tuple with the ReplicaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveProjectRunnerRequest) GetReplicaTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReplicaType) {
		return nil, false
	}
	return o.ReplicaType, true
}

// HasReplicaType returns a boolean if a field has been set.
func (o *SaveProjectRunnerRequest) HasReplicaType() bool {
	if o != nil && !IsNil(o.ReplicaType) {
		return true
	}

	return false
}

// SetReplicaType gets a reference to the given string and assigns it to the ReplicaType field.
func (o *SaveProjectRunnerRequest) SetReplicaType(v string) {
	o.ReplicaType = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SaveProjectRunnerRequest) GetData() UpdateRunnerRequest {
	if o == nil || IsNil(o.Data) {
		var ret UpdateRunnerRequest
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveProjectRunnerRequest) GetDataOk() (*UpdateRunnerRequest, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SaveProjectRunnerRequest) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given UpdateRunnerRequest and assigns it to the Data field.
func (o *SaveProjectRunnerRequest) SetData(v UpdateRunnerRequest) {
	o.Data = &v
}

func (o SaveProjectRunnerRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SaveProjectRunnerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["runnerId"] = o.RunnerId
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.AssignedProjects) {
		toSerialize["assignedProjects"] = o.AssignedProjects
	}
	if !IsNil(o.TagNames) {
		toSerialize["tagNames"] = o.TagNames
	}
	if !IsNil(o.InstallationType) {
		toSerialize["installationType"] = o.InstallationType
	}
	if !IsNil(o.ReplicaType) {
		toSerialize["replicaType"] = o.ReplicaType
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

func (o *SaveProjectRunnerRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"runnerId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSaveProjectRunnerRequest := _SaveProjectRunnerRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSaveProjectRunnerRequest)

	if err != nil {
		return err
	}

	*o = SaveProjectRunnerRequest(varSaveProjectRunnerRequest)

	return err
}

type NullableSaveProjectRunnerRequest struct {
	value *SaveProjectRunnerRequest
	isSet bool
}

func (v NullableSaveProjectRunnerRequest) Get() *SaveProjectRunnerRequest {
	return v.value
}

func (v *NullableSaveProjectRunnerRequest) Set(val *SaveProjectRunnerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSaveProjectRunnerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSaveProjectRunnerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSaveProjectRunnerRequest(val *SaveProjectRunnerRequest) *NullableSaveProjectRunnerRequest {
	return &NullableSaveProjectRunnerRequest{value: val, isSet: true}
}

func (v NullableSaveProjectRunnerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSaveProjectRunnerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


