/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LicenseEntitlement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseEntitlement{}

// LicenseEntitlement License Entitlement Information
type LicenseEntitlement struct {
	Name *string `json:"name,omitempty"`
	Description *LicenseEntitlementDescription `json:"description,omitempty"`
	Value *map[string]string `json:"value,omitempty"`
}

// NewLicenseEntitlement instantiates a new LicenseEntitlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseEntitlement() *LicenseEntitlement {
	this := LicenseEntitlement{}
	return &this
}

// NewLicenseEntitlementWithDefaults instantiates a new LicenseEntitlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseEntitlementWithDefaults() *LicenseEntitlement {
	this := LicenseEntitlement{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LicenseEntitlement) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseEntitlement) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LicenseEntitlement) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LicenseEntitlement) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LicenseEntitlement) GetDescription() LicenseEntitlementDescription {
	if o == nil || IsNil(o.Description) {
		var ret LicenseEntitlementDescription
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseEntitlement) GetDescriptionOk() (*LicenseEntitlementDescription, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LicenseEntitlement) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given LicenseEntitlementDescription and assigns it to the Description field.
func (o *LicenseEntitlement) SetDescription(v LicenseEntitlementDescription) {
	o.Description = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *LicenseEntitlement) GetValue() map[string]string {
	if o == nil || IsNil(o.Value) {
		var ret map[string]string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseEntitlement) GetValueOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *LicenseEntitlement) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]string and assigns it to the Value field.
func (o *LicenseEntitlement) SetValue(v map[string]string) {
	o.Value = &v
}

func (o LicenseEntitlement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseEntitlement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableLicenseEntitlement struct {
	value *LicenseEntitlement
	isSet bool
}

func (v NullableLicenseEntitlement) Get() *LicenseEntitlement {
	return v.value
}

func (v *NullableLicenseEntitlement) Set(val *LicenseEntitlement) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseEntitlement) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseEntitlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseEntitlement(val *LicenseEntitlement) *NullableLicenseEntitlement {
	return &NullableLicenseEntitlement{value: val, isSet: true}
}

func (v NullableLicenseEntitlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseEntitlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


