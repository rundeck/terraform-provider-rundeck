/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserClassResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserClassResponse{}

// UserClassResponse struct for UserClassResponse
type UserClassResponse struct {
	Username *string `json:"username,omitempty"`
	Userclass *string `json:"userclass,omitempty"`
}

// NewUserClassResponse instantiates a new UserClassResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserClassResponse() *UserClassResponse {
	this := UserClassResponse{}
	return &this
}

// NewUserClassResponseWithDefaults instantiates a new UserClassResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserClassResponseWithDefaults() *UserClassResponse {
	this := UserClassResponse{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserClassResponse) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserClassResponse) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserClassResponse) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserClassResponse) SetUsername(v string) {
	o.Username = &v
}

// GetUserclass returns the Userclass field value if set, zero value otherwise.
func (o *UserClassResponse) GetUserclass() string {
	if o == nil || IsNil(o.Userclass) {
		var ret string
		return ret
	}
	return *o.Userclass
}

// GetUserclassOk returns a tuple with the Userclass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserClassResponse) GetUserclassOk() (*string, bool) {
	if o == nil || IsNil(o.Userclass) {
		return nil, false
	}
	return o.Userclass, true
}

// HasUserclass returns a boolean if a field has been set.
func (o *UserClassResponse) HasUserclass() bool {
	if o != nil && !IsNil(o.Userclass) {
		return true
	}

	return false
}

// SetUserclass gets a reference to the given string and assigns it to the Userclass field.
func (o *UserClassResponse) SetUserclass(v string) {
	o.Userclass = &v
}

func (o UserClassResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserClassResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Userclass) {
		toSerialize["userclass"] = o.Userclass
	}
	return toSerialize, nil
}

type NullableUserClassResponse struct {
	value *UserClassResponse
	isSet bool
}

func (v NullableUserClassResponse) Get() *UserClassResponse {
	return v.value
}

func (v *NullableUserClassResponse) Set(val *UserClassResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserClassResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserClassResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserClassResponse(val *UserClassResponse) *NullableUserClassResponse {
	return &NullableUserClassResponse{value: val, isSet: true}
}

func (v NullableUserClassResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserClassResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


