/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ScmCommit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScmCommit{}

// ScmCommit struct for ScmCommit
type ScmCommit struct {
	CommitId *string `json:"commitId,omitempty"`
	Message *string `json:"message,omitempty"`
	Author *string `json:"author,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Info map[string]interface{} `json:"info,omitempty"`
}

// NewScmCommit instantiates a new ScmCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScmCommit() *ScmCommit {
	this := ScmCommit{}
	return &this
}

// NewScmCommitWithDefaults instantiates a new ScmCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScmCommitWithDefaults() *ScmCommit {
	this := ScmCommit{}
	return &this
}

// GetCommitId returns the CommitId field value if set, zero value otherwise.
func (o *ScmCommit) GetCommitId() string {
	if o == nil || IsNil(o.CommitId) {
		var ret string
		return ret
	}
	return *o.CommitId
}

// GetCommitIdOk returns a tuple with the CommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmCommit) GetCommitIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommitId) {
		return nil, false
	}
	return o.CommitId, true
}

// HasCommitId returns a boolean if a field has been set.
func (o *ScmCommit) HasCommitId() bool {
	if o != nil && !IsNil(o.CommitId) {
		return true
	}

	return false
}

// SetCommitId gets a reference to the given string and assigns it to the CommitId field.
func (o *ScmCommit) SetCommitId(v string) {
	o.CommitId = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ScmCommit) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmCommit) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ScmCommit) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ScmCommit) SetMessage(v string) {
	o.Message = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *ScmCommit) GetAuthor() string {
	if o == nil || IsNil(o.Author) {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmCommit) GetAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *ScmCommit) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *ScmCommit) SetAuthor(v string) {
	o.Author = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ScmCommit) GetDate() time.Time {
	if o == nil || IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmCommit) GetDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ScmCommit) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *ScmCommit) SetDate(v time.Time) {
	o.Date = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ScmCommit) GetInfo() map[string]interface{} {
	if o == nil || IsNil(o.Info) {
		var ret map[string]interface{}
		return ret
	}
	return o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmCommit) GetInfoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Info) {
		return map[string]interface{}{}, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ScmCommit) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]interface{} and assigns it to the Info field.
func (o *ScmCommit) SetInfo(v map[string]interface{}) {
	o.Info = v
}

func (o ScmCommit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScmCommit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommitId) {
		toSerialize["commitId"] = o.CommitId
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	return toSerialize, nil
}

type NullableScmCommit struct {
	value *ScmCommit
	isSet bool
}

func (v NullableScmCommit) Get() *ScmCommit {
	return v.value
}

func (v *NullableScmCommit) Set(val *ScmCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableScmCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableScmCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScmCommit(val *ScmCommit) *NullableScmCommit {
	return &NullableScmCommit{value: val, isSet: true}
}

func (v NullableScmCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScmCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


