/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserClassAllocationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserClassAllocationResponse{}

// UserClassAllocationResponse struct for UserClassAllocationResponse
type UserClassAllocationResponse struct {
	// The current state of the user classe allocations. One of: VALID, EXCEEDED, UPGRADED
	State *string `json:"state,omitempty"`
	Message *string `json:"message,omitempty"`
	// Current allocations by user class name.
	Summary *map[string]int64 `json:"summary,omitempty"`
	// Exceeded allocations count by user class name.
	Exceeded *map[string]int64 `json:"exceeded,omitempty"`
	// Entitled allocations count by user class name.
	Entitled *map[string]int64 `json:"entitled,omitempty"`
	// The current User Class allocation set, as a map of user name to user class name.
	Allocations *map[string]string `json:"allocations,omitempty"`
}

// NewUserClassAllocationResponse instantiates a new UserClassAllocationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserClassAllocationResponse() *UserClassAllocationResponse {
	this := UserClassAllocationResponse{}
	return &this
}

// NewUserClassAllocationResponseWithDefaults instantiates a new UserClassAllocationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserClassAllocationResponseWithDefaults() *UserClassAllocationResponse {
	this := UserClassAllocationResponse{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *UserClassAllocationResponse) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserClassAllocationResponse) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *UserClassAllocationResponse) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *UserClassAllocationResponse) SetState(v string) {
	o.State = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *UserClassAllocationResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserClassAllocationResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *UserClassAllocationResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *UserClassAllocationResponse) SetMessage(v string) {
	o.Message = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *UserClassAllocationResponse) GetSummary() map[string]int64 {
	if o == nil || IsNil(o.Summary) {
		var ret map[string]int64
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserClassAllocationResponse) GetSummaryOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *UserClassAllocationResponse) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given map[string]int64 and assigns it to the Summary field.
func (o *UserClassAllocationResponse) SetSummary(v map[string]int64) {
	o.Summary = &v
}

// GetExceeded returns the Exceeded field value if set, zero value otherwise.
func (o *UserClassAllocationResponse) GetExceeded() map[string]int64 {
	if o == nil || IsNil(o.Exceeded) {
		var ret map[string]int64
		return ret
	}
	return *o.Exceeded
}

// GetExceededOk returns a tuple with the Exceeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserClassAllocationResponse) GetExceededOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.Exceeded) {
		return nil, false
	}
	return o.Exceeded, true
}

// HasExceeded returns a boolean if a field has been set.
func (o *UserClassAllocationResponse) HasExceeded() bool {
	if o != nil && !IsNil(o.Exceeded) {
		return true
	}

	return false
}

// SetExceeded gets a reference to the given map[string]int64 and assigns it to the Exceeded field.
func (o *UserClassAllocationResponse) SetExceeded(v map[string]int64) {
	o.Exceeded = &v
}

// GetEntitled returns the Entitled field value if set, zero value otherwise.
func (o *UserClassAllocationResponse) GetEntitled() map[string]int64 {
	if o == nil || IsNil(o.Entitled) {
		var ret map[string]int64
		return ret
	}
	return *o.Entitled
}

// GetEntitledOk returns a tuple with the Entitled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserClassAllocationResponse) GetEntitledOk() (*map[string]int64, bool) {
	if o == nil || IsNil(o.Entitled) {
		return nil, false
	}
	return o.Entitled, true
}

// HasEntitled returns a boolean if a field has been set.
func (o *UserClassAllocationResponse) HasEntitled() bool {
	if o != nil && !IsNil(o.Entitled) {
		return true
	}

	return false
}

// SetEntitled gets a reference to the given map[string]int64 and assigns it to the Entitled field.
func (o *UserClassAllocationResponse) SetEntitled(v map[string]int64) {
	o.Entitled = &v
}

// GetAllocations returns the Allocations field value if set, zero value otherwise.
func (o *UserClassAllocationResponse) GetAllocations() map[string]string {
	if o == nil || IsNil(o.Allocations) {
		var ret map[string]string
		return ret
	}
	return *o.Allocations
}

// GetAllocationsOk returns a tuple with the Allocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserClassAllocationResponse) GetAllocationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Allocations) {
		return nil, false
	}
	return o.Allocations, true
}

// HasAllocations returns a boolean if a field has been set.
func (o *UserClassAllocationResponse) HasAllocations() bool {
	if o != nil && !IsNil(o.Allocations) {
		return true
	}

	return false
}

// SetAllocations gets a reference to the given map[string]string and assigns it to the Allocations field.
func (o *UserClassAllocationResponse) SetAllocations(v map[string]string) {
	o.Allocations = &v
}

func (o UserClassAllocationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserClassAllocationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.Exceeded) {
		toSerialize["exceeded"] = o.Exceeded
	}
	if !IsNil(o.Entitled) {
		toSerialize["entitled"] = o.Entitled
	}
	if !IsNil(o.Allocations) {
		toSerialize["allocations"] = o.Allocations
	}
	return toSerialize, nil
}

type NullableUserClassAllocationResponse struct {
	value *UserClassAllocationResponse
	isSet bool
}

func (v NullableUserClassAllocationResponse) Get() *UserClassAllocationResponse {
	return v.value
}

func (v *NullableUserClassAllocationResponse) Set(val *UserClassAllocationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserClassAllocationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserClassAllocationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserClassAllocationResponse(val *UserClassAllocationResponse) *NullableUserClassAllocationResponse {
	return &NullableUserClassAllocationResponse{value: val, isSet: true}
}

func (v NullableUserClassAllocationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserClassAllocationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


