/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RunnerInstallationType the model 'RunnerInstallationType'
type RunnerInstallationType string

// List of RunnerInstallationType
const (
	LINUX RunnerInstallationType = "LINUX"
	WINDOWS RunnerInstallationType = "WINDOWS"
	KUBERNETES RunnerInstallationType = "KUBERNETES"
	DOCKER RunnerInstallationType = "DOCKER"
)

// All allowed values of RunnerInstallationType enum
var AllowedRunnerInstallationTypeEnumValues = []RunnerInstallationType{
	"LINUX",
	"WINDOWS",
	"KUBERNETES",
	"DOCKER",
}

func (v *RunnerInstallationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RunnerInstallationType(value)
	for _, existing := range AllowedRunnerInstallationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RunnerInstallationType", value)
}

// NewRunnerInstallationTypeFromValue returns a pointer to a valid RunnerInstallationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRunnerInstallationTypeFromValue(v string) (*RunnerInstallationType, error) {
	ev := RunnerInstallationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RunnerInstallationType: valid values are %v", v, AllowedRunnerInstallationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RunnerInstallationType) IsValid() bool {
	for _, existing := range AllowedRunnerInstallationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RunnerInstallationType value
func (v RunnerInstallationType) Ptr() *RunnerInstallationType {
	return &v
}

type NullableRunnerInstallationType struct {
	value *RunnerInstallationType
	isSet bool
}

func (v NullableRunnerInstallationType) Get() *RunnerInstallationType {
	return v.value
}

func (v *NullableRunnerInstallationType) Set(val *RunnerInstallationType) {
	v.value = val
	v.isSet = true
}

func (v NullableRunnerInstallationType) IsSet() bool {
	return v.isSet
}

func (v *NullableRunnerInstallationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunnerInstallationType(val *RunnerInstallationType) *NullableRunnerInstallationType {
	return &NullableRunnerInstallationType{value: val, isSet: true}
}

func (v NullableRunnerInstallationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunnerInstallationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

