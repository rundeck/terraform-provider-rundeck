/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScmAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScmAction{}

// ScmAction struct for ScmAction
type ScmAction struct {
	// input fields for the action
	Input *map[string]string `json:"input,omitempty"`
	// list of selected item IDs
	Items []string `json:"items,omitempty"`
	// list of selected Job IDs
	Jobs []string `json:"jobs,omitempty"`
	// list of deleted item IDs
	Deleted []string `json:"deleted,omitempty"`
	// list of deleted Job IDs (import)
	DeletedJobs []string `json:"deletedJobs,omitempty"`
}

// NewScmAction instantiates a new ScmAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScmAction() *ScmAction {
	this := ScmAction{}
	return &this
}

// NewScmActionWithDefaults instantiates a new ScmAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScmActionWithDefaults() *ScmAction {
	this := ScmAction{}
	return &this
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *ScmAction) GetInput() map[string]string {
	if o == nil || IsNil(o.Input) {
		var ret map[string]string
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmAction) GetInputOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Input) {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *ScmAction) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given map[string]string and assigns it to the Input field.
func (o *ScmAction) SetInput(v map[string]string) {
	o.Input = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ScmAction) GetItems() []string {
	if o == nil || IsNil(o.Items) {
		var ret []string
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmAction) GetItemsOk() ([]string, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ScmAction) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []string and assigns it to the Items field.
func (o *ScmAction) SetItems(v []string) {
	o.Items = v
}

// GetJobs returns the Jobs field value if set, zero value otherwise.
func (o *ScmAction) GetJobs() []string {
	if o == nil || IsNil(o.Jobs) {
		var ret []string
		return ret
	}
	return o.Jobs
}

// GetJobsOk returns a tuple with the Jobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmAction) GetJobsOk() ([]string, bool) {
	if o == nil || IsNil(o.Jobs) {
		return nil, false
	}
	return o.Jobs, true
}

// HasJobs returns a boolean if a field has been set.
func (o *ScmAction) HasJobs() bool {
	if o != nil && !IsNil(o.Jobs) {
		return true
	}

	return false
}

// SetJobs gets a reference to the given []string and assigns it to the Jobs field.
func (o *ScmAction) SetJobs(v []string) {
	o.Jobs = v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *ScmAction) GetDeleted() []string {
	if o == nil || IsNil(o.Deleted) {
		var ret []string
		return ret
	}
	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmAction) GetDeletedOk() ([]string, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *ScmAction) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given []string and assigns it to the Deleted field.
func (o *ScmAction) SetDeleted(v []string) {
	o.Deleted = v
}

// GetDeletedJobs returns the DeletedJobs field value if set, zero value otherwise.
func (o *ScmAction) GetDeletedJobs() []string {
	if o == nil || IsNil(o.DeletedJobs) {
		var ret []string
		return ret
	}
	return o.DeletedJobs
}

// GetDeletedJobsOk returns a tuple with the DeletedJobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmAction) GetDeletedJobsOk() ([]string, bool) {
	if o == nil || IsNil(o.DeletedJobs) {
		return nil, false
	}
	return o.DeletedJobs, true
}

// HasDeletedJobs returns a boolean if a field has been set.
func (o *ScmAction) HasDeletedJobs() bool {
	if o != nil && !IsNil(o.DeletedJobs) {
		return true
	}

	return false
}

// SetDeletedJobs gets a reference to the given []string and assigns it to the DeletedJobs field.
func (o *ScmAction) SetDeletedJobs(v []string) {
	o.DeletedJobs = v
}

func (o ScmAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScmAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.Jobs) {
		toSerialize["jobs"] = o.Jobs
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.DeletedJobs) {
		toSerialize["deletedJobs"] = o.DeletedJobs
	}
	return toSerialize, nil
}

type NullableScmAction struct {
	value *ScmAction
	isSet bool
}

func (v NullableScmAction) Get() *ScmAction {
	return v.value
}

func (v *NullableScmAction) Set(val *ScmAction) {
	v.value = val
	v.isSet = true
}

func (v NullableScmAction) IsSet() bool {
	return v.isSet
}

func (v *NullableScmAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScmAction(val *ScmAction) *NullableScmAction {
	return &NullableScmAction{value: val, isSet: true}
}

func (v NullableScmAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScmAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


