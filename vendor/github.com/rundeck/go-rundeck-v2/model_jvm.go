/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Jvm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Jvm{}

// Jvm Jvm System Information
type Jvm struct {
	Name *string `json:"name,omitempty"`
	Vendor *string `json:"vendor,omitempty"`
	Version *string `json:"version,omitempty"`
	ImplementationVersion *string `json:"implementationVersion,omitempty"`
}

// NewJvm instantiates a new Jvm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJvm() *Jvm {
	this := Jvm{}
	return &this
}

// NewJvmWithDefaults instantiates a new Jvm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJvmWithDefaults() *Jvm {
	this := Jvm{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Jvm) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jvm) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Jvm) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Jvm) SetName(v string) {
	o.Name = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *Jvm) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jvm) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *Jvm) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *Jvm) SetVendor(v string) {
	o.Vendor = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Jvm) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jvm) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Jvm) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Jvm) SetVersion(v string) {
	o.Version = &v
}

// GetImplementationVersion returns the ImplementationVersion field value if set, zero value otherwise.
func (o *Jvm) GetImplementationVersion() string {
	if o == nil || IsNil(o.ImplementationVersion) {
		var ret string
		return ret
	}
	return *o.ImplementationVersion
}

// GetImplementationVersionOk returns a tuple with the ImplementationVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Jvm) GetImplementationVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ImplementationVersion) {
		return nil, false
	}
	return o.ImplementationVersion, true
}

// HasImplementationVersion returns a boolean if a field has been set.
func (o *Jvm) HasImplementationVersion() bool {
	if o != nil && !IsNil(o.ImplementationVersion) {
		return true
	}

	return false
}

// SetImplementationVersion gets a reference to the given string and assigns it to the ImplementationVersion field.
func (o *Jvm) SetImplementationVersion(v string) {
	o.ImplementationVersion = &v
}

func (o Jvm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Jvm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.ImplementationVersion) {
		toSerialize["implementationVersion"] = o.ImplementationVersion
	}
	return toSerialize, nil
}

type NullableJvm struct {
	value *Jvm
	isSet bool
}

func (v NullableJvm) Get() *Jvm {
	return v.value
}

func (v *NullableJvm) Set(val *Jvm) {
	v.value = val
	v.isSet = true
}

func (v NullableJvm) IsSet() bool {
	return v.isSet
}

func (v *NullableJvm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJvm(val *Jvm) *NullableJvm {
	return &NullableJvm{value: val, isSet: true}
}

func (v NullableJvm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJvm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


