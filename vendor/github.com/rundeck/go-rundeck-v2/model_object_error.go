/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObjectError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectError{}

// ObjectError struct for ObjectError
type ObjectError struct {
	DefaultMessage *string `json:"defaultMessage,omitempty"`
	Arguments []map[string]interface{} `json:"arguments,omitempty"`
	Codes []string `json:"codes,omitempty"`
	Code *string `json:"code,omitempty"`
	ObjectName string `json:"objectName"`
}

type _ObjectError ObjectError

// NewObjectError instantiates a new ObjectError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectError(objectName string) *ObjectError {
	this := ObjectError{}
	this.ObjectName = objectName
	return &this
}

// NewObjectErrorWithDefaults instantiates a new ObjectError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectErrorWithDefaults() *ObjectError {
	this := ObjectError{}
	return &this
}

// GetDefaultMessage returns the DefaultMessage field value if set, zero value otherwise.
func (o *ObjectError) GetDefaultMessage() string {
	if o == nil || IsNil(o.DefaultMessage) {
		var ret string
		return ret
	}
	return *o.DefaultMessage
}

// GetDefaultMessageOk returns a tuple with the DefaultMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectError) GetDefaultMessageOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultMessage) {
		return nil, false
	}
	return o.DefaultMessage, true
}

// HasDefaultMessage returns a boolean if a field has been set.
func (o *ObjectError) HasDefaultMessage() bool {
	if o != nil && !IsNil(o.DefaultMessage) {
		return true
	}

	return false
}

// SetDefaultMessage gets a reference to the given string and assigns it to the DefaultMessage field.
func (o *ObjectError) SetDefaultMessage(v string) {
	o.DefaultMessage = &v
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *ObjectError) GetArguments() []map[string]interface{} {
	if o == nil || IsNil(o.Arguments) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectError) GetArgumentsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Arguments) {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *ObjectError) HasArguments() bool {
	if o != nil && !IsNil(o.Arguments) {
		return true
	}

	return false
}

// SetArguments gets a reference to the given []map[string]interface{} and assigns it to the Arguments field.
func (o *ObjectError) SetArguments(v []map[string]interface{}) {
	o.Arguments = v
}

// GetCodes returns the Codes field value if set, zero value otherwise.
func (o *ObjectError) GetCodes() []string {
	if o == nil || IsNil(o.Codes) {
		var ret []string
		return ret
	}
	return o.Codes
}

// GetCodesOk returns a tuple with the Codes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectError) GetCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.Codes) {
		return nil, false
	}
	return o.Codes, true
}

// HasCodes returns a boolean if a field has been set.
func (o *ObjectError) HasCodes() bool {
	if o != nil && !IsNil(o.Codes) {
		return true
	}

	return false
}

// SetCodes gets a reference to the given []string and assigns it to the Codes field.
func (o *ObjectError) SetCodes(v []string) {
	o.Codes = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ObjectError) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectError) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ObjectError) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ObjectError) SetCode(v string) {
	o.Code = &v
}

// GetObjectName returns the ObjectName field value
func (o *ObjectError) GetObjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectName
}

// GetObjectNameOk returns a tuple with the ObjectName field value
// and a boolean to check if the value has been set.
func (o *ObjectError) GetObjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectName, true
}

// SetObjectName sets field value
func (o *ObjectError) SetObjectName(v string) {
	o.ObjectName = v
}

func (o ObjectError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultMessage) {
		toSerialize["defaultMessage"] = o.DefaultMessage
	}
	if !IsNil(o.Arguments) {
		toSerialize["arguments"] = o.Arguments
	}
	if !IsNil(o.Codes) {
		toSerialize["codes"] = o.Codes
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	toSerialize["objectName"] = o.ObjectName
	return toSerialize, nil
}

func (o *ObjectError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objectName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectError := _ObjectError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObjectError)

	if err != nil {
		return err
	}

	*o = ObjectError(varObjectError)

	return err
}

type NullableObjectError struct {
	value *ObjectError
	isSet bool
}

func (v NullableObjectError) Get() *ObjectError {
	return v.value
}

func (v *NullableObjectError) Set(val *ObjectError) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectError) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectError(val *ObjectError) *NullableObjectError {
	return &NullableObjectError{value: val, isSet: true}
}

func (v NullableObjectError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


