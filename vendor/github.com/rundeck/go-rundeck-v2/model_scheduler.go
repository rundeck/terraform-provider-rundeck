/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Scheduler type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Scheduler{}

// Scheduler Scheduler Information
type Scheduler struct {
	Running *int32 `json:"running,omitempty"`
	ThreadPoolSize *int32 `json:"threadPoolSize,omitempty"`
}

// NewScheduler instantiates a new Scheduler object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduler() *Scheduler {
	this := Scheduler{}
	return &this
}

// NewSchedulerWithDefaults instantiates a new Scheduler object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulerWithDefaults() *Scheduler {
	this := Scheduler{}
	return &this
}

// GetRunning returns the Running field value if set, zero value otherwise.
func (o *Scheduler) GetRunning() int32 {
	if o == nil || IsNil(o.Running) {
		var ret int32
		return ret
	}
	return *o.Running
}

// GetRunningOk returns a tuple with the Running field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduler) GetRunningOk() (*int32, bool) {
	if o == nil || IsNil(o.Running) {
		return nil, false
	}
	return o.Running, true
}

// HasRunning returns a boolean if a field has been set.
func (o *Scheduler) HasRunning() bool {
	if o != nil && !IsNil(o.Running) {
		return true
	}

	return false
}

// SetRunning gets a reference to the given int32 and assigns it to the Running field.
func (o *Scheduler) SetRunning(v int32) {
	o.Running = &v
}

// GetThreadPoolSize returns the ThreadPoolSize field value if set, zero value otherwise.
func (o *Scheduler) GetThreadPoolSize() int32 {
	if o == nil || IsNil(o.ThreadPoolSize) {
		var ret int32
		return ret
	}
	return *o.ThreadPoolSize
}

// GetThreadPoolSizeOk returns a tuple with the ThreadPoolSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Scheduler) GetThreadPoolSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.ThreadPoolSize) {
		return nil, false
	}
	return o.ThreadPoolSize, true
}

// HasThreadPoolSize returns a boolean if a field has been set.
func (o *Scheduler) HasThreadPoolSize() bool {
	if o != nil && !IsNil(o.ThreadPoolSize) {
		return true
	}

	return false
}

// SetThreadPoolSize gets a reference to the given int32 and assigns it to the ThreadPoolSize field.
func (o *Scheduler) SetThreadPoolSize(v int32) {
	o.ThreadPoolSize = &v
}

func (o Scheduler) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Scheduler) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Running) {
		toSerialize["running"] = o.Running
	}
	if !IsNil(o.ThreadPoolSize) {
		toSerialize["threadPoolSize"] = o.ThreadPoolSize
	}
	return toSerialize, nil
}

type NullableScheduler struct {
	value *Scheduler
	isSet bool
}

func (v NullableScheduler) Get() *Scheduler {
	return v.value
}

func (v *NullableScheduler) Set(val *Scheduler) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduler) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduler) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduler(val *Scheduler) *NullableScheduler {
	return &NullableScheduler{value: val, isSet: true}
}

func (v NullableScheduler) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduler) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


