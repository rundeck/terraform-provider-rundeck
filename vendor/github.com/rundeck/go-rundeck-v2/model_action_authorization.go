/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ActionAuthorization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionAuthorization{}

// ActionAuthorization Action authorization
type ActionAuthorization struct {
	// Action name
	ActionName string `json:"actionName"`
	// Action authorization flag
	IsAuthorized bool `json:"isAuthorized"`
}

type _ActionAuthorization ActionAuthorization

// NewActionAuthorization instantiates a new ActionAuthorization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionAuthorization(actionName string, isAuthorized bool) *ActionAuthorization {
	this := ActionAuthorization{}
	this.ActionName = actionName
	this.IsAuthorized = isAuthorized
	return &this
}

// NewActionAuthorizationWithDefaults instantiates a new ActionAuthorization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionAuthorizationWithDefaults() *ActionAuthorization {
	this := ActionAuthorization{}
	return &this
}

// GetActionName returns the ActionName field value
func (o *ActionAuthorization) GetActionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActionName
}

// GetActionNameOk returns a tuple with the ActionName field value
// and a boolean to check if the value has been set.
func (o *ActionAuthorization) GetActionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionName, true
}

// SetActionName sets field value
func (o *ActionAuthorization) SetActionName(v string) {
	o.ActionName = v
}

// GetIsAuthorized returns the IsAuthorized field value
func (o *ActionAuthorization) GetIsAuthorized() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAuthorized
}

// GetIsAuthorizedOk returns a tuple with the IsAuthorized field value
// and a boolean to check if the value has been set.
func (o *ActionAuthorization) GetIsAuthorizedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAuthorized, true
}

// SetIsAuthorized sets field value
func (o *ActionAuthorization) SetIsAuthorized(v bool) {
	o.IsAuthorized = v
}

func (o ActionAuthorization) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionAuthorization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["actionName"] = o.ActionName
	toSerialize["isAuthorized"] = o.IsAuthorized
	return toSerialize, nil
}

func (o *ActionAuthorization) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"actionName",
		"isAuthorized",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActionAuthorization := _ActionAuthorization{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActionAuthorization)

	if err != nil {
		return err
	}

	*o = ActionAuthorization(varActionAuthorization)

	return err
}

type NullableActionAuthorization struct {
	value *ActionAuthorization
	isSet bool
}

func (v NullableActionAuthorization) Get() *ActionAuthorization {
	return v.value
}

func (v *NullableActionAuthorization) Set(val *ActionAuthorization) {
	v.value = val
	v.isSet = true
}

func (v NullableActionAuthorization) IsSet() bool {
	return v.isSet
}

func (v *NullableActionAuthorization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionAuthorization(val *ActionAuthorization) *NullableActionAuthorization {
	return &NullableActionAuthorization{value: val, isSet: true}
}

func (v NullableActionAuthorization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionAuthorization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


