/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScmPluginList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScmPluginList{}

// ScmPluginList struct for ScmPluginList
type ScmPluginList struct {
	Integration *string `json:"integration,omitempty"`
	Plugins []ScmPluginDescription `json:"plugins,omitempty"`
}

// NewScmPluginList instantiates a new ScmPluginList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScmPluginList() *ScmPluginList {
	this := ScmPluginList{}
	return &this
}

// NewScmPluginListWithDefaults instantiates a new ScmPluginList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScmPluginListWithDefaults() *ScmPluginList {
	this := ScmPluginList{}
	return &this
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *ScmPluginList) GetIntegration() string {
	if o == nil || IsNil(o.Integration) {
		var ret string
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmPluginList) GetIntegrationOk() (*string, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *ScmPluginList) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given string and assigns it to the Integration field.
func (o *ScmPluginList) SetIntegration(v string) {
	o.Integration = &v
}

// GetPlugins returns the Plugins field value if set, zero value otherwise.
func (o *ScmPluginList) GetPlugins() []ScmPluginDescription {
	if o == nil || IsNil(o.Plugins) {
		var ret []ScmPluginDescription
		return ret
	}
	return o.Plugins
}

// GetPluginsOk returns a tuple with the Plugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmPluginList) GetPluginsOk() ([]ScmPluginDescription, bool) {
	if o == nil || IsNil(o.Plugins) {
		return nil, false
	}
	return o.Plugins, true
}

// HasPlugins returns a boolean if a field has been set.
func (o *ScmPluginList) HasPlugins() bool {
	if o != nil && !IsNil(o.Plugins) {
		return true
	}

	return false
}

// SetPlugins gets a reference to the given []ScmPluginDescription and assigns it to the Plugins field.
func (o *ScmPluginList) SetPlugins(v []ScmPluginDescription) {
	o.Plugins = v
}

func (o ScmPluginList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScmPluginList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	if !IsNil(o.Plugins) {
		toSerialize["plugins"] = o.Plugins
	}
	return toSerialize, nil
}

type NullableScmPluginList struct {
	value *ScmPluginList
	isSet bool
}

func (v NullableScmPluginList) Get() *ScmPluginList {
	return v.value
}

func (v *NullableScmPluginList) Set(val *ScmPluginList) {
	v.value = val
	v.isSet = true
}

func (v NullableScmPluginList) IsSet() bool {
	return v.isSet
}

func (v *NullableScmPluginList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScmPluginList(val *ScmPluginList) *NullableScmPluginList {
	return &NullableScmPluginList{value: val, isSet: true}
}

func (v NullableScmPluginList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScmPluginList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


