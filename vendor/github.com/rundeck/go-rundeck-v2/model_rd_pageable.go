/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RdPageable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RdPageable{}

// RdPageable struct for RdPageable
type RdPageable struct {
	Offset *int32 `json:"offset,omitempty"`
	Max *int32 `json:"max,omitempty"`
	Errors *Errors `json:"errors,omitempty"`
	SortOrders []SortOrder `json:"sortOrders,omitempty"`
}

// NewRdPageable instantiates a new RdPageable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRdPageable() *RdPageable {
	this := RdPageable{}
	return &this
}

// NewRdPageableWithDefaults instantiates a new RdPageable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRdPageableWithDefaults() *RdPageable {
	this := RdPageable{}
	return &this
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *RdPageable) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdPageable) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *RdPageable) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *RdPageable) SetOffset(v int32) {
	o.Offset = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *RdPageable) GetMax() int32 {
	if o == nil || IsNil(o.Max) {
		var ret int32
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdPageable) GetMaxOk() (*int32, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *RdPageable) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given int32 and assigns it to the Max field.
func (o *RdPageable) SetMax(v int32) {
	o.Max = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *RdPageable) GetErrors() Errors {
	if o == nil || IsNil(o.Errors) {
		var ret Errors
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdPageable) GetErrorsOk() (*Errors, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *RdPageable) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given Errors and assigns it to the Errors field.
func (o *RdPageable) SetErrors(v Errors) {
	o.Errors = &v
}

// GetSortOrders returns the SortOrders field value if set, zero value otherwise.
func (o *RdPageable) GetSortOrders() []SortOrder {
	if o == nil || IsNil(o.SortOrders) {
		var ret []SortOrder
		return ret
	}
	return o.SortOrders
}

// GetSortOrdersOk returns a tuple with the SortOrders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RdPageable) GetSortOrdersOk() ([]SortOrder, bool) {
	if o == nil || IsNil(o.SortOrders) {
		return nil, false
	}
	return o.SortOrders, true
}

// HasSortOrders returns a boolean if a field has been set.
func (o *RdPageable) HasSortOrders() bool {
	if o != nil && !IsNil(o.SortOrders) {
		return true
	}

	return false
}

// SetSortOrders gets a reference to the given []SortOrder and assigns it to the SortOrders field.
func (o *RdPageable) SetSortOrders(v []SortOrder) {
	o.SortOrders = v
}

func (o RdPageable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RdPageable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.SortOrders) {
		toSerialize["sortOrders"] = o.SortOrders
	}
	return toSerialize, nil
}

type NullableRdPageable struct {
	value *RdPageable
	isSet bool
}

func (v NullableRdPageable) Get() *RdPageable {
	return v.value
}

func (v *NullableRdPageable) Set(val *RdPageable) {
	v.value = val
	v.isSet = true
}

func (v NullableRdPageable) IsSet() bool {
	return v.isSet
}

func (v *NullableRdPageable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRdPageable(val *RdPageable) *NullableRdPageable {
	return &NullableRdPageable{value: val, isSet: true}
}

func (v NullableRdPageable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRdPageable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


