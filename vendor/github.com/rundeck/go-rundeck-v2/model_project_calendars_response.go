/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProjectCalendarsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectCalendarsResponse{}

// ProjectCalendarsResponse Response to POST request to to create or update a calendar at project level
type ProjectCalendarsResponse struct {
	Calendar *Calendar `json:"calendar,omitempty"`
	Msg *string `json:"msg,omitempty"`
	Saved *bool `json:"saved,omitempty"`
}

// NewProjectCalendarsResponse instantiates a new ProjectCalendarsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectCalendarsResponse() *ProjectCalendarsResponse {
	this := ProjectCalendarsResponse{}
	return &this
}

// NewProjectCalendarsResponseWithDefaults instantiates a new ProjectCalendarsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectCalendarsResponseWithDefaults() *ProjectCalendarsResponse {
	this := ProjectCalendarsResponse{}
	return &this
}

// GetCalendar returns the Calendar field value if set, zero value otherwise.
func (o *ProjectCalendarsResponse) GetCalendar() Calendar {
	if o == nil || IsNil(o.Calendar) {
		var ret Calendar
		return ret
	}
	return *o.Calendar
}

// GetCalendarOk returns a tuple with the Calendar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCalendarsResponse) GetCalendarOk() (*Calendar, bool) {
	if o == nil || IsNil(o.Calendar) {
		return nil, false
	}
	return o.Calendar, true
}

// HasCalendar returns a boolean if a field has been set.
func (o *ProjectCalendarsResponse) HasCalendar() bool {
	if o != nil && !IsNil(o.Calendar) {
		return true
	}

	return false
}

// SetCalendar gets a reference to the given Calendar and assigns it to the Calendar field.
func (o *ProjectCalendarsResponse) SetCalendar(v Calendar) {
	o.Calendar = &v
}

// GetMsg returns the Msg field value if set, zero value otherwise.
func (o *ProjectCalendarsResponse) GetMsg() string {
	if o == nil || IsNil(o.Msg) {
		var ret string
		return ret
	}
	return *o.Msg
}

// GetMsgOk returns a tuple with the Msg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCalendarsResponse) GetMsgOk() (*string, bool) {
	if o == nil || IsNil(o.Msg) {
		return nil, false
	}
	return o.Msg, true
}

// HasMsg returns a boolean if a field has been set.
func (o *ProjectCalendarsResponse) HasMsg() bool {
	if o != nil && !IsNil(o.Msg) {
		return true
	}

	return false
}

// SetMsg gets a reference to the given string and assigns it to the Msg field.
func (o *ProjectCalendarsResponse) SetMsg(v string) {
	o.Msg = &v
}

// GetSaved returns the Saved field value if set, zero value otherwise.
func (o *ProjectCalendarsResponse) GetSaved() bool {
	if o == nil || IsNil(o.Saved) {
		var ret bool
		return ret
	}
	return *o.Saved
}

// GetSavedOk returns a tuple with the Saved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCalendarsResponse) GetSavedOk() (*bool, bool) {
	if o == nil || IsNil(o.Saved) {
		return nil, false
	}
	return o.Saved, true
}

// HasSaved returns a boolean if a field has been set.
func (o *ProjectCalendarsResponse) HasSaved() bool {
	if o != nil && !IsNil(o.Saved) {
		return true
	}

	return false
}

// SetSaved gets a reference to the given bool and assigns it to the Saved field.
func (o *ProjectCalendarsResponse) SetSaved(v bool) {
	o.Saved = &v
}

func (o ProjectCalendarsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectCalendarsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Calendar) {
		toSerialize["calendar"] = o.Calendar
	}
	if !IsNil(o.Msg) {
		toSerialize["msg"] = o.Msg
	}
	if !IsNil(o.Saved) {
		toSerialize["saved"] = o.Saved
	}
	return toSerialize, nil
}

type NullableProjectCalendarsResponse struct {
	value *ProjectCalendarsResponse
	isSet bool
}

func (v NullableProjectCalendarsResponse) Get() *ProjectCalendarsResponse {
	return v.value
}

func (v *NullableProjectCalendarsResponse) Set(val *ProjectCalendarsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectCalendarsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectCalendarsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectCalendarsResponse(val *ProjectCalendarsResponse) *NullableProjectCalendarsResponse {
	return &NullableProjectCalendarsResponse{value: val, isSet: true}
}

func (v NullableProjectCalendarsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectCalendarsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


