/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScmPluginDescription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScmPluginDescription{}

// ScmPluginDescription struct for ScmPluginDescription
type ScmPluginDescription struct {
	Type *string `json:"type,omitempty"`
	Title *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	Configured *bool `json:"configured,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
}

// NewScmPluginDescription instantiates a new ScmPluginDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScmPluginDescription() *ScmPluginDescription {
	this := ScmPluginDescription{}
	return &this
}

// NewScmPluginDescriptionWithDefaults instantiates a new ScmPluginDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScmPluginDescriptionWithDefaults() *ScmPluginDescription {
	this := ScmPluginDescription{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ScmPluginDescription) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmPluginDescription) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ScmPluginDescription) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ScmPluginDescription) SetType(v string) {
	o.Type = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ScmPluginDescription) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmPluginDescription) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ScmPluginDescription) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ScmPluginDescription) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ScmPluginDescription) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmPluginDescription) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ScmPluginDescription) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ScmPluginDescription) SetDescription(v string) {
	o.Description = &v
}

// GetConfigured returns the Configured field value if set, zero value otherwise.
func (o *ScmPluginDescription) GetConfigured() bool {
	if o == nil || IsNil(o.Configured) {
		var ret bool
		return ret
	}
	return *o.Configured
}

// GetConfiguredOk returns a tuple with the Configured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmPluginDescription) GetConfiguredOk() (*bool, bool) {
	if o == nil || IsNil(o.Configured) {
		return nil, false
	}
	return o.Configured, true
}

// HasConfigured returns a boolean if a field has been set.
func (o *ScmPluginDescription) HasConfigured() bool {
	if o != nil && !IsNil(o.Configured) {
		return true
	}

	return false
}

// SetConfigured gets a reference to the given bool and assigns it to the Configured field.
func (o *ScmPluginDescription) SetConfigured(v bool) {
	o.Configured = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ScmPluginDescription) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmPluginDescription) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ScmPluginDescription) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ScmPluginDescription) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o ScmPluginDescription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScmPluginDescription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Configured) {
		toSerialize["configured"] = o.Configured
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableScmPluginDescription struct {
	value *ScmPluginDescription
	isSet bool
}

func (v NullableScmPluginDescription) Get() *ScmPluginDescription {
	return v.value
}

func (v *NullableScmPluginDescription) Set(val *ScmPluginDescription) {
	v.value = val
	v.isSet = true
}

func (v NullableScmPluginDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableScmPluginDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScmPluginDescription(val *ScmPluginDescription) *NullableScmPluginDescription {
	return &NullableScmPluginDescription{value: val, isSet: true}
}

func (v NullableScmPluginDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScmPluginDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


