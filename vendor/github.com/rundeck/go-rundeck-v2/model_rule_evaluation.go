/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RuleEvaluation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleEvaluation{}

// RuleEvaluation struct for RuleEvaluation
type RuleEvaluation struct {
	Satisfied *bool `json:"satisfied,omitempty"`
	Rule *RoutingRule `json:"rule,omitempty"`
	ConditionEvaluations []ConditionEvaluation `json:"conditionEvaluations,omitempty"`
}

// NewRuleEvaluation instantiates a new RuleEvaluation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleEvaluation() *RuleEvaluation {
	this := RuleEvaluation{}
	return &this
}

// NewRuleEvaluationWithDefaults instantiates a new RuleEvaluation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleEvaluationWithDefaults() *RuleEvaluation {
	this := RuleEvaluation{}
	return &this
}

// GetSatisfied returns the Satisfied field value if set, zero value otherwise.
func (o *RuleEvaluation) GetSatisfied() bool {
	if o == nil || IsNil(o.Satisfied) {
		var ret bool
		return ret
	}
	return *o.Satisfied
}

// GetSatisfiedOk returns a tuple with the Satisfied field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleEvaluation) GetSatisfiedOk() (*bool, bool) {
	if o == nil || IsNil(o.Satisfied) {
		return nil, false
	}
	return o.Satisfied, true
}

// HasSatisfied returns a boolean if a field has been set.
func (o *RuleEvaluation) HasSatisfied() bool {
	if o != nil && !IsNil(o.Satisfied) {
		return true
	}

	return false
}

// SetSatisfied gets a reference to the given bool and assigns it to the Satisfied field.
func (o *RuleEvaluation) SetSatisfied(v bool) {
	o.Satisfied = &v
}

// GetRule returns the Rule field value if set, zero value otherwise.
func (o *RuleEvaluation) GetRule() RoutingRule {
	if o == nil || IsNil(o.Rule) {
		var ret RoutingRule
		return ret
	}
	return *o.Rule
}

// GetRuleOk returns a tuple with the Rule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleEvaluation) GetRuleOk() (*RoutingRule, bool) {
	if o == nil || IsNil(o.Rule) {
		return nil, false
	}
	return o.Rule, true
}

// HasRule returns a boolean if a field has been set.
func (o *RuleEvaluation) HasRule() bool {
	if o != nil && !IsNil(o.Rule) {
		return true
	}

	return false
}

// SetRule gets a reference to the given RoutingRule and assigns it to the Rule field.
func (o *RuleEvaluation) SetRule(v RoutingRule) {
	o.Rule = &v
}

// GetConditionEvaluations returns the ConditionEvaluations field value if set, zero value otherwise.
func (o *RuleEvaluation) GetConditionEvaluations() []ConditionEvaluation {
	if o == nil || IsNil(o.ConditionEvaluations) {
		var ret []ConditionEvaluation
		return ret
	}
	return o.ConditionEvaluations
}

// GetConditionEvaluationsOk returns a tuple with the ConditionEvaluations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleEvaluation) GetConditionEvaluationsOk() ([]ConditionEvaluation, bool) {
	if o == nil || IsNil(o.ConditionEvaluations) {
		return nil, false
	}
	return o.ConditionEvaluations, true
}

// HasConditionEvaluations returns a boolean if a field has been set.
func (o *RuleEvaluation) HasConditionEvaluations() bool {
	if o != nil && !IsNil(o.ConditionEvaluations) {
		return true
	}

	return false
}

// SetConditionEvaluations gets a reference to the given []ConditionEvaluation and assigns it to the ConditionEvaluations field.
func (o *RuleEvaluation) SetConditionEvaluations(v []ConditionEvaluation) {
	o.ConditionEvaluations = v
}

func (o RuleEvaluation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleEvaluation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Satisfied) {
		toSerialize["satisfied"] = o.Satisfied
	}
	if !IsNil(o.Rule) {
		toSerialize["rule"] = o.Rule
	}
	if !IsNil(o.ConditionEvaluations) {
		toSerialize["conditionEvaluations"] = o.ConditionEvaluations
	}
	return toSerialize, nil
}

type NullableRuleEvaluation struct {
	value *RuleEvaluation
	isSet bool
}

func (v NullableRuleEvaluation) Get() *RuleEvaluation {
	return v.value
}

func (v *NullableRuleEvaluation) Set(val *RuleEvaluation) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleEvaluation) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleEvaluation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleEvaluation(val *RuleEvaluation) *NullableRuleEvaluation {
	return &NullableRuleEvaluation{value: val, isSet: true}
}

func (v NullableRuleEvaluation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleEvaluation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


