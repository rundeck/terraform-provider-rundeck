/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SystemExecutionModeAPIService SystemExecutionModeAPI service
type SystemExecutionModeAPIService service

type ApiApiExecutionModeLaterActiveRequest struct {
	ctx context.Context
	ApiService *SystemExecutionModeAPIService
	modeLaterRequest *ModeLaterRequest
}

// Enable Executions. Specify a &#x60;value&#x60; with a time duration expression. (See request schema for syntax.) 
func (r ApiApiExecutionModeLaterActiveRequest) ModeLaterRequest(modeLaterRequest ModeLaterRequest) ApiApiExecutionModeLaterActiveRequest {
	r.modeLaterRequest = &modeLaterRequest
	return r
}

func (r ApiApiExecutionModeLaterActiveRequest) Execute() (*ModeLaterResponse, *http.Response, error) {
	return r.ApiService.ApiExecutionModeLaterActiveExecute(r)
}

/*
ApiExecutionModeLaterActive Enable System executions after a duration of time

Sets System execution mode to Active at a later time.

Since: v34


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiExecutionModeLaterActiveRequest
*/
func (a *SystemExecutionModeAPIService) ApiExecutionModeLaterActive(ctx context.Context) ApiApiExecutionModeLaterActiveRequest {
	return ApiApiExecutionModeLaterActiveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModeLaterResponse
func (a *SystemExecutionModeAPIService) ApiExecutionModeLaterActiveExecute(r ApiApiExecutionModeLaterActiveRequest) (*ModeLaterResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModeLaterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemExecutionModeAPIService.ApiExecutionModeLaterActive")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/executions/enable/later"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.modeLaterRequest == nil {
		return localVarReturnValue, nil, reportError("modeLaterRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.modeLaterRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["rundeckApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Rundeck-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModeLaterResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiExecutionModeLaterPassiveRequest struct {
	ctx context.Context
	ApiService *SystemExecutionModeAPIService
	modeLaterRequest *ModeLaterRequest
}

// Disable Executions. Specify a &#x60;value&#x60; with a time duration expression. (See request schema for syntax.) 
func (r ApiApiExecutionModeLaterPassiveRequest) ModeLaterRequest(modeLaterRequest ModeLaterRequest) ApiApiExecutionModeLaterPassiveRequest {
	r.modeLaterRequest = &modeLaterRequest
	return r
}

func (r ApiApiExecutionModeLaterPassiveRequest) Execute() (*ModeLaterResponse, *http.Response, error) {
	return r.ApiService.ApiExecutionModeLaterPassiveExecute(r)
}

/*
ApiExecutionModeLaterPassive Disable System executions after a duration of time

Sets System execution mode to Passive at a later time.

Since: v34


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiExecutionModeLaterPassiveRequest
*/
func (a *SystemExecutionModeAPIService) ApiExecutionModeLaterPassive(ctx context.Context) ApiApiExecutionModeLaterPassiveRequest {
	return ApiApiExecutionModeLaterPassiveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModeLaterResponse
func (a *SystemExecutionModeAPIService) ApiExecutionModeLaterPassiveExecute(r ApiApiExecutionModeLaterPassiveRequest) (*ModeLaterResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModeLaterResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemExecutionModeAPIService.ApiExecutionModeLaterPassive")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/executions/disable/later"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.modeLaterRequest == nil {
		return localVarReturnValue, nil, reportError("modeLaterRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.modeLaterRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["rundeckApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Rundeck-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModeLaterResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
