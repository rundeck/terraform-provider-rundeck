/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Ping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ping{}

// Ping Ping Information
type Ping struct {
	Href *string `json:"href,omitempty"`
	ContentType *string `json:"contentType,omitempty"`
}

// NewPing instantiates a new Ping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPing() *Ping {
	this := Ping{}
	return &this
}

// NewPingWithDefaults instantiates a new Ping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPingWithDefaults() *Ping {
	this := Ping{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *Ping) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ping) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *Ping) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *Ping) SetHref(v string) {
	o.Href = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *Ping) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ping) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *Ping) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *Ping) SetContentType(v string) {
	o.ContentType = &v
}

func (o Ping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !IsNil(o.ContentType) {
		toSerialize["contentType"] = o.ContentType
	}
	return toSerialize, nil
}

type NullablePing struct {
	value *Ping
	isSet bool
}

func (v NullablePing) Get() *Ping {
	return v.value
}

func (v *NullablePing) Set(val *Ping) {
	v.value = val
	v.isSet = true
}

func (v NullablePing) IsSet() bool {
	return v.isSet
}

func (v *NullablePing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePing(val *Ping) *NullablePing {
	return &NullablePing{value: val, isSet: true}
}

func (v NullablePing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


