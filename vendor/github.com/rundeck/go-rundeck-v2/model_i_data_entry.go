/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IDataEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IDataEntry{}

// IDataEntry struct for IDataEntry
type IDataEntry struct {
	Key *string `json:"key,omitempty"`
	Value map[string]interface{} `json:"value,omitempty"`
	Description *string `json:"description,omitempty"`
	Label *string `json:"label,omitempty"`
	Unit *string `json:"unit,omitempty"`
	Status *string `json:"status,omitempty"`
	Secured *bool `json:"secured,omitempty"`
	Concealed *bool `json:"concealed,omitempty"`
	Whitelist *bool `json:"whitelist,omitempty"`
}

// NewIDataEntry instantiates a new IDataEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIDataEntry() *IDataEntry {
	this := IDataEntry{}
	return &this
}

// NewIDataEntryWithDefaults instantiates a new IDataEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIDataEntryWithDefaults() *IDataEntry {
	this := IDataEntry{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *IDataEntry) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDataEntry) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *IDataEntry) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *IDataEntry) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *IDataEntry) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDataEntry) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *IDataEntry) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *IDataEntry) SetValue(v map[string]interface{}) {
	o.Value = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IDataEntry) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDataEntry) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IDataEntry) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IDataEntry) SetDescription(v string) {
	o.Description = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *IDataEntry) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDataEntry) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *IDataEntry) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *IDataEntry) SetLabel(v string) {
	o.Label = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *IDataEntry) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDataEntry) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *IDataEntry) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *IDataEntry) SetUnit(v string) {
	o.Unit = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IDataEntry) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDataEntry) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IDataEntry) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *IDataEntry) SetStatus(v string) {
	o.Status = &v
}

// GetSecured returns the Secured field value if set, zero value otherwise.
func (o *IDataEntry) GetSecured() bool {
	if o == nil || IsNil(o.Secured) {
		var ret bool
		return ret
	}
	return *o.Secured
}

// GetSecuredOk returns a tuple with the Secured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDataEntry) GetSecuredOk() (*bool, bool) {
	if o == nil || IsNil(o.Secured) {
		return nil, false
	}
	return o.Secured, true
}

// HasSecured returns a boolean if a field has been set.
func (o *IDataEntry) HasSecured() bool {
	if o != nil && !IsNil(o.Secured) {
		return true
	}

	return false
}

// SetSecured gets a reference to the given bool and assigns it to the Secured field.
func (o *IDataEntry) SetSecured(v bool) {
	o.Secured = &v
}

// GetConcealed returns the Concealed field value if set, zero value otherwise.
func (o *IDataEntry) GetConcealed() bool {
	if o == nil || IsNil(o.Concealed) {
		var ret bool
		return ret
	}
	return *o.Concealed
}

// GetConcealedOk returns a tuple with the Concealed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDataEntry) GetConcealedOk() (*bool, bool) {
	if o == nil || IsNil(o.Concealed) {
		return nil, false
	}
	return o.Concealed, true
}

// HasConcealed returns a boolean if a field has been set.
func (o *IDataEntry) HasConcealed() bool {
	if o != nil && !IsNil(o.Concealed) {
		return true
	}

	return false
}

// SetConcealed gets a reference to the given bool and assigns it to the Concealed field.
func (o *IDataEntry) SetConcealed(v bool) {
	o.Concealed = &v
}

// GetWhitelist returns the Whitelist field value if set, zero value otherwise.
func (o *IDataEntry) GetWhitelist() bool {
	if o == nil || IsNil(o.Whitelist) {
		var ret bool
		return ret
	}
	return *o.Whitelist
}

// GetWhitelistOk returns a tuple with the Whitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IDataEntry) GetWhitelistOk() (*bool, bool) {
	if o == nil || IsNil(o.Whitelist) {
		return nil, false
	}
	return o.Whitelist, true
}

// HasWhitelist returns a boolean if a field has been set.
func (o *IDataEntry) HasWhitelist() bool {
	if o != nil && !IsNil(o.Whitelist) {
		return true
	}

	return false
}

// SetWhitelist gets a reference to the given bool and assigns it to the Whitelist field.
func (o *IDataEntry) SetWhitelist(v bool) {
	o.Whitelist = &v
}

func (o IDataEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IDataEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Secured) {
		toSerialize["secured"] = o.Secured
	}
	if !IsNil(o.Concealed) {
		toSerialize["concealed"] = o.Concealed
	}
	if !IsNil(o.Whitelist) {
		toSerialize["whitelist"] = o.Whitelist
	}
	return toSerialize, nil
}

type NullableIDataEntry struct {
	value *IDataEntry
	isSet bool
}

func (v NullableIDataEntry) Get() *IDataEntry {
	return v.value
}

func (v *NullableIDataEntry) Set(val *IDataEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableIDataEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableIDataEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIDataEntry(val *IDataEntry) *NullableIDataEntry {
	return &NullableIDataEntry{value: val, isSet: true}
}

func (v NullableIDataEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIDataEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


