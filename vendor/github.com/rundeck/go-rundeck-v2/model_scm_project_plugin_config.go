/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScmProjectPluginConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScmProjectPluginConfig{}

// ScmProjectPluginConfig struct for ScmProjectPluginConfig
type ScmProjectPluginConfig struct {
	Integration *string `json:"integration,omitempty"`
	// project name
	Project *string `json:"project,omitempty"`
	// plugin type name
	Type *string `json:"type,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	//  set of key/value pairs for the configuration
	Config *map[string]string `json:"config,omitempty"`
}

// NewScmProjectPluginConfig instantiates a new ScmProjectPluginConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScmProjectPluginConfig() *ScmProjectPluginConfig {
	this := ScmProjectPluginConfig{}
	return &this
}

// NewScmProjectPluginConfigWithDefaults instantiates a new ScmProjectPluginConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScmProjectPluginConfigWithDefaults() *ScmProjectPluginConfig {
	this := ScmProjectPluginConfig{}
	return &this
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *ScmProjectPluginConfig) GetIntegration() string {
	if o == nil || IsNil(o.Integration) {
		var ret string
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmProjectPluginConfig) GetIntegrationOk() (*string, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *ScmProjectPluginConfig) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given string and assigns it to the Integration field.
func (o *ScmProjectPluginConfig) SetIntegration(v string) {
	o.Integration = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *ScmProjectPluginConfig) GetProject() string {
	if o == nil || IsNil(o.Project) {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmProjectPluginConfig) GetProjectOk() (*string, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *ScmProjectPluginConfig) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *ScmProjectPluginConfig) SetProject(v string) {
	o.Project = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ScmProjectPluginConfig) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmProjectPluginConfig) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ScmProjectPluginConfig) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ScmProjectPluginConfig) SetType(v string) {
	o.Type = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ScmProjectPluginConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmProjectPluginConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ScmProjectPluginConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ScmProjectPluginConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ScmProjectPluginConfig) GetConfig() map[string]string {
	if o == nil || IsNil(o.Config) {
		var ret map[string]string
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmProjectPluginConfig) GetConfigOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ScmProjectPluginConfig) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]string and assigns it to the Config field.
func (o *ScmProjectPluginConfig) SetConfig(v map[string]string) {
	o.Config = &v
}

func (o ScmProjectPluginConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScmProjectPluginConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	return toSerialize, nil
}

type NullableScmProjectPluginConfig struct {
	value *ScmProjectPluginConfig
	isSet bool
}

func (v NullableScmProjectPluginConfig) Get() *ScmProjectPluginConfig {
	return v.value
}

func (v *NullableScmProjectPluginConfig) Set(val *ScmProjectPluginConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableScmProjectPluginConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableScmProjectPluginConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScmProjectPluginConfig(val *ScmProjectPluginConfig) *NullableScmProjectPluginConfig {
	return &NullableScmProjectPluginConfig{value: val, isSet: true}
}

func (v NullableScmProjectPluginConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScmProjectPluginConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


