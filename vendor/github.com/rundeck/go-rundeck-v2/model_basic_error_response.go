/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BasicErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BasicErrorResponse{}

// BasicErrorResponse struct for BasicErrorResponse
type BasicErrorResponse struct {
	Error *bool `json:"error,omitempty"`
	Apiversion *int32 `json:"apiversion,omitempty"`
	ErrorCode *string `json:"errorCode,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NewBasicErrorResponse instantiates a new BasicErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasicErrorResponse() *BasicErrorResponse {
	this := BasicErrorResponse{}
	return &this
}

// NewBasicErrorResponseWithDefaults instantiates a new BasicErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasicErrorResponseWithDefaults() *BasicErrorResponse {
	this := BasicErrorResponse{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *BasicErrorResponse) GetError() bool {
	if o == nil || IsNil(o.Error) {
		var ret bool
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicErrorResponse) GetErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *BasicErrorResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given bool and assigns it to the Error field.
func (o *BasicErrorResponse) SetError(v bool) {
	o.Error = &v
}

// GetApiversion returns the Apiversion field value if set, zero value otherwise.
func (o *BasicErrorResponse) GetApiversion() int32 {
	if o == nil || IsNil(o.Apiversion) {
		var ret int32
		return ret
	}
	return *o.Apiversion
}

// GetApiversionOk returns a tuple with the Apiversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicErrorResponse) GetApiversionOk() (*int32, bool) {
	if o == nil || IsNil(o.Apiversion) {
		return nil, false
	}
	return o.Apiversion, true
}

// HasApiversion returns a boolean if a field has been set.
func (o *BasicErrorResponse) HasApiversion() bool {
	if o != nil && !IsNil(o.Apiversion) {
		return true
	}

	return false
}

// SetApiversion gets a reference to the given int32 and assigns it to the Apiversion field.
func (o *BasicErrorResponse) SetApiversion(v int32) {
	o.Apiversion = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *BasicErrorResponse) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicErrorResponse) GetErrorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *BasicErrorResponse) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *BasicErrorResponse) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *BasicErrorResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicErrorResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *BasicErrorResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *BasicErrorResponse) SetMessage(v string) {
	o.Message = &v
}

func (o BasicErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BasicErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Apiversion) {
		toSerialize["apiversion"] = o.Apiversion
	}
	if !IsNil(o.ErrorCode) {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableBasicErrorResponse struct {
	value *BasicErrorResponse
	isSet bool
}

func (v NullableBasicErrorResponse) Get() *BasicErrorResponse {
	return v.value
}

func (v *NullableBasicErrorResponse) Set(val *BasicErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicErrorResponse(val *BasicErrorResponse) *NullableBasicErrorResponse {
	return &NullableBasicErrorResponse{value: val, isSet: true}
}

func (v NullableBasicErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


