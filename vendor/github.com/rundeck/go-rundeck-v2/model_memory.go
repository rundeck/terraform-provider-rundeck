/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Memory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Memory{}

// Memory Memory Information
type Memory struct {
	Unit *string `json:"unit,omitempty"`
	Max *int64 `json:"max,omitempty"`
	Free *int64 `json:"free,omitempty"`
	Total *int64 `json:"total,omitempty"`
}

// NewMemory instantiates a new Memory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemory() *Memory {
	this := Memory{}
	return &this
}

// NewMemoryWithDefaults instantiates a new Memory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemoryWithDefaults() *Memory {
	this := Memory{}
	return &this
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *Memory) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Memory) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *Memory) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *Memory) SetUnit(v string) {
	o.Unit = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *Memory) GetMax() int64 {
	if o == nil || IsNil(o.Max) {
		var ret int64
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Memory) GetMaxOk() (*int64, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *Memory) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given int64 and assigns it to the Max field.
func (o *Memory) SetMax(v int64) {
	o.Max = &v
}

// GetFree returns the Free field value if set, zero value otherwise.
func (o *Memory) GetFree() int64 {
	if o == nil || IsNil(o.Free) {
		var ret int64
		return ret
	}
	return *o.Free
}

// GetFreeOk returns a tuple with the Free field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Memory) GetFreeOk() (*int64, bool) {
	if o == nil || IsNil(o.Free) {
		return nil, false
	}
	return o.Free, true
}

// HasFree returns a boolean if a field has been set.
func (o *Memory) HasFree() bool {
	if o != nil && !IsNil(o.Free) {
		return true
	}

	return false
}

// SetFree gets a reference to the given int64 and assigns it to the Free field.
func (o *Memory) SetFree(v int64) {
	o.Free = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *Memory) GetTotal() int64 {
	if o == nil || IsNil(o.Total) {
		var ret int64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Memory) GetTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *Memory) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int64 and assigns it to the Total field.
func (o *Memory) SetTotal(v int64) {
	o.Total = &v
}

func (o Memory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Memory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Free) {
		toSerialize["free"] = o.Free
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

type NullableMemory struct {
	value *Memory
	isSet bool
}

func (v NullableMemory) Get() *Memory {
	return v.value
}

func (v *NullableMemory) Set(val *Memory) {
	v.value = val
	v.isSet = true
}

func (v NullableMemory) IsSet() bool {
	return v.isSet
}

func (v *NullableMemory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemory(val *Memory) *NullableMemory {
	return &NullableMemory{value: val, isSet: true}
}

func (v NullableMemory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


