/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type ApiApiValidateOptionRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	project string
	jobWasScheduled *bool
	apiValidateOptionRequest *ApiValidateOptionRequest
}

// True if job was scheduled
func (r ApiApiValidateOptionRequest) JobWasScheduled(jobWasScheduled bool) ApiApiValidateOptionRequest {
	r.jobWasScheduled = &jobWasScheduled
	return r
}

// Option validation request
func (r ApiApiValidateOptionRequest) ApiValidateOptionRequest(apiValidateOptionRequest ApiValidateOptionRequest) ApiApiValidateOptionRequest {
	r.apiValidateOptionRequest = &apiValidateOptionRequest
	return r
}

func (r ApiApiValidateOptionRequest) Execute() (*OptionValidateResponse, *http.Response, error) {
	return r.ApiService.ApiValidateOptionExecute(r)
}

/*
ApiValidateOption Validate an option

Validates an option defintion for a job, returns any validation errors.

If any validation errors occur, the response will use code 400, otherwise 200 will be returned.

The request body should be a JSON object describing a Job Option definition, 
and a `jobWasScheduled` parameter to indicate if the job was scheduled.

The data format corresponds with a Job Option definition in Job JSON format, with these additional fields:

* `remoteUrlAuthenticationType`: the type of authentication to use for a remote URL
* `configRemoteUrl`: a configuration object for the remote URL values
* `valuesType`: indicates the type of chosen values list, one of "url", "list", or a Option Values plugin type.


Since: V47

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param project Project name
 @return ApiApiValidateOptionRequest
*/
func (a *DefaultAPIService) ApiValidateOption(ctx context.Context, project string) ApiApiValidateOptionRequest {
	return ApiApiValidateOptionRequest{
		ApiService: a,
		ctx: ctx,
		project: project,
	}
}

// Execute executes the request
//  @return OptionValidateResponse
func (a *DefaultAPIService) ApiValidateOptionExecute(r ApiApiValidateOptionRequest) (*OptionValidateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OptionValidateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ApiValidateOption")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project}/jobs/validateOption"
	localVarPath = strings.Replace(localVarPath, "{"+"project"+"}", url.PathEscape(parameterValueToString(r.project, "project")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jobWasScheduled == nil {
		return localVarReturnValue, nil, reportError("jobWasScheduled is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "jobWasScheduled", r.jobWasScheduled, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiValidateOptionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["rundeckApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Rundeck-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v OptionValidateResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
