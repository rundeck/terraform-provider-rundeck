/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConditionEvaluation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionEvaluation{}

// ConditionEvaluation struct for ConditionEvaluation
type ConditionEvaluation struct {
	Satisfied *bool `json:"satisfied,omitempty"`
	Value map[string]interface{} `json:"value,omitempty"`
	Condition *Condition `json:"condition,omitempty"`
	Error map[string]interface{} `json:"error,omitempty"`
}

// NewConditionEvaluation instantiates a new ConditionEvaluation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionEvaluation() *ConditionEvaluation {
	this := ConditionEvaluation{}
	return &this
}

// NewConditionEvaluationWithDefaults instantiates a new ConditionEvaluation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionEvaluationWithDefaults() *ConditionEvaluation {
	this := ConditionEvaluation{}
	return &this
}

// GetSatisfied returns the Satisfied field value if set, zero value otherwise.
func (o *ConditionEvaluation) GetSatisfied() bool {
	if o == nil || IsNil(o.Satisfied) {
		var ret bool
		return ret
	}
	return *o.Satisfied
}

// GetSatisfiedOk returns a tuple with the Satisfied field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionEvaluation) GetSatisfiedOk() (*bool, bool) {
	if o == nil || IsNil(o.Satisfied) {
		return nil, false
	}
	return o.Satisfied, true
}

// HasSatisfied returns a boolean if a field has been set.
func (o *ConditionEvaluation) HasSatisfied() bool {
	if o != nil && !IsNil(o.Satisfied) {
		return true
	}

	return false
}

// SetSatisfied gets a reference to the given bool and assigns it to the Satisfied field.
func (o *ConditionEvaluation) SetSatisfied(v bool) {
	o.Satisfied = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ConditionEvaluation) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionEvaluation) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ConditionEvaluation) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *ConditionEvaluation) SetValue(v map[string]interface{}) {
	o.Value = v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *ConditionEvaluation) GetCondition() Condition {
	if o == nil || IsNil(o.Condition) {
		var ret Condition
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionEvaluation) GetConditionOk() (*Condition, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *ConditionEvaluation) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given Condition and assigns it to the Condition field.
func (o *ConditionEvaluation) SetCondition(v Condition) {
	o.Condition = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ConditionEvaluation) GetError() map[string]interface{} {
	if o == nil || IsNil(o.Error) {
		var ret map[string]interface{}
		return ret
	}
	return o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionEvaluation) GetErrorOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Error) {
		return map[string]interface{}{}, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ConditionEvaluation) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given map[string]interface{} and assigns it to the Error field.
func (o *ConditionEvaluation) SetError(v map[string]interface{}) {
	o.Error = v
}

func (o ConditionEvaluation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionEvaluation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Satisfied) {
		toSerialize["satisfied"] = o.Satisfied
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableConditionEvaluation struct {
	value *ConditionEvaluation
	isSet bool
}

func (v NullableConditionEvaluation) Get() *ConditionEvaluation {
	return v.value
}

func (v *NullableConditionEvaluation) Set(val *ConditionEvaluation) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionEvaluation) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionEvaluation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionEvaluation(val *ConditionEvaluation) *NullableConditionEvaluation {
	return &NullableConditionEvaluation{value: val, isSet: true}
}

func (v NullableConditionEvaluation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionEvaluation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


