/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// JobAPIService JobAPI service
type JobAPIService service

type ApiJobRequest struct {
	ctx context.Context
	ApiService *JobAPIService
	id string
}

func (r ApiJobRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.JobExecute(r)
}

/*
Job Get Job Tags (Enterprise)

Returns the list of tags for a job.

Since: v46


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Job ID
 @return ApiJobRequest
*/
func (a *JobAPIService) Job(ctx context.Context, id string) ApiJobRequest {
	return ApiJobRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []string
func (a *JobAPIService) JobExecute(r ApiJobRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JobAPIService.Job")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/job/{id}/tags"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["rundeckApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Rundeck-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryRequest struct {
	ctx context.Context
	ApiService *JobAPIService
	project string
	jobFilter *string
	jobExactFilter *string
	projFilter *string
	groupPath *string
	groupPathExact *string
	descFilter *string
	loglevelFilter *string
	idlist *string
	scheduledFilter *bool
	scheduleEnabledFilter *bool
	executionEnabledFilter *bool
	serverNodeUUIDFilter *string
	daysAhead *int32
	runJobLaterFilter *bool
	max *int32
	offset *int32
	sortBy *string
	sortOrder *string
	inputParamMap *map[string]interface{}
	paginatedRequired *bool
	sortOrders *[]SortOrder
}

func (r ApiQueryRequest) JobFilter(jobFilter string) ApiQueryRequest {
	r.jobFilter = &jobFilter
	return r
}

func (r ApiQueryRequest) JobExactFilter(jobExactFilter string) ApiQueryRequest {
	r.jobExactFilter = &jobExactFilter
	return r
}

func (r ApiQueryRequest) ProjFilter(projFilter string) ApiQueryRequest {
	r.projFilter = &projFilter
	return r
}

func (r ApiQueryRequest) GroupPath(groupPath string) ApiQueryRequest {
	r.groupPath = &groupPath
	return r
}

func (r ApiQueryRequest) GroupPathExact(groupPathExact string) ApiQueryRequest {
	r.groupPathExact = &groupPathExact
	return r
}

func (r ApiQueryRequest) DescFilter(descFilter string) ApiQueryRequest {
	r.descFilter = &descFilter
	return r
}

func (r ApiQueryRequest) LoglevelFilter(loglevelFilter string) ApiQueryRequest {
	r.loglevelFilter = &loglevelFilter
	return r
}

func (r ApiQueryRequest) Idlist(idlist string) ApiQueryRequest {
	r.idlist = &idlist
	return r
}

func (r ApiQueryRequest) ScheduledFilter(scheduledFilter bool) ApiQueryRequest {
	r.scheduledFilter = &scheduledFilter
	return r
}

func (r ApiQueryRequest) ScheduleEnabledFilter(scheduleEnabledFilter bool) ApiQueryRequest {
	r.scheduleEnabledFilter = &scheduleEnabledFilter
	return r
}

func (r ApiQueryRequest) ExecutionEnabledFilter(executionEnabledFilter bool) ApiQueryRequest {
	r.executionEnabledFilter = &executionEnabledFilter
	return r
}

func (r ApiQueryRequest) ServerNodeUUIDFilter(serverNodeUUIDFilter string) ApiQueryRequest {
	r.serverNodeUUIDFilter = &serverNodeUUIDFilter
	return r
}

func (r ApiQueryRequest) DaysAhead(daysAhead int32) ApiQueryRequest {
	r.daysAhead = &daysAhead
	return r
}

func (r ApiQueryRequest) RunJobLaterFilter(runJobLaterFilter bool) ApiQueryRequest {
	r.runJobLaterFilter = &runJobLaterFilter
	return r
}

func (r ApiQueryRequest) Max(max int32) ApiQueryRequest {
	r.max = &max
	return r
}

func (r ApiQueryRequest) Offset(offset int32) ApiQueryRequest {
	r.offset = &offset
	return r
}

func (r ApiQueryRequest) SortBy(sortBy string) ApiQueryRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiQueryRequest) SortOrder(sortOrder string) ApiQueryRequest {
	r.sortOrder = &sortOrder
	return r
}

func (r ApiQueryRequest) InputParamMap(inputParamMap map[string]interface{}) ApiQueryRequest {
	r.inputParamMap = &inputParamMap
	return r
}

func (r ApiQueryRequest) PaginatedRequired(paginatedRequired bool) ApiQueryRequest {
	r.paginatedRequired = &paginatedRequired
	return r
}

func (r ApiQueryRequest) SortOrders(sortOrders []SortOrder) ApiQueryRequest {
	r.sortOrders = &sortOrders
	return r
}

func (r ApiQueryRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.QueryExecute(r)
}

/*
Query Query Project Job Tags [Enterprise]

Returns the list of available tags, along with the count of jobs per each tag, for the job 
query result received.

Since: v46


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param project
 @return ApiQueryRequest
*/
func (a *JobAPIService) Query(ctx context.Context, project string) ApiQueryRequest {
	return ApiQueryRequest{
		ApiService: a,
		ctx: ctx,
		project: project,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *JobAPIService) QueryExecute(r ApiQueryRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JobAPIService.Query")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project}/jobTags/query"
	localVarPath = strings.Replace(localVarPath, "{"+"project"+"}", url.PathEscape(parameterValueToString(r.project, "project")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.jobFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jobFilter", r.jobFilter, "form", "")
	}
	if r.jobExactFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jobExactFilter", r.jobExactFilter, "form", "")
	}
	if r.projFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projFilter", r.projFilter, "form", "")
	}
	if r.groupPath != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupPath", r.groupPath, "form", "")
	}
	if r.groupPathExact != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupPathExact", r.groupPathExact, "form", "")
	}
	if r.descFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "descFilter", r.descFilter, "form", "")
	}
	if r.loglevelFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "loglevelFilter", r.loglevelFilter, "form", "")
	}
	if r.idlist != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idlist", r.idlist, "form", "")
	}
	if r.scheduledFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduledFilter", r.scheduledFilter, "form", "")
	}
	if r.scheduleEnabledFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduleEnabledFilter", r.scheduleEnabledFilter, "form", "")
	}
	if r.executionEnabledFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "executionEnabledFilter", r.executionEnabledFilter, "form", "")
	}
	if r.serverNodeUUIDFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serverNodeUUIDFilter", r.serverNodeUUIDFilter, "form", "")
	}
	if r.daysAhead != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "daysAhead", r.daysAhead, "form", "")
	}
	if r.runJobLaterFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "runJobLaterFilter", r.runJobLaterFilter, "form", "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "form", "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "form", "")
	}
	if r.inputParamMap != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inputParamMap", r.inputParamMap, "form", "")
	}
	if r.paginatedRequired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paginatedRequired", r.paginatedRequired, "form", "")
	}
	if r.sortOrders != nil {
		t := *r.sortOrders
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrders", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrders", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["rundeckApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Rundeck-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
