/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ConditionType the model 'ConditionType'
type ConditionType string

// List of ConditionType
const (
	CONTAINS ConditionType = "contains"
	DATE_TIME_AFTER ConditionType = "dateTimeAfter"
	DATE_TIME_BEFORE ConditionType = "dateTimeBefore"
	EXISTS ConditionType = "exists"
	IS_A ConditionType = "isA"
	EQUALS ConditionType = "equals"
)

// All allowed values of ConditionType enum
var AllowedConditionTypeEnumValues = []ConditionType{
	"contains",
	"dateTimeAfter",
	"dateTimeBefore",
	"exists",
	"isA",
	"equals",
}

func (v *ConditionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConditionType(value)
	for _, existing := range AllowedConditionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConditionType", value)
}

// NewConditionTypeFromValue returns a pointer to a valid ConditionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConditionTypeFromValue(v string) (*ConditionType, error) {
	ev := ConditionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConditionType: valid values are %v", v, AllowedConditionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConditionType) IsValid() bool {
	for _, existing := range AllowedConditionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConditionType value
func (v ConditionType) Ptr() *ConditionType {
	return &v
}

type NullableConditionType struct {
	value *ConditionType
	isSet bool
}

func (v NullableConditionType) Get() *ConditionType {
	return v.value
}

func (v *NullableConditionType) Set(val *ConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionType(val *ConditionType) *NullableConditionType {
	return &NullableConditionType{value: val, isSet: true}
}

func (v NullableConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

