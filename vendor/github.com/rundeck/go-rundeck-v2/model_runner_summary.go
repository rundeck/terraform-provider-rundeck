/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RunnerSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunnerSummary{}

// RunnerSummary struct for RunnerSummary
type RunnerSummary struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Status *string `json:"status,omitempty"`
	Version *string `json:"version,omitempty"`
	AssociatedProjects *int32 `json:"associatedProjects,omitempty"`
	LastCheckin *string `json:"lastCheckin,omitempty"`
	RunnerAsNodeEnabled *bool `json:"runnerAsNodeEnabled,omitempty"`
	LastCheckinAlert *bool `json:"lastCheckinAlert,omitempty"`
	Selected *bool `json:"selected,omitempty"`
	TagNames []string `json:"tagNames,omitempty"`
	UiData *UiData `json:"uiData,omitempty"`
	RunnerNodeFilter *string `json:"runnerNodeFilter,omitempty"`
	RemoteNodeDispatch *bool `json:"remoteNodeDispatch,omitempty"`
	ReplicaType *RunnerReplicaType `json:"replicaType,omitempty"`
	InstallationType *RunnerInstallationType `json:"installationType,omitempty"`
	Providers []RunnerProviderSummary `json:"providers,omitempty"`
	RunnerReplicas *int32 `json:"runnerReplicas,omitempty"`
	HealthyRunnerReplicas *int32 `json:"healthyRunnerReplicas,omitempty"`
	RunningOperations *int32 `json:"runningOperations,omitempty"`
	Uptime *int64 `json:"uptime,omitempty"`
}

// NewRunnerSummary instantiates a new RunnerSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunnerSummary() *RunnerSummary {
	this := RunnerSummary{}
	return &this
}

// NewRunnerSummaryWithDefaults instantiates a new RunnerSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunnerSummaryWithDefaults() *RunnerSummary {
	this := RunnerSummary{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RunnerSummary) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RunnerSummary) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RunnerSummary) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RunnerSummary) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RunnerSummary) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RunnerSummary) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RunnerSummary) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RunnerSummary) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RunnerSummary) SetDescription(v string) {
	o.Description = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RunnerSummary) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RunnerSummary) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RunnerSummary) SetStatus(v string) {
	o.Status = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *RunnerSummary) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *RunnerSummary) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *RunnerSummary) SetVersion(v string) {
	o.Version = &v
}

// GetAssociatedProjects returns the AssociatedProjects field value if set, zero value otherwise.
func (o *RunnerSummary) GetAssociatedProjects() int32 {
	if o == nil || IsNil(o.AssociatedProjects) {
		var ret int32
		return ret
	}
	return *o.AssociatedProjects
}

// GetAssociatedProjectsOk returns a tuple with the AssociatedProjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetAssociatedProjectsOk() (*int32, bool) {
	if o == nil || IsNil(o.AssociatedProjects) {
		return nil, false
	}
	return o.AssociatedProjects, true
}

// HasAssociatedProjects returns a boolean if a field has been set.
func (o *RunnerSummary) HasAssociatedProjects() bool {
	if o != nil && !IsNil(o.AssociatedProjects) {
		return true
	}

	return false
}

// SetAssociatedProjects gets a reference to the given int32 and assigns it to the AssociatedProjects field.
func (o *RunnerSummary) SetAssociatedProjects(v int32) {
	o.AssociatedProjects = &v
}

// GetLastCheckin returns the LastCheckin field value if set, zero value otherwise.
func (o *RunnerSummary) GetLastCheckin() string {
	if o == nil || IsNil(o.LastCheckin) {
		var ret string
		return ret
	}
	return *o.LastCheckin
}

// GetLastCheckinOk returns a tuple with the LastCheckin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetLastCheckinOk() (*string, bool) {
	if o == nil || IsNil(o.LastCheckin) {
		return nil, false
	}
	return o.LastCheckin, true
}

// HasLastCheckin returns a boolean if a field has been set.
func (o *RunnerSummary) HasLastCheckin() bool {
	if o != nil && !IsNil(o.LastCheckin) {
		return true
	}

	return false
}

// SetLastCheckin gets a reference to the given string and assigns it to the LastCheckin field.
func (o *RunnerSummary) SetLastCheckin(v string) {
	o.LastCheckin = &v
}

// GetRunnerAsNodeEnabled returns the RunnerAsNodeEnabled field value if set, zero value otherwise.
func (o *RunnerSummary) GetRunnerAsNodeEnabled() bool {
	if o == nil || IsNil(o.RunnerAsNodeEnabled) {
		var ret bool
		return ret
	}
	return *o.RunnerAsNodeEnabled
}

// GetRunnerAsNodeEnabledOk returns a tuple with the RunnerAsNodeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetRunnerAsNodeEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RunnerAsNodeEnabled) {
		return nil, false
	}
	return o.RunnerAsNodeEnabled, true
}

// HasRunnerAsNodeEnabled returns a boolean if a field has been set.
func (o *RunnerSummary) HasRunnerAsNodeEnabled() bool {
	if o != nil && !IsNil(o.RunnerAsNodeEnabled) {
		return true
	}

	return false
}

// SetRunnerAsNodeEnabled gets a reference to the given bool and assigns it to the RunnerAsNodeEnabled field.
func (o *RunnerSummary) SetRunnerAsNodeEnabled(v bool) {
	o.RunnerAsNodeEnabled = &v
}

// GetLastCheckinAlert returns the LastCheckinAlert field value if set, zero value otherwise.
func (o *RunnerSummary) GetLastCheckinAlert() bool {
	if o == nil || IsNil(o.LastCheckinAlert) {
		var ret bool
		return ret
	}
	return *o.LastCheckinAlert
}

// GetLastCheckinAlertOk returns a tuple with the LastCheckinAlert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetLastCheckinAlertOk() (*bool, bool) {
	if o == nil || IsNil(o.LastCheckinAlert) {
		return nil, false
	}
	return o.LastCheckinAlert, true
}

// HasLastCheckinAlert returns a boolean if a field has been set.
func (o *RunnerSummary) HasLastCheckinAlert() bool {
	if o != nil && !IsNil(o.LastCheckinAlert) {
		return true
	}

	return false
}

// SetLastCheckinAlert gets a reference to the given bool and assigns it to the LastCheckinAlert field.
func (o *RunnerSummary) SetLastCheckinAlert(v bool) {
	o.LastCheckinAlert = &v
}

// GetSelected returns the Selected field value if set, zero value otherwise.
func (o *RunnerSummary) GetSelected() bool {
	if o == nil || IsNil(o.Selected) {
		var ret bool
		return ret
	}
	return *o.Selected
}

// GetSelectedOk returns a tuple with the Selected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetSelectedOk() (*bool, bool) {
	if o == nil || IsNil(o.Selected) {
		return nil, false
	}
	return o.Selected, true
}

// HasSelected returns a boolean if a field has been set.
func (o *RunnerSummary) HasSelected() bool {
	if o != nil && !IsNil(o.Selected) {
		return true
	}

	return false
}

// SetSelected gets a reference to the given bool and assigns it to the Selected field.
func (o *RunnerSummary) SetSelected(v bool) {
	o.Selected = &v
}

// GetTagNames returns the TagNames field value if set, zero value otherwise.
func (o *RunnerSummary) GetTagNames() []string {
	if o == nil || IsNil(o.TagNames) {
		var ret []string
		return ret
	}
	return o.TagNames
}

// GetTagNamesOk returns a tuple with the TagNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetTagNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.TagNames) {
		return nil, false
	}
	return o.TagNames, true
}

// HasTagNames returns a boolean if a field has been set.
func (o *RunnerSummary) HasTagNames() bool {
	if o != nil && !IsNil(o.TagNames) {
		return true
	}

	return false
}

// SetTagNames gets a reference to the given []string and assigns it to the TagNames field.
func (o *RunnerSummary) SetTagNames(v []string) {
	o.TagNames = v
}

// GetUiData returns the UiData field value if set, zero value otherwise.
func (o *RunnerSummary) GetUiData() UiData {
	if o == nil || IsNil(o.UiData) {
		var ret UiData
		return ret
	}
	return *o.UiData
}

// GetUiDataOk returns a tuple with the UiData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetUiDataOk() (*UiData, bool) {
	if o == nil || IsNil(o.UiData) {
		return nil, false
	}
	return o.UiData, true
}

// HasUiData returns a boolean if a field has been set.
func (o *RunnerSummary) HasUiData() bool {
	if o != nil && !IsNil(o.UiData) {
		return true
	}

	return false
}

// SetUiData gets a reference to the given UiData and assigns it to the UiData field.
func (o *RunnerSummary) SetUiData(v UiData) {
	o.UiData = &v
}

// GetRunnerNodeFilter returns the RunnerNodeFilter field value if set, zero value otherwise.
func (o *RunnerSummary) GetRunnerNodeFilter() string {
	if o == nil || IsNil(o.RunnerNodeFilter) {
		var ret string
		return ret
	}
	return *o.RunnerNodeFilter
}

// GetRunnerNodeFilterOk returns a tuple with the RunnerNodeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetRunnerNodeFilterOk() (*string, bool) {
	if o == nil || IsNil(o.RunnerNodeFilter) {
		return nil, false
	}
	return o.RunnerNodeFilter, true
}

// HasRunnerNodeFilter returns a boolean if a field has been set.
func (o *RunnerSummary) HasRunnerNodeFilter() bool {
	if o != nil && !IsNil(o.RunnerNodeFilter) {
		return true
	}

	return false
}

// SetRunnerNodeFilter gets a reference to the given string and assigns it to the RunnerNodeFilter field.
func (o *RunnerSummary) SetRunnerNodeFilter(v string) {
	o.RunnerNodeFilter = &v
}

// GetRemoteNodeDispatch returns the RemoteNodeDispatch field value if set, zero value otherwise.
func (o *RunnerSummary) GetRemoteNodeDispatch() bool {
	if o == nil || IsNil(o.RemoteNodeDispatch) {
		var ret bool
		return ret
	}
	return *o.RemoteNodeDispatch
}

// GetRemoteNodeDispatchOk returns a tuple with the RemoteNodeDispatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetRemoteNodeDispatchOk() (*bool, bool) {
	if o == nil || IsNil(o.RemoteNodeDispatch) {
		return nil, false
	}
	return o.RemoteNodeDispatch, true
}

// HasRemoteNodeDispatch returns a boolean if a field has been set.
func (o *RunnerSummary) HasRemoteNodeDispatch() bool {
	if o != nil && !IsNil(o.RemoteNodeDispatch) {
		return true
	}

	return false
}

// SetRemoteNodeDispatch gets a reference to the given bool and assigns it to the RemoteNodeDispatch field.
func (o *RunnerSummary) SetRemoteNodeDispatch(v bool) {
	o.RemoteNodeDispatch = &v
}

// GetReplicaType returns the ReplicaType field value if set, zero value otherwise.
func (o *RunnerSummary) GetReplicaType() RunnerReplicaType {
	if o == nil || IsNil(o.ReplicaType) {
		var ret RunnerReplicaType
		return ret
	}
	return *o.ReplicaType
}

// GetReplicaTypeOk returns a tuple with the ReplicaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetReplicaTypeOk() (*RunnerReplicaType, bool) {
	if o == nil || IsNil(o.ReplicaType) {
		return nil, false
	}
	return o.ReplicaType, true
}

// HasReplicaType returns a boolean if a field has been set.
func (o *RunnerSummary) HasReplicaType() bool {
	if o != nil && !IsNil(o.ReplicaType) {
		return true
	}

	return false
}

// SetReplicaType gets a reference to the given RunnerReplicaType and assigns it to the ReplicaType field.
func (o *RunnerSummary) SetReplicaType(v RunnerReplicaType) {
	o.ReplicaType = &v
}

// GetInstallationType returns the InstallationType field value if set, zero value otherwise.
func (o *RunnerSummary) GetInstallationType() RunnerInstallationType {
	if o == nil || IsNil(o.InstallationType) {
		var ret RunnerInstallationType
		return ret
	}
	return *o.InstallationType
}

// GetInstallationTypeOk returns a tuple with the InstallationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetInstallationTypeOk() (*RunnerInstallationType, bool) {
	if o == nil || IsNil(o.InstallationType) {
		return nil, false
	}
	return o.InstallationType, true
}

// HasInstallationType returns a boolean if a field has been set.
func (o *RunnerSummary) HasInstallationType() bool {
	if o != nil && !IsNil(o.InstallationType) {
		return true
	}

	return false
}

// SetInstallationType gets a reference to the given RunnerInstallationType and assigns it to the InstallationType field.
func (o *RunnerSummary) SetInstallationType(v RunnerInstallationType) {
	o.InstallationType = &v
}

// GetProviders returns the Providers field value if set, zero value otherwise.
func (o *RunnerSummary) GetProviders() []RunnerProviderSummary {
	if o == nil || IsNil(o.Providers) {
		var ret []RunnerProviderSummary
		return ret
	}
	return o.Providers
}

// GetProvidersOk returns a tuple with the Providers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetProvidersOk() ([]RunnerProviderSummary, bool) {
	if o == nil || IsNil(o.Providers) {
		return nil, false
	}
	return o.Providers, true
}

// HasProviders returns a boolean if a field has been set.
func (o *RunnerSummary) HasProviders() bool {
	if o != nil && !IsNil(o.Providers) {
		return true
	}

	return false
}

// SetProviders gets a reference to the given []RunnerProviderSummary and assigns it to the Providers field.
func (o *RunnerSummary) SetProviders(v []RunnerProviderSummary) {
	o.Providers = v
}

// GetRunnerReplicas returns the RunnerReplicas field value if set, zero value otherwise.
func (o *RunnerSummary) GetRunnerReplicas() int32 {
	if o == nil || IsNil(o.RunnerReplicas) {
		var ret int32
		return ret
	}
	return *o.RunnerReplicas
}

// GetRunnerReplicasOk returns a tuple with the RunnerReplicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetRunnerReplicasOk() (*int32, bool) {
	if o == nil || IsNil(o.RunnerReplicas) {
		return nil, false
	}
	return o.RunnerReplicas, true
}

// HasRunnerReplicas returns a boolean if a field has been set.
func (o *RunnerSummary) HasRunnerReplicas() bool {
	if o != nil && !IsNil(o.RunnerReplicas) {
		return true
	}

	return false
}

// SetRunnerReplicas gets a reference to the given int32 and assigns it to the RunnerReplicas field.
func (o *RunnerSummary) SetRunnerReplicas(v int32) {
	o.RunnerReplicas = &v
}

// GetHealthyRunnerReplicas returns the HealthyRunnerReplicas field value if set, zero value otherwise.
func (o *RunnerSummary) GetHealthyRunnerReplicas() int32 {
	if o == nil || IsNil(o.HealthyRunnerReplicas) {
		var ret int32
		return ret
	}
	return *o.HealthyRunnerReplicas
}

// GetHealthyRunnerReplicasOk returns a tuple with the HealthyRunnerReplicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetHealthyRunnerReplicasOk() (*int32, bool) {
	if o == nil || IsNil(o.HealthyRunnerReplicas) {
		return nil, false
	}
	return o.HealthyRunnerReplicas, true
}

// HasHealthyRunnerReplicas returns a boolean if a field has been set.
func (o *RunnerSummary) HasHealthyRunnerReplicas() bool {
	if o != nil && !IsNil(o.HealthyRunnerReplicas) {
		return true
	}

	return false
}

// SetHealthyRunnerReplicas gets a reference to the given int32 and assigns it to the HealthyRunnerReplicas field.
func (o *RunnerSummary) SetHealthyRunnerReplicas(v int32) {
	o.HealthyRunnerReplicas = &v
}

// GetRunningOperations returns the RunningOperations field value if set, zero value otherwise.
func (o *RunnerSummary) GetRunningOperations() int32 {
	if o == nil || IsNil(o.RunningOperations) {
		var ret int32
		return ret
	}
	return *o.RunningOperations
}

// GetRunningOperationsOk returns a tuple with the RunningOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetRunningOperationsOk() (*int32, bool) {
	if o == nil || IsNil(o.RunningOperations) {
		return nil, false
	}
	return o.RunningOperations, true
}

// HasRunningOperations returns a boolean if a field has been set.
func (o *RunnerSummary) HasRunningOperations() bool {
	if o != nil && !IsNil(o.RunningOperations) {
		return true
	}

	return false
}

// SetRunningOperations gets a reference to the given int32 and assigns it to the RunningOperations field.
func (o *RunnerSummary) SetRunningOperations(v int32) {
	o.RunningOperations = &v
}

// GetUptime returns the Uptime field value if set, zero value otherwise.
func (o *RunnerSummary) GetUptime() int64 {
	if o == nil || IsNil(o.Uptime) {
		var ret int64
		return ret
	}
	return *o.Uptime
}

// GetUptimeOk returns a tuple with the Uptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerSummary) GetUptimeOk() (*int64, bool) {
	if o == nil || IsNil(o.Uptime) {
		return nil, false
	}
	return o.Uptime, true
}

// HasUptime returns a boolean if a field has been set.
func (o *RunnerSummary) HasUptime() bool {
	if o != nil && !IsNil(o.Uptime) {
		return true
	}

	return false
}

// SetUptime gets a reference to the given int64 and assigns it to the Uptime field.
func (o *RunnerSummary) SetUptime(v int64) {
	o.Uptime = &v
}

func (o RunnerSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunnerSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.AssociatedProjects) {
		toSerialize["associatedProjects"] = o.AssociatedProjects
	}
	if !IsNil(o.LastCheckin) {
		toSerialize["lastCheckin"] = o.LastCheckin
	}
	if !IsNil(o.RunnerAsNodeEnabled) {
		toSerialize["runnerAsNodeEnabled"] = o.RunnerAsNodeEnabled
	}
	if !IsNil(o.LastCheckinAlert) {
		toSerialize["lastCheckinAlert"] = o.LastCheckinAlert
	}
	if !IsNil(o.Selected) {
		toSerialize["selected"] = o.Selected
	}
	if !IsNil(o.TagNames) {
		toSerialize["tagNames"] = o.TagNames
	}
	if !IsNil(o.UiData) {
		toSerialize["uiData"] = o.UiData
	}
	if !IsNil(o.RunnerNodeFilter) {
		toSerialize["runnerNodeFilter"] = o.RunnerNodeFilter
	}
	if !IsNil(o.RemoteNodeDispatch) {
		toSerialize["remoteNodeDispatch"] = o.RemoteNodeDispatch
	}
	if !IsNil(o.ReplicaType) {
		toSerialize["replicaType"] = o.ReplicaType
	}
	if !IsNil(o.InstallationType) {
		toSerialize["installationType"] = o.InstallationType
	}
	if !IsNil(o.Providers) {
		toSerialize["providers"] = o.Providers
	}
	if !IsNil(o.RunnerReplicas) {
		toSerialize["runnerReplicas"] = o.RunnerReplicas
	}
	if !IsNil(o.HealthyRunnerReplicas) {
		toSerialize["healthyRunnerReplicas"] = o.HealthyRunnerReplicas
	}
	if !IsNil(o.RunningOperations) {
		toSerialize["runningOperations"] = o.RunningOperations
	}
	if !IsNil(o.Uptime) {
		toSerialize["uptime"] = o.Uptime
	}
	return toSerialize, nil
}

type NullableRunnerSummary struct {
	value *RunnerSummary
	isSet bool
}

func (v NullableRunnerSummary) Get() *RunnerSummary {
	return v.value
}

func (v *NullableRunnerSummary) Set(val *RunnerSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableRunnerSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableRunnerSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunnerSummary(val *RunnerSummary) *NullableRunnerSummary {
	return &NullableRunnerSummary{value: val, isSet: true}
}

func (v NullableRunnerSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunnerSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


