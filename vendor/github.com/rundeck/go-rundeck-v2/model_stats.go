/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Stats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Stats{}

// Stats Stat Information
type Stats struct {
	Uptime *Uptime `json:"uptime,omitempty"`
	Cpu *Cpu `json:"cpu,omitempty"`
	Memory *Memory `json:"memory,omitempty"`
	Scheduler *Scheduler `json:"scheduler,omitempty"`
	Threads *Threads `json:"threads,omitempty"`
}

// NewStats instantiates a new Stats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStats() *Stats {
	this := Stats{}
	return &this
}

// NewStatsWithDefaults instantiates a new Stats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatsWithDefaults() *Stats {
	this := Stats{}
	return &this
}

// GetUptime returns the Uptime field value if set, zero value otherwise.
func (o *Stats) GetUptime() Uptime {
	if o == nil || IsNil(o.Uptime) {
		var ret Uptime
		return ret
	}
	return *o.Uptime
}

// GetUptimeOk returns a tuple with the Uptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stats) GetUptimeOk() (*Uptime, bool) {
	if o == nil || IsNil(o.Uptime) {
		return nil, false
	}
	return o.Uptime, true
}

// HasUptime returns a boolean if a field has been set.
func (o *Stats) HasUptime() bool {
	if o != nil && !IsNil(o.Uptime) {
		return true
	}

	return false
}

// SetUptime gets a reference to the given Uptime and assigns it to the Uptime field.
func (o *Stats) SetUptime(v Uptime) {
	o.Uptime = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *Stats) GetCpu() Cpu {
	if o == nil || IsNil(o.Cpu) {
		var ret Cpu
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stats) GetCpuOk() (*Cpu, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *Stats) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given Cpu and assigns it to the Cpu field.
func (o *Stats) SetCpu(v Cpu) {
	o.Cpu = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *Stats) GetMemory() Memory {
	if o == nil || IsNil(o.Memory) {
		var ret Memory
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stats) GetMemoryOk() (*Memory, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *Stats) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given Memory and assigns it to the Memory field.
func (o *Stats) SetMemory(v Memory) {
	o.Memory = &v
}

// GetScheduler returns the Scheduler field value if set, zero value otherwise.
func (o *Stats) GetScheduler() Scheduler {
	if o == nil || IsNil(o.Scheduler) {
		var ret Scheduler
		return ret
	}
	return *o.Scheduler
}

// GetSchedulerOk returns a tuple with the Scheduler field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stats) GetSchedulerOk() (*Scheduler, bool) {
	if o == nil || IsNil(o.Scheduler) {
		return nil, false
	}
	return o.Scheduler, true
}

// HasScheduler returns a boolean if a field has been set.
func (o *Stats) HasScheduler() bool {
	if o != nil && !IsNil(o.Scheduler) {
		return true
	}

	return false
}

// SetScheduler gets a reference to the given Scheduler and assigns it to the Scheduler field.
func (o *Stats) SetScheduler(v Scheduler) {
	o.Scheduler = &v
}

// GetThreads returns the Threads field value if set, zero value otherwise.
func (o *Stats) GetThreads() Threads {
	if o == nil || IsNil(o.Threads) {
		var ret Threads
		return ret
	}
	return *o.Threads
}

// GetThreadsOk returns a tuple with the Threads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stats) GetThreadsOk() (*Threads, bool) {
	if o == nil || IsNil(o.Threads) {
		return nil, false
	}
	return o.Threads, true
}

// HasThreads returns a boolean if a field has been set.
func (o *Stats) HasThreads() bool {
	if o != nil && !IsNil(o.Threads) {
		return true
	}

	return false
}

// SetThreads gets a reference to the given Threads and assigns it to the Threads field.
func (o *Stats) SetThreads(v Threads) {
	o.Threads = &v
}

func (o Stats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Stats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uptime) {
		toSerialize["uptime"] = o.Uptime
	}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !IsNil(o.Scheduler) {
		toSerialize["scheduler"] = o.Scheduler
	}
	if !IsNil(o.Threads) {
		toSerialize["threads"] = o.Threads
	}
	return toSerialize, nil
}

type NullableStats struct {
	value *Stats
	isSet bool
}

func (v NullableStats) Get() *Stats {
	return v.value
}

func (v *NullableStats) Set(val *Stats) {
	v.value = val
	v.isSet = true
}

func (v NullableStats) IsSet() bool {
	return v.isSet
}

func (v *NullableStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStats(val *Stats) *NullableStats {
	return &NullableStats{value: val, isSet: true}
}

func (v NullableStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


