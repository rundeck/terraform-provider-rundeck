/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BasicError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BasicError{}

// BasicError struct for BasicError
type BasicError struct {
	Error *string `json:"error,omitempty"`
	ErrorCode *string `json:"errorCode,omitempty"`
}

// NewBasicError instantiates a new BasicError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasicError() *BasicError {
	this := BasicError{}
	return &this
}

// NewBasicErrorWithDefaults instantiates a new BasicError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasicErrorWithDefaults() *BasicError {
	this := BasicError{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *BasicError) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicError) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *BasicError) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *BasicError) SetError(v string) {
	o.Error = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *BasicError) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicError) GetErrorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *BasicError) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *BasicError) SetErrorCode(v string) {
	o.ErrorCode = &v
}

func (o BasicError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BasicError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.ErrorCode) {
		toSerialize["errorCode"] = o.ErrorCode
	}
	return toSerialize, nil
}

type NullableBasicError struct {
	value *BasicError
	isSet bool
}

func (v NullableBasicError) Get() *BasicError {
	return v.value
}

func (v *NullableBasicError) Set(val *BasicError) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicError) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicError(val *BasicError) *NullableBasicError {
	return &NullableBasicError{value: val, isSet: true}
}

func (v NullableBasicError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


