/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RegenRunnerCredResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegenRunnerCredResponse{}

// RegenRunnerCredResponse struct for RegenRunnerCredResponse
type RegenRunnerCredResponse struct {
	RunnerId *string `json:"runnerId,omitempty"`
	// Runner authentication token
	Token *string `json:"token,omitempty"`
	// Runner package download token
	DownloadTk *string `json:"downloadTk,omitempty"`
	ReplicaId *string `json:"replicaId,omitempty"`
}

// NewRegenRunnerCredResponse instantiates a new RegenRunnerCredResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegenRunnerCredResponse() *RegenRunnerCredResponse {
	this := RegenRunnerCredResponse{}
	return &this
}

// NewRegenRunnerCredResponseWithDefaults instantiates a new RegenRunnerCredResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegenRunnerCredResponseWithDefaults() *RegenRunnerCredResponse {
	this := RegenRunnerCredResponse{}
	return &this
}

// GetRunnerId returns the RunnerId field value if set, zero value otherwise.
func (o *RegenRunnerCredResponse) GetRunnerId() string {
	if o == nil || IsNil(o.RunnerId) {
		var ret string
		return ret
	}
	return *o.RunnerId
}

// GetRunnerIdOk returns a tuple with the RunnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegenRunnerCredResponse) GetRunnerIdOk() (*string, bool) {
	if o == nil || IsNil(o.RunnerId) {
		return nil, false
	}
	return o.RunnerId, true
}

// HasRunnerId returns a boolean if a field has been set.
func (o *RegenRunnerCredResponse) HasRunnerId() bool {
	if o != nil && !IsNil(o.RunnerId) {
		return true
	}

	return false
}

// SetRunnerId gets a reference to the given string and assigns it to the RunnerId field.
func (o *RegenRunnerCredResponse) SetRunnerId(v string) {
	o.RunnerId = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *RegenRunnerCredResponse) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegenRunnerCredResponse) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *RegenRunnerCredResponse) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *RegenRunnerCredResponse) SetToken(v string) {
	o.Token = &v
}

// GetDownloadTk returns the DownloadTk field value if set, zero value otherwise.
func (o *RegenRunnerCredResponse) GetDownloadTk() string {
	if o == nil || IsNil(o.DownloadTk) {
		var ret string
		return ret
	}
	return *o.DownloadTk
}

// GetDownloadTkOk returns a tuple with the DownloadTk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegenRunnerCredResponse) GetDownloadTkOk() (*string, bool) {
	if o == nil || IsNil(o.DownloadTk) {
		return nil, false
	}
	return o.DownloadTk, true
}

// HasDownloadTk returns a boolean if a field has been set.
func (o *RegenRunnerCredResponse) HasDownloadTk() bool {
	if o != nil && !IsNil(o.DownloadTk) {
		return true
	}

	return false
}

// SetDownloadTk gets a reference to the given string and assigns it to the DownloadTk field.
func (o *RegenRunnerCredResponse) SetDownloadTk(v string) {
	o.DownloadTk = &v
}

// GetReplicaId returns the ReplicaId field value if set, zero value otherwise.
func (o *RegenRunnerCredResponse) GetReplicaId() string {
	if o == nil || IsNil(o.ReplicaId) {
		var ret string
		return ret
	}
	return *o.ReplicaId
}

// GetReplicaIdOk returns a tuple with the ReplicaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegenRunnerCredResponse) GetReplicaIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReplicaId) {
		return nil, false
	}
	return o.ReplicaId, true
}

// HasReplicaId returns a boolean if a field has been set.
func (o *RegenRunnerCredResponse) HasReplicaId() bool {
	if o != nil && !IsNil(o.ReplicaId) {
		return true
	}

	return false
}

// SetReplicaId gets a reference to the given string and assigns it to the ReplicaId field.
func (o *RegenRunnerCredResponse) SetReplicaId(v string) {
	o.ReplicaId = &v
}

func (o RegenRunnerCredResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegenRunnerCredResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RunnerId) {
		toSerialize["runnerId"] = o.RunnerId
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.DownloadTk) {
		toSerialize["downloadTk"] = o.DownloadTk
	}
	if !IsNil(o.ReplicaId) {
		toSerialize["replicaId"] = o.ReplicaId
	}
	return toSerialize, nil
}

type NullableRegenRunnerCredResponse struct {
	value *RegenRunnerCredResponse
	isSet bool
}

func (v NullableRegenRunnerCredResponse) Get() *RegenRunnerCredResponse {
	return v.value
}

func (v *NullableRegenRunnerCredResponse) Set(val *RegenRunnerCredResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRegenRunnerCredResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRegenRunnerCredResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegenRunnerCredResponse(val *RegenRunnerCredResponse) *NullableRegenRunnerCredResponse {
	return &NullableRegenRunnerCredResponse{value: val, isSet: true}
}

func (v NullableRegenRunnerCredResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegenRunnerCredResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


