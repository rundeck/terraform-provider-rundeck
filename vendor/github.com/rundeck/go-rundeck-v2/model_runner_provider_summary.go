/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RunnerProviderSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunnerProviderSummary{}

// RunnerProviderSummary struct for RunnerProviderSummary
type RunnerProviderSummary struct {
	Provider *string `json:"provider,omitempty"`
	ServiceName *string `json:"serviceName,omitempty"`
	PluginName *string `json:"pluginName,omitempty"`
}

// NewRunnerProviderSummary instantiates a new RunnerProviderSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunnerProviderSummary() *RunnerProviderSummary {
	this := RunnerProviderSummary{}
	return &this
}

// NewRunnerProviderSummaryWithDefaults instantiates a new RunnerProviderSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunnerProviderSummaryWithDefaults() *RunnerProviderSummary {
	this := RunnerProviderSummary{}
	return &this
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *RunnerProviderSummary) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerProviderSummary) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *RunnerProviderSummary) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *RunnerProviderSummary) SetProvider(v string) {
	o.Provider = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *RunnerProviderSummary) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerProviderSummary) GetServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *RunnerProviderSummary) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *RunnerProviderSummary) SetServiceName(v string) {
	o.ServiceName = &v
}

// GetPluginName returns the PluginName field value if set, zero value otherwise.
func (o *RunnerProviderSummary) GetPluginName() string {
	if o == nil || IsNil(o.PluginName) {
		var ret string
		return ret
	}
	return *o.PluginName
}

// GetPluginNameOk returns a tuple with the PluginName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerProviderSummary) GetPluginNameOk() (*string, bool) {
	if o == nil || IsNil(o.PluginName) {
		return nil, false
	}
	return o.PluginName, true
}

// HasPluginName returns a boolean if a field has been set.
func (o *RunnerProviderSummary) HasPluginName() bool {
	if o != nil && !IsNil(o.PluginName) {
		return true
	}

	return false
}

// SetPluginName gets a reference to the given string and assigns it to the PluginName field.
func (o *RunnerProviderSummary) SetPluginName(v string) {
	o.PluginName = &v
}

func (o RunnerProviderSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunnerProviderSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.ServiceName) {
		toSerialize["serviceName"] = o.ServiceName
	}
	if !IsNil(o.PluginName) {
		toSerialize["pluginName"] = o.PluginName
	}
	return toSerialize, nil
}

type NullableRunnerProviderSummary struct {
	value *RunnerProviderSummary
	isSet bool
}

func (v NullableRunnerProviderSummary) Get() *RunnerProviderSummary {
	return v.value
}

func (v *NullableRunnerProviderSummary) Set(val *RunnerProviderSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableRunnerProviderSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableRunnerProviderSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunnerProviderSummary(val *RunnerProviderSummary) *NullableRunnerProviderSummary {
	return &NullableRunnerProviderSummary{value: val, isSet: true}
}

func (v NullableRunnerProviderSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunnerProviderSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


