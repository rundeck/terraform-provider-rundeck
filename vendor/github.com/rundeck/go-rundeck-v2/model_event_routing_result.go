/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EventRoutingResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventRoutingResult{}

// EventRoutingResult struct for EventRoutingResult
type EventRoutingResult struct {
	Event *RouterEvent `json:"event,omitempty"`
	RuleRoutingResults []RuleRoutingResult `json:"ruleRoutingResults,omitempty"`
}

// NewEventRoutingResult instantiates a new EventRoutingResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventRoutingResult() *EventRoutingResult {
	this := EventRoutingResult{}
	return &this
}

// NewEventRoutingResultWithDefaults instantiates a new EventRoutingResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventRoutingResultWithDefaults() *EventRoutingResult {
	this := EventRoutingResult{}
	return &this
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *EventRoutingResult) GetEvent() RouterEvent {
	if o == nil || IsNil(o.Event) {
		var ret RouterEvent
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRoutingResult) GetEventOk() (*RouterEvent, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *EventRoutingResult) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given RouterEvent and assigns it to the Event field.
func (o *EventRoutingResult) SetEvent(v RouterEvent) {
	o.Event = &v
}

// GetRuleRoutingResults returns the RuleRoutingResults field value if set, zero value otherwise.
func (o *EventRoutingResult) GetRuleRoutingResults() []RuleRoutingResult {
	if o == nil || IsNil(o.RuleRoutingResults) {
		var ret []RuleRoutingResult
		return ret
	}
	return o.RuleRoutingResults
}

// GetRuleRoutingResultsOk returns a tuple with the RuleRoutingResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRoutingResult) GetRuleRoutingResultsOk() ([]RuleRoutingResult, bool) {
	if o == nil || IsNil(o.RuleRoutingResults) {
		return nil, false
	}
	return o.RuleRoutingResults, true
}

// HasRuleRoutingResults returns a boolean if a field has been set.
func (o *EventRoutingResult) HasRuleRoutingResults() bool {
	if o != nil && !IsNil(o.RuleRoutingResults) {
		return true
	}

	return false
}

// SetRuleRoutingResults gets a reference to the given []RuleRoutingResult and assigns it to the RuleRoutingResults field.
func (o *EventRoutingResult) SetRuleRoutingResults(v []RuleRoutingResult) {
	o.RuleRoutingResults = v
}

func (o EventRoutingResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventRoutingResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.RuleRoutingResults) {
		toSerialize["ruleRoutingResults"] = o.RuleRoutingResults
	}
	return toSerialize, nil
}

type NullableEventRoutingResult struct {
	value *EventRoutingResult
	isSet bool
}

func (v NullableEventRoutingResult) Get() *EventRoutingResult {
	return v.value
}

func (v *NullableEventRoutingResult) Set(val *EventRoutingResult) {
	v.value = val
	v.isSet = true
}

func (v NullableEventRoutingResult) IsSet() bool {
	return v.isSet
}

func (v *NullableEventRoutingResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventRoutingResult(val *EventRoutingResult) *NullableEventRoutingResult {
	return &NullableEventRoutingResult{value: val, isSet: true}
}

func (v NullableEventRoutingResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventRoutingResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


