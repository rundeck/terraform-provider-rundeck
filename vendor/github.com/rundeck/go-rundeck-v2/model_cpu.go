/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Cpu type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cpu{}

// Cpu Cpu Information
type Cpu struct {
	LoadAverage *LoadAverage `json:"loadAverage,omitempty"`
	Processors *int32 `json:"processors,omitempty"`
}

// NewCpu instantiates a new Cpu object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCpu() *Cpu {
	this := Cpu{}
	return &this
}

// NewCpuWithDefaults instantiates a new Cpu object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCpuWithDefaults() *Cpu {
	this := Cpu{}
	return &this
}

// GetLoadAverage returns the LoadAverage field value if set, zero value otherwise.
func (o *Cpu) GetLoadAverage() LoadAverage {
	if o == nil || IsNil(o.LoadAverage) {
		var ret LoadAverage
		return ret
	}
	return *o.LoadAverage
}

// GetLoadAverageOk returns a tuple with the LoadAverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cpu) GetLoadAverageOk() (*LoadAverage, bool) {
	if o == nil || IsNil(o.LoadAverage) {
		return nil, false
	}
	return o.LoadAverage, true
}

// HasLoadAverage returns a boolean if a field has been set.
func (o *Cpu) HasLoadAverage() bool {
	if o != nil && !IsNil(o.LoadAverage) {
		return true
	}

	return false
}

// SetLoadAverage gets a reference to the given LoadAverage and assigns it to the LoadAverage field.
func (o *Cpu) SetLoadAverage(v LoadAverage) {
	o.LoadAverage = &v
}

// GetProcessors returns the Processors field value if set, zero value otherwise.
func (o *Cpu) GetProcessors() int32 {
	if o == nil || IsNil(o.Processors) {
		var ret int32
		return ret
	}
	return *o.Processors
}

// GetProcessorsOk returns a tuple with the Processors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cpu) GetProcessorsOk() (*int32, bool) {
	if o == nil || IsNil(o.Processors) {
		return nil, false
	}
	return o.Processors, true
}

// HasProcessors returns a boolean if a field has been set.
func (o *Cpu) HasProcessors() bool {
	if o != nil && !IsNil(o.Processors) {
		return true
	}

	return false
}

// SetProcessors gets a reference to the given int32 and assigns it to the Processors field.
func (o *Cpu) SetProcessors(v int32) {
	o.Processors = &v
}

func (o Cpu) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cpu) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LoadAverage) {
		toSerialize["loadAverage"] = o.LoadAverage
	}
	if !IsNil(o.Processors) {
		toSerialize["processors"] = o.Processors
	}
	return toSerialize, nil
}

type NullableCpu struct {
	value *Cpu
	isSet bool
}

func (v NullableCpu) Get() *Cpu {
	return v.value
}

func (v *NullableCpu) Set(val *Cpu) {
	v.value = val
	v.isSet = true
}

func (v NullableCpu) IsSet() bool {
	return v.isSet
}

func (v *NullableCpu) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCpu(val *Cpu) *NullableCpu {
	return &NullableCpu{value: val, isSet: true}
}

func (v NullableCpu) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCpu) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


