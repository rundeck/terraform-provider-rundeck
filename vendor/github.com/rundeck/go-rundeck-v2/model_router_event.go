/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RouterEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouterEvent{}

// RouterEvent struct for RouterEvent
type RouterEvent struct {
	Meta *RouterEventMetadata `json:"meta,omitempty"`
	Event map[string]interface{} `json:"event,omitempty"`
}

// NewRouterEvent instantiates a new RouterEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouterEvent() *RouterEvent {
	this := RouterEvent{}
	return &this
}

// NewRouterEventWithDefaults instantiates a new RouterEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouterEventWithDefaults() *RouterEvent {
	this := RouterEvent{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *RouterEvent) GetMeta() RouterEventMetadata {
	if o == nil || IsNil(o.Meta) {
		var ret RouterEventMetadata
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouterEvent) GetMetaOk() (*RouterEventMetadata, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *RouterEvent) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given RouterEventMetadata and assigns it to the Meta field.
func (o *RouterEvent) SetMeta(v RouterEventMetadata) {
	o.Meta = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *RouterEvent) GetEvent() map[string]interface{} {
	if o == nil || IsNil(o.Event) {
		var ret map[string]interface{}
		return ret
	}
	return o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouterEvent) GetEventOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Event) {
		return map[string]interface{}{}, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *RouterEvent) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given map[string]interface{} and assigns it to the Event field.
func (o *RouterEvent) SetEvent(v map[string]interface{}) {
	o.Event = v
}

func (o RouterEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouterEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	return toSerialize, nil
}

type NullableRouterEvent struct {
	value *RouterEvent
	isSet bool
}

func (v NullableRouterEvent) Get() *RouterEvent {
	return v.value
}

func (v *NullableRouterEvent) Set(val *RouterEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableRouterEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableRouterEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouterEvent(val *RouterEvent) *NullableRouterEvent {
	return &NullableRouterEvent{value: val, isSet: true}
}

func (v NullableRouterEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouterEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


