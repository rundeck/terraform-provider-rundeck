/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LicenseEntitlementDescription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseEntitlementDescription{}

// LicenseEntitlementDescription struct for LicenseEntitlementDescription
type LicenseEntitlementDescription struct {
	Title *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	Properties []map[string]string `json:"properties,omitempty"`
}

// NewLicenseEntitlementDescription instantiates a new LicenseEntitlementDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseEntitlementDescription() *LicenseEntitlementDescription {
	this := LicenseEntitlementDescription{}
	return &this
}

// NewLicenseEntitlementDescriptionWithDefaults instantiates a new LicenseEntitlementDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseEntitlementDescriptionWithDefaults() *LicenseEntitlementDescription {
	this := LicenseEntitlementDescription{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *LicenseEntitlementDescription) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseEntitlementDescription) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *LicenseEntitlementDescription) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *LicenseEntitlementDescription) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LicenseEntitlementDescription) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseEntitlementDescription) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LicenseEntitlementDescription) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *LicenseEntitlementDescription) SetDescription(v string) {
	o.Description = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *LicenseEntitlementDescription) GetProperties() []map[string]string {
	if o == nil || IsNil(o.Properties) {
		var ret []map[string]string
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseEntitlementDescription) GetPropertiesOk() ([]map[string]string, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *LicenseEntitlementDescription) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given []map[string]string and assigns it to the Properties field.
func (o *LicenseEntitlementDescription) SetProperties(v []map[string]string) {
	o.Properties = v
}

func (o LicenseEntitlementDescription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseEntitlementDescription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

type NullableLicenseEntitlementDescription struct {
	value *LicenseEntitlementDescription
	isSet bool
}

func (v NullableLicenseEntitlementDescription) Get() *LicenseEntitlementDescription {
	return v.value
}

func (v *NullableLicenseEntitlementDescription) Set(val *LicenseEntitlementDescription) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseEntitlementDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseEntitlementDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseEntitlementDescription(val *LicenseEntitlementDescription) *NullableLicenseEntitlementDescription {
	return &NullableLicenseEntitlementDescription{value: val, isSet: true}
}

func (v NullableLicenseEntitlementDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseEntitlementDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


