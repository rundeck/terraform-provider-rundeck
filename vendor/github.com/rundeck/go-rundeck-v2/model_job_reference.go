/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the JobReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobReference{}

// JobReference struct for JobReference
type JobReference struct {
	JobId *string `json:"jobId,omitempty"`
	JobName *string `json:"jobName,omitempty"`
	GroupPath *string `json:"groupPath,omitempty"`
}

// NewJobReference instantiates a new JobReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobReference() *JobReference {
	this := JobReference{}
	return &this
}

// NewJobReferenceWithDefaults instantiates a new JobReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobReferenceWithDefaults() *JobReference {
	this := JobReference{}
	return &this
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *JobReference) GetJobId() string {
	if o == nil || IsNil(o.JobId) {
		var ret string
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobReference) GetJobIdOk() (*string, bool) {
	if o == nil || IsNil(o.JobId) {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *JobReference) HasJobId() bool {
	if o != nil && !IsNil(o.JobId) {
		return true
	}

	return false
}

// SetJobId gets a reference to the given string and assigns it to the JobId field.
func (o *JobReference) SetJobId(v string) {
	o.JobId = &v
}

// GetJobName returns the JobName field value if set, zero value otherwise.
func (o *JobReference) GetJobName() string {
	if o == nil || IsNil(o.JobName) {
		var ret string
		return ret
	}
	return *o.JobName
}

// GetJobNameOk returns a tuple with the JobName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobReference) GetJobNameOk() (*string, bool) {
	if o == nil || IsNil(o.JobName) {
		return nil, false
	}
	return o.JobName, true
}

// HasJobName returns a boolean if a field has been set.
func (o *JobReference) HasJobName() bool {
	if o != nil && !IsNil(o.JobName) {
		return true
	}

	return false
}

// SetJobName gets a reference to the given string and assigns it to the JobName field.
func (o *JobReference) SetJobName(v string) {
	o.JobName = &v
}

// GetGroupPath returns the GroupPath field value if set, zero value otherwise.
func (o *JobReference) GetGroupPath() string {
	if o == nil || IsNil(o.GroupPath) {
		var ret string
		return ret
	}
	return *o.GroupPath
}

// GetGroupPathOk returns a tuple with the GroupPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobReference) GetGroupPathOk() (*string, bool) {
	if o == nil || IsNil(o.GroupPath) {
		return nil, false
	}
	return o.GroupPath, true
}

// HasGroupPath returns a boolean if a field has been set.
func (o *JobReference) HasGroupPath() bool {
	if o != nil && !IsNil(o.GroupPath) {
		return true
	}

	return false
}

// SetGroupPath gets a reference to the given string and assigns it to the GroupPath field.
func (o *JobReference) SetGroupPath(v string) {
	o.GroupPath = &v
}

func (o JobReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.JobId) {
		toSerialize["jobId"] = o.JobId
	}
	if !IsNil(o.JobName) {
		toSerialize["jobName"] = o.JobName
	}
	if !IsNil(o.GroupPath) {
		toSerialize["groupPath"] = o.GroupPath
	}
	return toSerialize, nil
}

type NullableJobReference struct {
	value *JobReference
	isSet bool
}

func (v NullableJobReference) Get() *JobReference {
	return v.value
}

func (v *NullableJobReference) Set(val *JobReference) {
	v.value = val
	v.isSet = true
}

func (v NullableJobReference) IsSet() bool {
	return v.isSet
}

func (v *NullableJobReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobReference(val *JobReference) *NullableJobReference {
	return &NullableJobReference{value: val, isSet: true}
}

func (v NullableJobReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


