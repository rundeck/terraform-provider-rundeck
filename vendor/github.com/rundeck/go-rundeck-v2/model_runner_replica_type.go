/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RunnerReplicaType the model 'RunnerReplicaType'
type RunnerReplicaType string

// List of RunnerReplicaType
const (
	EPHEMERAL RunnerReplicaType = "EPHEMERAL"
	MANUAL RunnerReplicaType = "MANUAL"
)

// All allowed values of RunnerReplicaType enum
var AllowedRunnerReplicaTypeEnumValues = []RunnerReplicaType{
	"EPHEMERAL",
	"MANUAL",
}

func (v *RunnerReplicaType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RunnerReplicaType(value)
	for _, existing := range AllowedRunnerReplicaTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RunnerReplicaType", value)
}

// NewRunnerReplicaTypeFromValue returns a pointer to a valid RunnerReplicaType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRunnerReplicaTypeFromValue(v string) (*RunnerReplicaType, error) {
	ev := RunnerReplicaType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RunnerReplicaType: valid values are %v", v, AllowedRunnerReplicaTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RunnerReplicaType) IsValid() bool {
	for _, existing := range AllowedRunnerReplicaTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RunnerReplicaType value
func (v RunnerReplicaType) Ptr() *RunnerReplicaType {
	return &v
}

type NullableRunnerReplicaType struct {
	value *RunnerReplicaType
	isSet bool
}

func (v NullableRunnerReplicaType) Get() *RunnerReplicaType {
	return v.value
}

func (v *NullableRunnerReplicaType) Set(val *RunnerReplicaType) {
	v.value = val
	v.isSet = true
}

func (v NullableRunnerReplicaType) IsSet() bool {
	return v.isSet
}

func (v *NullableRunnerReplicaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunnerReplicaType(val *RunnerReplicaType) *NullableRunnerReplicaType {
	return &NullableRunnerReplicaType{value: val, isSet: true}
}

func (v NullableRunnerReplicaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunnerReplicaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

