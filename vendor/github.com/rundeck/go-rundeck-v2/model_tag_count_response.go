/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TagCountResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagCountResponse{}

// TagCountResponse struct for TagCountResponse
type TagCountResponse struct {
	Tags *map[string]int32 `json:"tags,omitempty"`
}

// NewTagCountResponse instantiates a new TagCountResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagCountResponse() *TagCountResponse {
	this := TagCountResponse{}
	return &this
}

// NewTagCountResponseWithDefaults instantiates a new TagCountResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagCountResponseWithDefaults() *TagCountResponse {
	this := TagCountResponse{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *TagCountResponse) GetTags() map[string]int32 {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]int32
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagCountResponse) GetTagsOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *TagCountResponse) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]int32 and assigns it to the Tags field.
func (o *TagCountResponse) SetTags(v map[string]int32) {
	o.Tags = &v
}

func (o TagCountResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagCountResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableTagCountResponse struct {
	value *TagCountResponse
	isSet bool
}

func (v NullableTagCountResponse) Get() *TagCountResponse {
	return v.value
}

func (v *NullableTagCountResponse) Set(val *TagCountResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTagCountResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTagCountResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagCountResponse(val *TagCountResponse) *NullableTagCountResponse {
	return &NullableTagCountResponse{value: val, isSet: true}
}

func (v NullableTagCountResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagCountResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


