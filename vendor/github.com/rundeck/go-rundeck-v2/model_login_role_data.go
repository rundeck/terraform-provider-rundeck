/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LoginRoleData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoginRoleData{}

// LoginRoleData struct for LoginRoleData
type LoginRoleData struct {
	Id *int64 `json:"id,omitempty"`
	Authority *string `json:"authority,omitempty"`
	Description *string `json:"description,omitempty"`
}

// NewLoginRoleData instantiates a new LoginRoleData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginRoleData() *LoginRoleData {
	this := LoginRoleData{}
	return &this
}

// NewLoginRoleDataWithDefaults instantiates a new LoginRoleData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginRoleDataWithDefaults() *LoginRoleData {
	this := LoginRoleData{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LoginRoleData) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginRoleData) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LoginRoleData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *LoginRoleData) SetId(v int64) {
	o.Id = &v
}

// GetAuthority returns the Authority field value if set, zero value otherwise.
func (o *LoginRoleData) GetAuthority() string {
	if o == nil || IsNil(o.Authority) {
		var ret string
		return ret
	}
	return *o.Authority
}

// GetAuthorityOk returns a tuple with the Authority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginRoleData) GetAuthorityOk() (*string, bool) {
	if o == nil || IsNil(o.Authority) {
		return nil, false
	}
	return o.Authority, true
}

// HasAuthority returns a boolean if a field has been set.
func (o *LoginRoleData) HasAuthority() bool {
	if o != nil && !IsNil(o.Authority) {
		return true
	}

	return false
}

// SetAuthority gets a reference to the given string and assigns it to the Authority field.
func (o *LoginRoleData) SetAuthority(v string) {
	o.Authority = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LoginRoleData) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginRoleData) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LoginRoleData) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *LoginRoleData) SetDescription(v string) {
	o.Description = &v
}

func (o LoginRoleData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoginRoleData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Authority) {
		toSerialize["authority"] = o.Authority
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableLoginRoleData struct {
	value *LoginRoleData
	isSet bool
}

func (v NullableLoginRoleData) Get() *LoginRoleData {
	return v.value
}

func (v *NullableLoginRoleData) Set(val *LoginRoleData) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginRoleData) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginRoleData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginRoleData(val *LoginRoleData) *NullableLoginRoleData {
	return &NullableLoginRoleData{value: val, isSet: true}
}

func (v NullableLoginRoleData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginRoleData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


