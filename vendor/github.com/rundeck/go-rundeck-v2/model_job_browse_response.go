/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the JobBrowseResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobBrowseResponse{}

// JobBrowseResponse struct for JobBrowseResponse
type JobBrowseResponse struct {
	Path *string `json:"path,omitempty"`
	Items []JobBrowseItemData `json:"items,omitempty"`
}

// NewJobBrowseResponse instantiates a new JobBrowseResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobBrowseResponse() *JobBrowseResponse {
	this := JobBrowseResponse{}
	return &this
}

// NewJobBrowseResponseWithDefaults instantiates a new JobBrowseResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobBrowseResponseWithDefaults() *JobBrowseResponse {
	this := JobBrowseResponse{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *JobBrowseResponse) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobBrowseResponse) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *JobBrowseResponse) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *JobBrowseResponse) SetPath(v string) {
	o.Path = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *JobBrowseResponse) GetItems() []JobBrowseItemData {
	if o == nil || IsNil(o.Items) {
		var ret []JobBrowseItemData
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobBrowseResponse) GetItemsOk() ([]JobBrowseItemData, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *JobBrowseResponse) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []JobBrowseItemData and assigns it to the Items field.
func (o *JobBrowseResponse) SetItems(v []JobBrowseItemData) {
	o.Items = v
}

func (o JobBrowseResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobBrowseResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableJobBrowseResponse struct {
	value *JobBrowseResponse
	isSet bool
}

func (v NullableJobBrowseResponse) Get() *JobBrowseResponse {
	return v.value
}

func (v *NullableJobBrowseResponse) Set(val *JobBrowseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableJobBrowseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableJobBrowseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobBrowseResponse(val *JobBrowseResponse) *NullableJobBrowseResponse {
	return &NullableJobBrowseResponse{value: val, isSet: true}
}

func (v NullableJobBrowseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobBrowseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


