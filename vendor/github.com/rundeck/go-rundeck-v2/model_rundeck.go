/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Rundeck type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rundeck{}

// Rundeck Rundeck Information
type Rundeck struct {
	Version *string `json:"version,omitempty"`
	Build *string `json:"build,omitempty"`
	BuildGit *string `json:"buildGit,omitempty"`
	Node *string `json:"node,omitempty"`
	Base *string `json:"base,omitempty"`
	Apiversion *string `json:"apiversion,omitempty"`
	ServerUUID *string `json:"serverUUID,omitempty"`
}

// NewRundeck instantiates a new Rundeck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRundeck() *Rundeck {
	this := Rundeck{}
	return &this
}

// NewRundeckWithDefaults instantiates a new Rundeck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRundeckWithDefaults() *Rundeck {
	this := Rundeck{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Rundeck) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rundeck) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Rundeck) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Rundeck) SetVersion(v string) {
	o.Version = &v
}

// GetBuild returns the Build field value if set, zero value otherwise.
func (o *Rundeck) GetBuild() string {
	if o == nil || IsNil(o.Build) {
		var ret string
		return ret
	}
	return *o.Build
}

// GetBuildOk returns a tuple with the Build field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rundeck) GetBuildOk() (*string, bool) {
	if o == nil || IsNil(o.Build) {
		return nil, false
	}
	return o.Build, true
}

// HasBuild returns a boolean if a field has been set.
func (o *Rundeck) HasBuild() bool {
	if o != nil && !IsNil(o.Build) {
		return true
	}

	return false
}

// SetBuild gets a reference to the given string and assigns it to the Build field.
func (o *Rundeck) SetBuild(v string) {
	o.Build = &v
}

// GetBuildGit returns the BuildGit field value if set, zero value otherwise.
func (o *Rundeck) GetBuildGit() string {
	if o == nil || IsNil(o.BuildGit) {
		var ret string
		return ret
	}
	return *o.BuildGit
}

// GetBuildGitOk returns a tuple with the BuildGit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rundeck) GetBuildGitOk() (*string, bool) {
	if o == nil || IsNil(o.BuildGit) {
		return nil, false
	}
	return o.BuildGit, true
}

// HasBuildGit returns a boolean if a field has been set.
func (o *Rundeck) HasBuildGit() bool {
	if o != nil && !IsNil(o.BuildGit) {
		return true
	}

	return false
}

// SetBuildGit gets a reference to the given string and assigns it to the BuildGit field.
func (o *Rundeck) SetBuildGit(v string) {
	o.BuildGit = &v
}

// GetNode returns the Node field value if set, zero value otherwise.
func (o *Rundeck) GetNode() string {
	if o == nil || IsNil(o.Node) {
		var ret string
		return ret
	}
	return *o.Node
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rundeck) GetNodeOk() (*string, bool) {
	if o == nil || IsNil(o.Node) {
		return nil, false
	}
	return o.Node, true
}

// HasNode returns a boolean if a field has been set.
func (o *Rundeck) HasNode() bool {
	if o != nil && !IsNil(o.Node) {
		return true
	}

	return false
}

// SetNode gets a reference to the given string and assigns it to the Node field.
func (o *Rundeck) SetNode(v string) {
	o.Node = &v
}

// GetBase returns the Base field value if set, zero value otherwise.
func (o *Rundeck) GetBase() string {
	if o == nil || IsNil(o.Base) {
		var ret string
		return ret
	}
	return *o.Base
}

// GetBaseOk returns a tuple with the Base field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rundeck) GetBaseOk() (*string, bool) {
	if o == nil || IsNil(o.Base) {
		return nil, false
	}
	return o.Base, true
}

// HasBase returns a boolean if a field has been set.
func (o *Rundeck) HasBase() bool {
	if o != nil && !IsNil(o.Base) {
		return true
	}

	return false
}

// SetBase gets a reference to the given string and assigns it to the Base field.
func (o *Rundeck) SetBase(v string) {
	o.Base = &v
}

// GetApiversion returns the Apiversion field value if set, zero value otherwise.
func (o *Rundeck) GetApiversion() string {
	if o == nil || IsNil(o.Apiversion) {
		var ret string
		return ret
	}
	return *o.Apiversion
}

// GetApiversionOk returns a tuple with the Apiversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rundeck) GetApiversionOk() (*string, bool) {
	if o == nil || IsNil(o.Apiversion) {
		return nil, false
	}
	return o.Apiversion, true
}

// HasApiversion returns a boolean if a field has been set.
func (o *Rundeck) HasApiversion() bool {
	if o != nil && !IsNil(o.Apiversion) {
		return true
	}

	return false
}

// SetApiversion gets a reference to the given string and assigns it to the Apiversion field.
func (o *Rundeck) SetApiversion(v string) {
	o.Apiversion = &v
}

// GetServerUUID returns the ServerUUID field value if set, zero value otherwise.
func (o *Rundeck) GetServerUUID() string {
	if o == nil || IsNil(o.ServerUUID) {
		var ret string
		return ret
	}
	return *o.ServerUUID
}

// GetServerUUIDOk returns a tuple with the ServerUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rundeck) GetServerUUIDOk() (*string, bool) {
	if o == nil || IsNil(o.ServerUUID) {
		return nil, false
	}
	return o.ServerUUID, true
}

// HasServerUUID returns a boolean if a field has been set.
func (o *Rundeck) HasServerUUID() bool {
	if o != nil && !IsNil(o.ServerUUID) {
		return true
	}

	return false
}

// SetServerUUID gets a reference to the given string and assigns it to the ServerUUID field.
func (o *Rundeck) SetServerUUID(v string) {
	o.ServerUUID = &v
}

func (o Rundeck) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rundeck) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Build) {
		toSerialize["build"] = o.Build
	}
	if !IsNil(o.BuildGit) {
		toSerialize["buildGit"] = o.BuildGit
	}
	if !IsNil(o.Node) {
		toSerialize["node"] = o.Node
	}
	if !IsNil(o.Base) {
		toSerialize["base"] = o.Base
	}
	if !IsNil(o.Apiversion) {
		toSerialize["apiversion"] = o.Apiversion
	}
	if !IsNil(o.ServerUUID) {
		toSerialize["serverUUID"] = o.ServerUUID
	}
	return toSerialize, nil
}

type NullableRundeck struct {
	value *Rundeck
	isSet bool
}

func (v NullableRundeck) Get() *Rundeck {
	return v.value
}

func (v *NullableRundeck) Set(val *Rundeck) {
	v.value = val
	v.isSet = true
}

func (v NullableRundeck) IsSet() bool {
	return v.isSet
}

func (v *NullableRundeck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRundeck(val *Rundeck) *NullableRundeck {
	return &NullableRundeck{value: val, isSet: true}
}

func (v NullableRundeck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRundeck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


