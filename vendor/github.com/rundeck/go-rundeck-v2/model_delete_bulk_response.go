/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DeleteBulkResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteBulkResponse{}

// DeleteBulkResponse struct for DeleteBulkResponse
type DeleteBulkResponse struct {
	// number of requested execution deletions
	RequestCount *int32 `json:"requestCount,omitempty"`
	// true if all deletions were successful
	Allsuccessful *bool `json:"allsuccessful,omitempty"`
	// number of deletion attempts that succeeded
	SuccessCount *int32 `json:"successCount,omitempty"`
	// number of deletion attempts that failed
	FailedCount *int32 `json:"failedCount,omitempty"`
	Failures []FailedItem `json:"failures,omitempty"`
}

// NewDeleteBulkResponse instantiates a new DeleteBulkResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteBulkResponse() *DeleteBulkResponse {
	this := DeleteBulkResponse{}
	return &this
}

// NewDeleteBulkResponseWithDefaults instantiates a new DeleteBulkResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteBulkResponseWithDefaults() *DeleteBulkResponse {
	this := DeleteBulkResponse{}
	return &this
}

// GetRequestCount returns the RequestCount field value if set, zero value otherwise.
func (o *DeleteBulkResponse) GetRequestCount() int32 {
	if o == nil || IsNil(o.RequestCount) {
		var ret int32
		return ret
	}
	return *o.RequestCount
}

// GetRequestCountOk returns a tuple with the RequestCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteBulkResponse) GetRequestCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RequestCount) {
		return nil, false
	}
	return o.RequestCount, true
}

// HasRequestCount returns a boolean if a field has been set.
func (o *DeleteBulkResponse) HasRequestCount() bool {
	if o != nil && !IsNil(o.RequestCount) {
		return true
	}

	return false
}

// SetRequestCount gets a reference to the given int32 and assigns it to the RequestCount field.
func (o *DeleteBulkResponse) SetRequestCount(v int32) {
	o.RequestCount = &v
}

// GetAllsuccessful returns the Allsuccessful field value if set, zero value otherwise.
func (o *DeleteBulkResponse) GetAllsuccessful() bool {
	if o == nil || IsNil(o.Allsuccessful) {
		var ret bool
		return ret
	}
	return *o.Allsuccessful
}

// GetAllsuccessfulOk returns a tuple with the Allsuccessful field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteBulkResponse) GetAllsuccessfulOk() (*bool, bool) {
	if o == nil || IsNil(o.Allsuccessful) {
		return nil, false
	}
	return o.Allsuccessful, true
}

// HasAllsuccessful returns a boolean if a field has been set.
func (o *DeleteBulkResponse) HasAllsuccessful() bool {
	if o != nil && !IsNil(o.Allsuccessful) {
		return true
	}

	return false
}

// SetAllsuccessful gets a reference to the given bool and assigns it to the Allsuccessful field.
func (o *DeleteBulkResponse) SetAllsuccessful(v bool) {
	o.Allsuccessful = &v
}

// GetSuccessCount returns the SuccessCount field value if set, zero value otherwise.
func (o *DeleteBulkResponse) GetSuccessCount() int32 {
	if o == nil || IsNil(o.SuccessCount) {
		var ret int32
		return ret
	}
	return *o.SuccessCount
}

// GetSuccessCountOk returns a tuple with the SuccessCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteBulkResponse) GetSuccessCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SuccessCount) {
		return nil, false
	}
	return o.SuccessCount, true
}

// HasSuccessCount returns a boolean if a field has been set.
func (o *DeleteBulkResponse) HasSuccessCount() bool {
	if o != nil && !IsNil(o.SuccessCount) {
		return true
	}

	return false
}

// SetSuccessCount gets a reference to the given int32 and assigns it to the SuccessCount field.
func (o *DeleteBulkResponse) SetSuccessCount(v int32) {
	o.SuccessCount = &v
}

// GetFailedCount returns the FailedCount field value if set, zero value otherwise.
func (o *DeleteBulkResponse) GetFailedCount() int32 {
	if o == nil || IsNil(o.FailedCount) {
		var ret int32
		return ret
	}
	return *o.FailedCount
}

// GetFailedCountOk returns a tuple with the FailedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteBulkResponse) GetFailedCountOk() (*int32, bool) {
	if o == nil || IsNil(o.FailedCount) {
		return nil, false
	}
	return o.FailedCount, true
}

// HasFailedCount returns a boolean if a field has been set.
func (o *DeleteBulkResponse) HasFailedCount() bool {
	if o != nil && !IsNil(o.FailedCount) {
		return true
	}

	return false
}

// SetFailedCount gets a reference to the given int32 and assigns it to the FailedCount field.
func (o *DeleteBulkResponse) SetFailedCount(v int32) {
	o.FailedCount = &v
}

// GetFailures returns the Failures field value if set, zero value otherwise.
func (o *DeleteBulkResponse) GetFailures() []FailedItem {
	if o == nil || IsNil(o.Failures) {
		var ret []FailedItem
		return ret
	}
	return o.Failures
}

// GetFailuresOk returns a tuple with the Failures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteBulkResponse) GetFailuresOk() ([]FailedItem, bool) {
	if o == nil || IsNil(o.Failures) {
		return nil, false
	}
	return o.Failures, true
}

// HasFailures returns a boolean if a field has been set.
func (o *DeleteBulkResponse) HasFailures() bool {
	if o != nil && !IsNil(o.Failures) {
		return true
	}

	return false
}

// SetFailures gets a reference to the given []FailedItem and assigns it to the Failures field.
func (o *DeleteBulkResponse) SetFailures(v []FailedItem) {
	o.Failures = v
}

func (o DeleteBulkResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteBulkResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RequestCount) {
		toSerialize["requestCount"] = o.RequestCount
	}
	if !IsNil(o.Allsuccessful) {
		toSerialize["allsuccessful"] = o.Allsuccessful
	}
	if !IsNil(o.SuccessCount) {
		toSerialize["successCount"] = o.SuccessCount
	}
	if !IsNil(o.FailedCount) {
		toSerialize["failedCount"] = o.FailedCount
	}
	if !IsNil(o.Failures) {
		toSerialize["failures"] = o.Failures
	}
	return toSerialize, nil
}

type NullableDeleteBulkResponse struct {
	value *DeleteBulkResponse
	isSet bool
}

func (v NullableDeleteBulkResponse) Get() *DeleteBulkResponse {
	return v.value
}

func (v *NullableDeleteBulkResponse) Set(val *DeleteBulkResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteBulkResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteBulkResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteBulkResponse(val *DeleteBulkResponse) *NullableDeleteBulkResponse {
	return &NullableDeleteBulkResponse{value: val, isSet: true}
}

func (v NullableDeleteBulkResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteBulkResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


