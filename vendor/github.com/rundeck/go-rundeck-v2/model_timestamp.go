/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Timestamp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Timestamp{}

// Timestamp Timestamp Information
type Timestamp struct {
	Epoch *int64 `json:"epoch,omitempty"`
	Unit *string `json:"unit,omitempty"`
	Datetime *string `json:"datetime,omitempty"`
}

// NewTimestamp instantiates a new Timestamp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimestamp() *Timestamp {
	this := Timestamp{}
	return &this
}

// NewTimestampWithDefaults instantiates a new Timestamp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimestampWithDefaults() *Timestamp {
	this := Timestamp{}
	return &this
}

// GetEpoch returns the Epoch field value if set, zero value otherwise.
func (o *Timestamp) GetEpoch() int64 {
	if o == nil || IsNil(o.Epoch) {
		var ret int64
		return ret
	}
	return *o.Epoch
}

// GetEpochOk returns a tuple with the Epoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Timestamp) GetEpochOk() (*int64, bool) {
	if o == nil || IsNil(o.Epoch) {
		return nil, false
	}
	return o.Epoch, true
}

// HasEpoch returns a boolean if a field has been set.
func (o *Timestamp) HasEpoch() bool {
	if o != nil && !IsNil(o.Epoch) {
		return true
	}

	return false
}

// SetEpoch gets a reference to the given int64 and assigns it to the Epoch field.
func (o *Timestamp) SetEpoch(v int64) {
	o.Epoch = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *Timestamp) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Timestamp) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *Timestamp) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *Timestamp) SetUnit(v string) {
	o.Unit = &v
}

// GetDatetime returns the Datetime field value if set, zero value otherwise.
func (o *Timestamp) GetDatetime() string {
	if o == nil || IsNil(o.Datetime) {
		var ret string
		return ret
	}
	return *o.Datetime
}

// GetDatetimeOk returns a tuple with the Datetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Timestamp) GetDatetimeOk() (*string, bool) {
	if o == nil || IsNil(o.Datetime) {
		return nil, false
	}
	return o.Datetime, true
}

// HasDatetime returns a boolean if a field has been set.
func (o *Timestamp) HasDatetime() bool {
	if o != nil && !IsNil(o.Datetime) {
		return true
	}

	return false
}

// SetDatetime gets a reference to the given string and assigns it to the Datetime field.
func (o *Timestamp) SetDatetime(v string) {
	o.Datetime = &v
}

func (o Timestamp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Timestamp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Epoch) {
		toSerialize["epoch"] = o.Epoch
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.Datetime) {
		toSerialize["datetime"] = o.Datetime
	}
	return toSerialize, nil
}

type NullableTimestamp struct {
	value *Timestamp
	isSet bool
}

func (v NullableTimestamp) Get() *Timestamp {
	return v.value
}

func (v *NullableTimestamp) Set(val *Timestamp) {
	v.value = val
	v.isSet = true
}

func (v NullableTimestamp) IsSet() bool {
	return v.isSet
}

func (v *NullableTimestamp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimestamp(val *Timestamp) *NullableTimestamp {
	return &NullableTimestamp{value: val, isSet: true}
}

func (v NullableTimestamp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimestamp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


