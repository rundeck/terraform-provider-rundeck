/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScmPluginSetupInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScmPluginSetupInput{}

// ScmPluginSetupInput struct for ScmPluginSetupInput
type ScmPluginSetupInput struct {
	Type *string `json:"type,omitempty"`
	Integration *string `json:"integration,omitempty"`
	Fields []ScmPluginInputField `json:"fields,omitempty"`
}

// NewScmPluginSetupInput instantiates a new ScmPluginSetupInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScmPluginSetupInput() *ScmPluginSetupInput {
	this := ScmPluginSetupInput{}
	return &this
}

// NewScmPluginSetupInputWithDefaults instantiates a new ScmPluginSetupInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScmPluginSetupInputWithDefaults() *ScmPluginSetupInput {
	this := ScmPluginSetupInput{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ScmPluginSetupInput) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmPluginSetupInput) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ScmPluginSetupInput) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ScmPluginSetupInput) SetType(v string) {
	o.Type = &v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *ScmPluginSetupInput) GetIntegration() string {
	if o == nil || IsNil(o.Integration) {
		var ret string
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmPluginSetupInput) GetIntegrationOk() (*string, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *ScmPluginSetupInput) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given string and assigns it to the Integration field.
func (o *ScmPluginSetupInput) SetIntegration(v string) {
	o.Integration = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *ScmPluginSetupInput) GetFields() []ScmPluginInputField {
	if o == nil || IsNil(o.Fields) {
		var ret []ScmPluginInputField
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmPluginSetupInput) GetFieldsOk() ([]ScmPluginInputField, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *ScmPluginSetupInput) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given []ScmPluginInputField and assigns it to the Fields field.
func (o *ScmPluginSetupInput) SetFields(v []ScmPluginInputField) {
	o.Fields = v
}

func (o ScmPluginSetupInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScmPluginSetupInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	return toSerialize, nil
}

type NullableScmPluginSetupInput struct {
	value *ScmPluginSetupInput
	isSet bool
}

func (v NullableScmPluginSetupInput) Get() *ScmPluginSetupInput {
	return v.value
}

func (v *NullableScmPluginSetupInput) Set(val *ScmPluginSetupInput) {
	v.value = val
	v.isSet = true
}

func (v NullableScmPluginSetupInput) IsSet() bool {
	return v.isSet
}

func (v *NullableScmPluginSetupInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScmPluginSetupInput(val *ScmPluginSetupInput) *NullableScmPluginSetupInput {
	return &NullableScmPluginSetupInput{value: val, isSet: true}
}

func (v NullableScmPluginSetupInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScmPluginSetupInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


