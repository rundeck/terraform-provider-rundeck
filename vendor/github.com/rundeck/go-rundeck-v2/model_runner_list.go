/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RunnerList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunnerList{}

// RunnerList struct for RunnerList
type RunnerList struct {
	Runners []RunnerSummary `json:"runners,omitempty"`
}

// NewRunnerList instantiates a new RunnerList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunnerList() *RunnerList {
	this := RunnerList{}
	return &this
}

// NewRunnerListWithDefaults instantiates a new RunnerList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunnerListWithDefaults() *RunnerList {
	this := RunnerList{}
	return &this
}

// GetRunners returns the Runners field value if set, zero value otherwise.
func (o *RunnerList) GetRunners() []RunnerSummary {
	if o == nil || IsNil(o.Runners) {
		var ret []RunnerSummary
		return ret
	}
	return o.Runners
}

// GetRunnersOk returns a tuple with the Runners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunnerList) GetRunnersOk() ([]RunnerSummary, bool) {
	if o == nil || IsNil(o.Runners) {
		return nil, false
	}
	return o.Runners, true
}

// HasRunners returns a boolean if a field has been set.
func (o *RunnerList) HasRunners() bool {
	if o != nil && !IsNil(o.Runners) {
		return true
	}

	return false
}

// SetRunners gets a reference to the given []RunnerSummary and assigns it to the Runners field.
func (o *RunnerList) SetRunners(v []RunnerSummary) {
	o.Runners = v
}

func (o RunnerList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunnerList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Runners) {
		toSerialize["runners"] = o.Runners
	}
	return toSerialize, nil
}

type NullableRunnerList struct {
	value *RunnerList
	isSet bool
}

func (v NullableRunnerList) Get() *RunnerList {
	return v.value
}

func (v *NullableRunnerList) Set(val *RunnerList) {
	v.value = val
	v.isSet = true
}

func (v NullableRunnerList) IsSet() bool {
	return v.isSet
}

func (v *NullableRunnerList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunnerList(val *RunnerList) *NullableRunnerList {
	return &NullableRunnerList{value: val, isSet: true}
}

func (v NullableRunnerList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunnerList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


