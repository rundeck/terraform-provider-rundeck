/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RoutingRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutingRule{}

// RoutingRule struct for RoutingRule
type RoutingRule struct {
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Debug *bool `json:"debug,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Policy *PolicyType `json:"policy,omitempty"`
	JobId *string `json:"jobId,omitempty"`
	JobArgString *string `json:"jobArgString,omitempty"`
	JobOptions []JobOption `json:"jobOptions,omitempty"`
	NodeFilter *string `json:"nodeFilter,omitempty"`
	User *string `json:"user,omitempty"`
	Conditions []Condition `json:"conditions,omitempty"`
}

// NewRoutingRule instantiates a new RoutingRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingRule() *RoutingRule {
	this := RoutingRule{}
	return &this
}

// NewRoutingRuleWithDefaults instantiates a new RoutingRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingRuleWithDefaults() *RoutingRule {
	this := RoutingRule{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoutingRule) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingRule) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoutingRule) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoutingRule) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RoutingRule) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingRule) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RoutingRule) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RoutingRule) SetDescription(v string) {
	o.Description = &v
}

// GetDebug returns the Debug field value if set, zero value otherwise.
func (o *RoutingRule) GetDebug() bool {
	if o == nil || IsNil(o.Debug) {
		var ret bool
		return ret
	}
	return *o.Debug
}

// GetDebugOk returns a tuple with the Debug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingRule) GetDebugOk() (*bool, bool) {
	if o == nil || IsNil(o.Debug) {
		return nil, false
	}
	return o.Debug, true
}

// HasDebug returns a boolean if a field has been set.
func (o *RoutingRule) HasDebug() bool {
	if o != nil && !IsNil(o.Debug) {
		return true
	}

	return false
}

// SetDebug gets a reference to the given bool and assigns it to the Debug field.
func (o *RoutingRule) SetDebug(v bool) {
	o.Debug = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RoutingRule) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingRule) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RoutingRule) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RoutingRule) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *RoutingRule) GetPolicy() PolicyType {
	if o == nil || IsNil(o.Policy) {
		var ret PolicyType
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingRule) GetPolicyOk() (*PolicyType, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *RoutingRule) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given PolicyType and assigns it to the Policy field.
func (o *RoutingRule) SetPolicy(v PolicyType) {
	o.Policy = &v
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *RoutingRule) GetJobId() string {
	if o == nil || IsNil(o.JobId) {
		var ret string
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingRule) GetJobIdOk() (*string, bool) {
	if o == nil || IsNil(o.JobId) {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *RoutingRule) HasJobId() bool {
	if o != nil && !IsNil(o.JobId) {
		return true
	}

	return false
}

// SetJobId gets a reference to the given string and assigns it to the JobId field.
func (o *RoutingRule) SetJobId(v string) {
	o.JobId = &v
}

// GetJobArgString returns the JobArgString field value if set, zero value otherwise.
func (o *RoutingRule) GetJobArgString() string {
	if o == nil || IsNil(o.JobArgString) {
		var ret string
		return ret
	}
	return *o.JobArgString
}

// GetJobArgStringOk returns a tuple with the JobArgString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingRule) GetJobArgStringOk() (*string, bool) {
	if o == nil || IsNil(o.JobArgString) {
		return nil, false
	}
	return o.JobArgString, true
}

// HasJobArgString returns a boolean if a field has been set.
func (o *RoutingRule) HasJobArgString() bool {
	if o != nil && !IsNil(o.JobArgString) {
		return true
	}

	return false
}

// SetJobArgString gets a reference to the given string and assigns it to the JobArgString field.
func (o *RoutingRule) SetJobArgString(v string) {
	o.JobArgString = &v
}

// GetJobOptions returns the JobOptions field value if set, zero value otherwise.
func (o *RoutingRule) GetJobOptions() []JobOption {
	if o == nil || IsNil(o.JobOptions) {
		var ret []JobOption
		return ret
	}
	return o.JobOptions
}

// GetJobOptionsOk returns a tuple with the JobOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingRule) GetJobOptionsOk() ([]JobOption, bool) {
	if o == nil || IsNil(o.JobOptions) {
		return nil, false
	}
	return o.JobOptions, true
}

// HasJobOptions returns a boolean if a field has been set.
func (o *RoutingRule) HasJobOptions() bool {
	if o != nil && !IsNil(o.JobOptions) {
		return true
	}

	return false
}

// SetJobOptions gets a reference to the given []JobOption and assigns it to the JobOptions field.
func (o *RoutingRule) SetJobOptions(v []JobOption) {
	o.JobOptions = v
}

// GetNodeFilter returns the NodeFilter field value if set, zero value otherwise.
func (o *RoutingRule) GetNodeFilter() string {
	if o == nil || IsNil(o.NodeFilter) {
		var ret string
		return ret
	}
	return *o.NodeFilter
}

// GetNodeFilterOk returns a tuple with the NodeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingRule) GetNodeFilterOk() (*string, bool) {
	if o == nil || IsNil(o.NodeFilter) {
		return nil, false
	}
	return o.NodeFilter, true
}

// HasNodeFilter returns a boolean if a field has been set.
func (o *RoutingRule) HasNodeFilter() bool {
	if o != nil && !IsNil(o.NodeFilter) {
		return true
	}

	return false
}

// SetNodeFilter gets a reference to the given string and assigns it to the NodeFilter field.
func (o *RoutingRule) SetNodeFilter(v string) {
	o.NodeFilter = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *RoutingRule) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingRule) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *RoutingRule) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *RoutingRule) SetUser(v string) {
	o.User = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *RoutingRule) GetConditions() []Condition {
	if o == nil || IsNil(o.Conditions) {
		var ret []Condition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingRule) GetConditionsOk() ([]Condition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *RoutingRule) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []Condition and assigns it to the Conditions field.
func (o *RoutingRule) SetConditions(v []Condition) {
	o.Conditions = v
}

func (o RoutingRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutingRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Debug) {
		toSerialize["debug"] = o.Debug
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	if !IsNil(o.JobId) {
		toSerialize["jobId"] = o.JobId
	}
	if !IsNil(o.JobArgString) {
		toSerialize["jobArgString"] = o.JobArgString
	}
	if !IsNil(o.JobOptions) {
		toSerialize["jobOptions"] = o.JobOptions
	}
	if !IsNil(o.NodeFilter) {
		toSerialize["nodeFilter"] = o.NodeFilter
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	return toSerialize, nil
}

type NullableRoutingRule struct {
	value *RoutingRule
	isSet bool
}

func (v NullableRoutingRule) Get() *RoutingRule {
	return v.value
}

func (v *NullableRoutingRule) Set(val *RoutingRule) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingRule) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingRule(val *RoutingRule) *NullableRoutingRule {
	return &NullableRoutingRule{value: val, isSet: true}
}

func (v NullableRoutingRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


