/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ApiTokenCreateRequest - struct for ApiTokenCreateRequest
type ApiTokenCreateRequest struct {
	CreateToken *CreateToken
	CreateTokenStringRoles *CreateTokenStringRoles
}

// CreateTokenAsApiTokenCreateRequest is a convenience function that returns CreateToken wrapped in ApiTokenCreateRequest
func CreateTokenAsApiTokenCreateRequest(v *CreateToken) ApiTokenCreateRequest {
	return ApiTokenCreateRequest{
		CreateToken: v,
	}
}

// CreateTokenStringRolesAsApiTokenCreateRequest is a convenience function that returns CreateTokenStringRoles wrapped in ApiTokenCreateRequest
func CreateTokenStringRolesAsApiTokenCreateRequest(v *CreateTokenStringRoles) ApiTokenCreateRequest {
	return ApiTokenCreateRequest{
		CreateTokenStringRoles: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ApiTokenCreateRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateToken
	err = newStrictDecoder(data).Decode(&dst.CreateToken)
	if err == nil {
		jsonCreateToken, _ := json.Marshal(dst.CreateToken)
		if string(jsonCreateToken) == "{}" { // empty struct
			dst.CreateToken = nil
		} else {
			if err = validator.Validate(dst.CreateToken); err != nil {
				dst.CreateToken = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateToken = nil
	}

	// try to unmarshal data into CreateTokenStringRoles
	err = newStrictDecoder(data).Decode(&dst.CreateTokenStringRoles)
	if err == nil {
		jsonCreateTokenStringRoles, _ := json.Marshal(dst.CreateTokenStringRoles)
		if string(jsonCreateTokenStringRoles) == "{}" { // empty struct
			dst.CreateTokenStringRoles = nil
		} else {
			if err = validator.Validate(dst.CreateTokenStringRoles); err != nil {
				dst.CreateTokenStringRoles = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateTokenStringRoles = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateToken = nil
		dst.CreateTokenStringRoles = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ApiTokenCreateRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ApiTokenCreateRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ApiTokenCreateRequest) MarshalJSON() ([]byte, error) {
	if src.CreateToken != nil {
		return json.Marshal(&src.CreateToken)
	}

	if src.CreateTokenStringRoles != nil {
		return json.Marshal(&src.CreateTokenStringRoles)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ApiTokenCreateRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateToken != nil {
		return obj.CreateToken
	}

	if obj.CreateTokenStringRoles != nil {
		return obj.CreateTokenStringRoles
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ApiTokenCreateRequest) GetActualInstanceValue() (interface{}) {
	if obj.CreateToken != nil {
		return *obj.CreateToken
	}

	if obj.CreateTokenStringRoles != nil {
		return *obj.CreateTokenStringRoles
	}

	// all schemas are nil
	return nil
}

type NullableApiTokenCreateRequest struct {
	value *ApiTokenCreateRequest
	isSet bool
}

func (v NullableApiTokenCreateRequest) Get() *ApiTokenCreateRequest {
	return v.value
}

func (v *NullableApiTokenCreateRequest) Set(val *ApiTokenCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableApiTokenCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableApiTokenCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiTokenCreateRequest(val *ApiTokenCreateRequest) *NullableApiTokenCreateRequest {
	return &NullableApiTokenCreateRequest{value: val, isSet: true}
}

func (v NullableApiTokenCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiTokenCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


