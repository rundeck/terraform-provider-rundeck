/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the JobFileUpload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobFileUpload{}

// JobFileUpload struct for JobFileUpload
type JobFileUpload struct {
	Total *int32 `json:"total,omitempty"`
	Options *map[string]string `json:"options,omitempty"`
}

// NewJobFileUpload instantiates a new JobFileUpload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobFileUpload() *JobFileUpload {
	this := JobFileUpload{}
	return &this
}

// NewJobFileUploadWithDefaults instantiates a new JobFileUpload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobFileUploadWithDefaults() *JobFileUpload {
	this := JobFileUpload{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *JobFileUpload) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobFileUpload) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *JobFileUpload) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *JobFileUpload) SetTotal(v int32) {
	o.Total = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *JobFileUpload) GetOptions() map[string]string {
	if o == nil || IsNil(o.Options) {
		var ret map[string]string
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobFileUpload) GetOptionsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *JobFileUpload) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]string and assigns it to the Options field.
func (o *JobFileUpload) SetOptions(v map[string]string) {
	o.Options = &v
}

func (o JobFileUpload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobFileUpload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableJobFileUpload struct {
	value *JobFileUpload
	isSet bool
}

func (v NullableJobFileUpload) Get() *JobFileUpload {
	return v.value
}

func (v *NullableJobFileUpload) Set(val *JobFileUpload) {
	v.value = val
	v.isSet = true
}

func (v NullableJobFileUpload) IsSet() bool {
	return v.isSet
}

func (v *NullableJobFileUpload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobFileUpload(val *JobFileUpload) *NullableJobFileUpload {
	return &NullableJobFileUpload{value: val, isSet: true}
}

func (v NullableJobFileUpload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobFileUpload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


