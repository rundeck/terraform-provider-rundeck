/*
Rundeck

Rundeck provides a Web API for use with your applications.

API version: 53
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserClassAllocationChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserClassAllocationChange{}

// UserClassAllocationChange struct for UserClassAllocationChange
type UserClassAllocationChange struct {
	Usernames []string `json:"usernames,omitempty"`
	BulkAssign *string `json:"bulkAssign,omitempty"`
	BulkRemove *bool `json:"bulkRemove,omitempty"`
	// The current User Class allocation set, as a map of user name to user class name.
	Allocations *map[string]string `json:"allocations,omitempty"`
}

// NewUserClassAllocationChange instantiates a new UserClassAllocationChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserClassAllocationChange() *UserClassAllocationChange {
	this := UserClassAllocationChange{}
	return &this
}

// NewUserClassAllocationChangeWithDefaults instantiates a new UserClassAllocationChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserClassAllocationChangeWithDefaults() *UserClassAllocationChange {
	this := UserClassAllocationChange{}
	return &this
}

// GetUsernames returns the Usernames field value if set, zero value otherwise.
func (o *UserClassAllocationChange) GetUsernames() []string {
	if o == nil || IsNil(o.Usernames) {
		var ret []string
		return ret
	}
	return o.Usernames
}

// GetUsernamesOk returns a tuple with the Usernames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserClassAllocationChange) GetUsernamesOk() ([]string, bool) {
	if o == nil || IsNil(o.Usernames) {
		return nil, false
	}
	return o.Usernames, true
}

// HasUsernames returns a boolean if a field has been set.
func (o *UserClassAllocationChange) HasUsernames() bool {
	if o != nil && !IsNil(o.Usernames) {
		return true
	}

	return false
}

// SetUsernames gets a reference to the given []string and assigns it to the Usernames field.
func (o *UserClassAllocationChange) SetUsernames(v []string) {
	o.Usernames = v
}

// GetBulkAssign returns the BulkAssign field value if set, zero value otherwise.
func (o *UserClassAllocationChange) GetBulkAssign() string {
	if o == nil || IsNil(o.BulkAssign) {
		var ret string
		return ret
	}
	return *o.BulkAssign
}

// GetBulkAssignOk returns a tuple with the BulkAssign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserClassAllocationChange) GetBulkAssignOk() (*string, bool) {
	if o == nil || IsNil(o.BulkAssign) {
		return nil, false
	}
	return o.BulkAssign, true
}

// HasBulkAssign returns a boolean if a field has been set.
func (o *UserClassAllocationChange) HasBulkAssign() bool {
	if o != nil && !IsNil(o.BulkAssign) {
		return true
	}

	return false
}

// SetBulkAssign gets a reference to the given string and assigns it to the BulkAssign field.
func (o *UserClassAllocationChange) SetBulkAssign(v string) {
	o.BulkAssign = &v
}

// GetBulkRemove returns the BulkRemove field value if set, zero value otherwise.
func (o *UserClassAllocationChange) GetBulkRemove() bool {
	if o == nil || IsNil(o.BulkRemove) {
		var ret bool
		return ret
	}
	return *o.BulkRemove
}

// GetBulkRemoveOk returns a tuple with the BulkRemove field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserClassAllocationChange) GetBulkRemoveOk() (*bool, bool) {
	if o == nil || IsNil(o.BulkRemove) {
		return nil, false
	}
	return o.BulkRemove, true
}

// HasBulkRemove returns a boolean if a field has been set.
func (o *UserClassAllocationChange) HasBulkRemove() bool {
	if o != nil && !IsNil(o.BulkRemove) {
		return true
	}

	return false
}

// SetBulkRemove gets a reference to the given bool and assigns it to the BulkRemove field.
func (o *UserClassAllocationChange) SetBulkRemove(v bool) {
	o.BulkRemove = &v
}

// GetAllocations returns the Allocations field value if set, zero value otherwise.
func (o *UserClassAllocationChange) GetAllocations() map[string]string {
	if o == nil || IsNil(o.Allocations) {
		var ret map[string]string
		return ret
	}
	return *o.Allocations
}

// GetAllocationsOk returns a tuple with the Allocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserClassAllocationChange) GetAllocationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Allocations) {
		return nil, false
	}
	return o.Allocations, true
}

// HasAllocations returns a boolean if a field has been set.
func (o *UserClassAllocationChange) HasAllocations() bool {
	if o != nil && !IsNil(o.Allocations) {
		return true
	}

	return false
}

// SetAllocations gets a reference to the given map[string]string and assigns it to the Allocations field.
func (o *UserClassAllocationChange) SetAllocations(v map[string]string) {
	o.Allocations = &v
}

func (o UserClassAllocationChange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserClassAllocationChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Usernames) {
		toSerialize["usernames"] = o.Usernames
	}
	if !IsNil(o.BulkAssign) {
		toSerialize["bulkAssign"] = o.BulkAssign
	}
	if !IsNil(o.BulkRemove) {
		toSerialize["bulkRemove"] = o.BulkRemove
	}
	if !IsNil(o.Allocations) {
		toSerialize["allocations"] = o.Allocations
	}
	return toSerialize, nil
}

type NullableUserClassAllocationChange struct {
	value *UserClassAllocationChange
	isSet bool
}

func (v NullableUserClassAllocationChange) Get() *UserClassAllocationChange {
	return v.value
}

func (v *NullableUserClassAllocationChange) Set(val *UserClassAllocationChange) {
	v.value = val
	v.isSet = true
}

func (v NullableUserClassAllocationChange) IsSet() bool {
	return v.isSet
}

func (v *NullableUserClassAllocationChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserClassAllocationChange(val *UserClassAllocationChange) *NullableUserClassAllocationChange {
	return &NullableUserClassAllocationChange{value: val, isSet: true}
}

func (v NullableUserClassAllocationChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserClassAllocationChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


